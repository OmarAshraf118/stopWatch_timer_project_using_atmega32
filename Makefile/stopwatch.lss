
stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00003fbc  00004050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800094  00800094  00004084  2**0
                  ALLOC
  3 .stab         00002d30  00000000  00000000  00004084  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001643  00000000  00000000  00006db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000083f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008537  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000086a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b1db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bf88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cb43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__vector_4>
      14:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 32 1d 	jmp	0x3a64	; 0x3a64 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__vector_9>
      28:	0c 94 cc 1c 	jmp	0x3998	; 0x3998 <__vector_10>
      2c:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 88 0a 	call	0x1510	; 0x1510 <main>
      8a:	0c 94 dc 1f 	jmp	0x3fb8	; 0x3fb8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a5 1f 	jmp	0x3f4a	; 0x3f4a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a5 1f 	jmp	0x3f4a	; 0x3f4a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b5 1f 	jmp	0x3f6a	; 0x3f6a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUTTON_init>:
#include "gpio.h"
#include "button.h"

void BUTTON_init(BUTTON_Config* buttonConfig)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <BUTTON_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(buttonConfig->ButtonPort_ID, buttonConfig->ButtonPin_ID, PIN_INPUT);
     b54:	e9 81       	ldd	r30, Y+1	; 0x01
     b56:	fa 81       	ldd	r31, Y+2	; 0x02
     b58:	80 81       	ld	r24, Z
     b5a:	e9 81       	ldd	r30, Y+1	; 0x01
     b5c:	fa 81       	ldd	r31, Y+2	; 0x02
     b5e:	91 81       	ldd	r25, Z+1	; 0x01
     b60:	69 2f       	mov	r22, r25
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	0e 94 49 06 	call	0xc92	; 0xc92 <GPIO_setupPinDirection>
}
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <BUTTON_checkPressed>:
/* a function that checks if a button is pressed and returns 1 if true */
uint8 BUTTON_checkPressed(BUTTON_Config* buttonConfig)
{
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	00 d0       	rcall	.+0      	; 0xb78 <BUTTON_checkPressed+0x6>
     b78:	00 d0       	rcall	.+0      	; 0xb7a <BUTTON_checkPressed+0x8>
     b7a:	0f 92       	push	r0
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
	switch(buttonConfig->ButtonConnection)
     b84:	e9 81       	ldd	r30, Y+1	; 0x01
     b86:	fa 81       	ldd	r31, Y+2	; 0x02
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	3d 83       	std	Y+5, r19	; 0x05
     b90:	2c 83       	std	Y+4, r18	; 0x04
     b92:	8c 81       	ldd	r24, Y+4	; 0x04
     b94:	9d 81       	ldd	r25, Y+5	; 0x05
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	31 f0       	breq	.+12     	; 0xba6 <BUTTON_checkPressed+0x34>
     b9a:	2c 81       	ldd	r18, Y+4	; 0x04
     b9c:	3d 81       	ldd	r19, Y+5	; 0x05
     b9e:	21 30       	cpi	r18, 0x01	; 1
     ba0:	31 05       	cpc	r19, r1
     ba2:	89 f0       	breq	.+34     	; 0xbc6 <BUTTON_checkPressed+0x54>
     ba4:	20 c0       	rjmp	.+64     	; 0xbe6 <BUTTON_checkPressed+0x74>
	{
	case pullup:
		if(!GPIO_readPin(buttonConfig->ButtonPort_ID, buttonConfig->ButtonPin_ID))
     ba6:	e9 81       	ldd	r30, Y+1	; 0x01
     ba8:	fa 81       	ldd	r31, Y+2	; 0x02
     baa:	80 81       	ld	r24, Z
     bac:	e9 81       	ldd	r30, Y+1	; 0x01
     bae:	fa 81       	ldd	r31, Y+2	; 0x02
     bb0:	91 81       	ldd	r25, Z+1	; 0x01
     bb2:	69 2f       	mov	r22, r25
     bb4:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_readPin>
     bb8:	88 23       	and	r24, r24
     bba:	19 f4       	brne	.+6      	; 0xbc2 <BUTTON_checkPressed+0x50>
			return BUTTON_PRESSED;
     bbc:	31 e0       	ldi	r19, 0x01	; 1
     bbe:	3b 83       	std	Y+3, r19	; 0x03
     bc0:	13 c0       	rjmp	.+38     	; 0xbe8 <BUTTON_checkPressed+0x76>
		else
			return BUTTON_RELEASED;
     bc2:	1b 82       	std	Y+3, r1	; 0x03
     bc4:	11 c0       	rjmp	.+34     	; 0xbe8 <BUTTON_checkPressed+0x76>
		break;
	case pulldown:
		if(GPIO_readPin(buttonConfig->ButtonPort_ID, buttonConfig->ButtonPin_ID))
     bc6:	e9 81       	ldd	r30, Y+1	; 0x01
     bc8:	fa 81       	ldd	r31, Y+2	; 0x02
     bca:	80 81       	ld	r24, Z
     bcc:	e9 81       	ldd	r30, Y+1	; 0x01
     bce:	fa 81       	ldd	r31, Y+2	; 0x02
     bd0:	91 81       	ldd	r25, Z+1	; 0x01
     bd2:	69 2f       	mov	r22, r25
     bd4:	0e 94 1f 08 	call	0x103e	; 0x103e <GPIO_readPin>
     bd8:	88 23       	and	r24, r24
     bda:	19 f0       	breq	.+6      	; 0xbe2 <BUTTON_checkPressed+0x70>
			return BUTTON_PRESSED;
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8b 83       	std	Y+3, r24	; 0x03
     be0:	03 c0       	rjmp	.+6      	; 0xbe8 <BUTTON_checkPressed+0x76>
		else
			return BUTTON_RELEASED;
     be2:	1b 82       	std	Y+3, r1	; 0x03
     be4:	01 c0       	rjmp	.+2      	; 0xbe8 <BUTTON_checkPressed+0x76>
		break;
	}
	return 0;
     be6:	1b 82       	std	Y+3, r1	; 0x03
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
}
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <Buzzer_init>:
#include "buzzer.h"
#include "gpio.h"

/*initialize the buzzer*/
void Buzzer_init(BUZZER_Config* a_buzzerConfig)
{
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <Buzzer_init+0x6>
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	9a 83       	std	Y+2, r25	; 0x02
     c06:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(a_buzzerConfig->buzzerPort_ID, a_buzzerConfig->buzzerPin_ID, PIN_OUTPUT); /*set buzzer pin to output*/
     c08:	e9 81       	ldd	r30, Y+1	; 0x01
     c0a:	fa 81       	ldd	r31, Y+2	; 0x02
     c0c:	80 81       	ld	r24, Z
     c0e:	e9 81       	ldd	r30, Y+1	; 0x01
     c10:	fa 81       	ldd	r31, Y+2	; 0x02
     c12:	91 81       	ldd	r25, Z+1	; 0x01
     c14:	69 2f       	mov	r22, r25
     c16:	41 e0       	ldi	r20, 0x01	; 1
     c18:	0e 94 49 06 	call	0xc92	; 0xc92 <GPIO_setupPinDirection>
	GPIO_writePin(a_buzzerConfig->buzzerPort_ID, a_buzzerConfig->buzzerPin_ID, BUZZER_OFF); /*set buzzer off*/
     c1c:	e9 81       	ldd	r30, Y+1	; 0x01
     c1e:	fa 81       	ldd	r31, Y+2	; 0x02
     c20:	80 81       	ld	r24, Z
     c22:	e9 81       	ldd	r30, Y+1	; 0x01
     c24:	fa 81       	ldd	r31, Y+2	; 0x02
     c26:	91 81       	ldd	r25, Z+1	; 0x01
     c28:	69 2f       	mov	r22, r25
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
}
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <Buzzer_on>:

/*turn buzzer on*/
void Buzzer_on(BUZZER_Config* a_buzzerConfig)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <Buzzer_on+0x6>
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(a_buzzerConfig->buzzerPort_ID, a_buzzerConfig->buzzerPin_ID, BUZZER_ON);
     c48:	e9 81       	ldd	r30, Y+1	; 0x01
     c4a:	fa 81       	ldd	r31, Y+2	; 0x02
     c4c:	80 81       	ld	r24, Z
     c4e:	e9 81       	ldd	r30, Y+1	; 0x01
     c50:	fa 81       	ldd	r31, Y+2	; 0x02
     c52:	91 81       	ldd	r25, Z+1	; 0x01
     c54:	69 2f       	mov	r22, r25
     c56:	41 e0       	ldi	r20, 0x01	; 1
     c58:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
}
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <Buzzer_off>:

/*turn buzzer off*/
void Buzzer_off(BUZZER_Config* a_buzzerConfig)
{
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	00 d0       	rcall	.+0      	; 0xc6c <Buzzer_off+0x6>
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	9a 83       	std	Y+2, r25	; 0x02
     c72:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(a_buzzerConfig->buzzerPort_ID, a_buzzerConfig->buzzerPin_ID, BUZZER_OFF);
     c74:	e9 81       	ldd	r30, Y+1	; 0x01
     c76:	fa 81       	ldd	r31, Y+2	; 0x02
     c78:	80 81       	ld	r24, Z
     c7a:	e9 81       	ldd	r30, Y+1	; 0x01
     c7c:	fa 81       	ldd	r31, Y+2	; 0x02
     c7e:	91 81       	ldd	r25, Z+1	; 0x01
     c80:	69 2f       	mov	r22, r25
     c82:	40 e0       	ldi	r20, 0x00	; 0
     c84:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
}
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	00 d0       	rcall	.+0      	; 0xc98 <GPIO_setupPinDirection+0x6>
     c98:	00 d0       	rcall	.+0      	; 0xc9a <GPIO_setupPinDirection+0x8>
     c9a:	0f 92       	push	r0
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	89 83       	std	Y+1, r24	; 0x01
     ca2:	6a 83       	std	Y+2, r22	; 0x02
     ca4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	88 30       	cpi	r24, 0x08	; 8
     caa:	08 f0       	brcs	.+2      	; 0xcae <GPIO_setupPinDirection+0x1c>
     cac:	d5 c0       	rjmp	.+426    	; 0xe58 <GPIO_setupPinDirection+0x1c6>
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	84 30       	cpi	r24, 0x04	; 4
     cb2:	08 f0       	brcs	.+2      	; 0xcb6 <GPIO_setupPinDirection+0x24>
     cb4:	d1 c0       	rjmp	.+418    	; 0xe58 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	3d 83       	std	Y+5, r19	; 0x05
     cbe:	2c 83       	std	Y+4, r18	; 0x04
     cc0:	8c 81       	ldd	r24, Y+4	; 0x04
     cc2:	9d 81       	ldd	r25, Y+5	; 0x05
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	91 05       	cpc	r25, r1
     cc8:	09 f4       	brne	.+2      	; 0xccc <GPIO_setupPinDirection+0x3a>
     cca:	43 c0       	rjmp	.+134    	; 0xd52 <GPIO_setupPinDirection+0xc0>
     ccc:	2c 81       	ldd	r18, Y+4	; 0x04
     cce:	3d 81       	ldd	r19, Y+5	; 0x05
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	31 05       	cpc	r19, r1
     cd4:	2c f4       	brge	.+10     	; 0xce0 <GPIO_setupPinDirection+0x4e>
     cd6:	8c 81       	ldd	r24, Y+4	; 0x04
     cd8:	9d 81       	ldd	r25, Y+5	; 0x05
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	71 f0       	breq	.+28     	; 0xcfa <GPIO_setupPinDirection+0x68>
     cde:	bc c0       	rjmp	.+376    	; 0xe58 <GPIO_setupPinDirection+0x1c6>
     ce0:	2c 81       	ldd	r18, Y+4	; 0x04
     ce2:	3d 81       	ldd	r19, Y+5	; 0x05
     ce4:	22 30       	cpi	r18, 0x02	; 2
     ce6:	31 05       	cpc	r19, r1
     ce8:	09 f4       	brne	.+2      	; 0xcec <GPIO_setupPinDirection+0x5a>
     cea:	5f c0       	rjmp	.+190    	; 0xdaa <GPIO_setupPinDirection+0x118>
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	9d 81       	ldd	r25, Y+5	; 0x05
     cf0:	83 30       	cpi	r24, 0x03	; 3
     cf2:	91 05       	cpc	r25, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <GPIO_setupPinDirection+0x66>
     cf6:	85 c0       	rjmp	.+266    	; 0xe02 <GPIO_setupPinDirection+0x170>
     cf8:	af c0       	rjmp	.+350    	; 0xe58 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	a1 f4       	brne	.+40     	; 0xd28 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d00:	aa e3       	ldi	r26, 0x3A	; 58
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ea e3       	ldi	r30, 0x3A	; 58
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 2e       	mov	r0, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <GPIO_setupPinDirection+0x8c>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <GPIO_setupPinDirection+0x88>
     d22:	84 2b       	or	r24, r20
     d24:	8c 93       	st	X, r24
     d26:	98 c0       	rjmp	.+304    	; 0xe58 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d28:	aa e3       	ldi	r26, 0x3A	; 58
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ea e3       	ldi	r30, 0x3A	; 58
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <GPIO_setupPinDirection+0xb4>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <GPIO_setupPinDirection+0xb0>
     d4a:	80 95       	com	r24
     d4c:	84 23       	and	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	83 c0       	rjmp	.+262    	; 0xe58 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	a1 f4       	brne	.+40     	; 0xd80 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d58:	a7 e3       	ldi	r26, 0x37	; 55
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e7 e3       	ldi	r30, 0x37	; 55
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	48 2f       	mov	r20, r24
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 2e       	mov	r0, r18
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <GPIO_setupPinDirection+0xe4>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	0a 94       	dec	r0
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <GPIO_setupPinDirection+0xe0>
     d7a:	84 2b       	or	r24, r20
     d7c:	8c 93       	st	X, r24
     d7e:	6c c0       	rjmp	.+216    	; 0xe58 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     d80:	a7 e3       	ldi	r26, 0x37	; 55
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e7 e3       	ldi	r30, 0x37	; 55
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <GPIO_setupPinDirection+0x10c>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <GPIO_setupPinDirection+0x108>
     da2:	80 95       	com	r24
     da4:	84 23       	and	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	57 c0       	rjmp	.+174    	; 0xe58 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	a1 f4       	brne	.+40     	; 0xdd8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     db0:	a4 e3       	ldi	r26, 0x34	; 52
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e4 e3       	ldi	r30, 0x34	; 52
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <GPIO_setupPinDirection+0x13c>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <GPIO_setupPinDirection+0x138>
     dd2:	84 2b       	or	r24, r20
     dd4:	8c 93       	st	X, r24
     dd6:	40 c0       	rjmp	.+128    	; 0xe58 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     dd8:	a4 e3       	ldi	r26, 0x34	; 52
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e4 e3       	ldi	r30, 0x34	; 52
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <GPIO_setupPinDirection+0x164>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <GPIO_setupPinDirection+0x160>
     dfa:	80 95       	com	r24
     dfc:	84 23       	and	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	2b c0       	rjmp	.+86     	; 0xe58 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	a1 f4       	brne	.+40     	; 0xe30 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e08:	a1 e3       	ldi	r26, 0x31	; 49
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e1 e3       	ldi	r30, 0x31	; 49
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <GPIO_setupPinDirection+0x194>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <GPIO_setupPinDirection+0x190>
     e2a:	84 2b       	or	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	14 c0       	rjmp	.+40     	; 0xe58 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e30:	a1 e3       	ldi	r26, 0x31	; 49
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e1 e3       	ldi	r30, 0x31	; 49
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	48 2f       	mov	r20, r24
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 2e       	mov	r0, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <GPIO_setupPinDirection+0x1bc>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	0a 94       	dec	r0
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <GPIO_setupPinDirection+0x1b8>
     e52:	80 95       	com	r24
     e54:	84 23       	and	r24, r20
     e56:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <GPIO_writePin+0x6>
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <GPIO_writePin+0x8>
     e70:	0f 92       	push	r0
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	6a 83       	std	Y+2, r22	; 0x02
     e7a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	88 30       	cpi	r24, 0x08	; 8
     e80:	08 f0       	brcs	.+2      	; 0xe84 <GPIO_writePin+0x1c>
     e82:	d5 c0       	rjmp	.+426    	; 0x102e <GPIO_writePin+0x1c6>
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	84 30       	cpi	r24, 0x04	; 4
     e88:	08 f0       	brcs	.+2      	; 0xe8c <GPIO_writePin+0x24>
     e8a:	d1 c0       	rjmp	.+418    	; 0x102e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3d 83       	std	Y+5, r19	; 0x05
     e94:	2c 83       	std	Y+4, r18	; 0x04
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	9d 81       	ldd	r25, Y+5	; 0x05
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	91 05       	cpc	r25, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <GPIO_writePin+0x3a>
     ea0:	43 c0       	rjmp	.+134    	; 0xf28 <GPIO_writePin+0xc0>
     ea2:	2c 81       	ldd	r18, Y+4	; 0x04
     ea4:	3d 81       	ldd	r19, Y+5	; 0x05
     ea6:	22 30       	cpi	r18, 0x02	; 2
     ea8:	31 05       	cpc	r19, r1
     eaa:	2c f4       	brge	.+10     	; 0xeb6 <GPIO_writePin+0x4e>
     eac:	8c 81       	ldd	r24, Y+4	; 0x04
     eae:	9d 81       	ldd	r25, Y+5	; 0x05
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	71 f0       	breq	.+28     	; 0xed0 <GPIO_writePin+0x68>
     eb4:	bc c0       	rjmp	.+376    	; 0x102e <GPIO_writePin+0x1c6>
     eb6:	2c 81       	ldd	r18, Y+4	; 0x04
     eb8:	3d 81       	ldd	r19, Y+5	; 0x05
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	09 f4       	brne	.+2      	; 0xec2 <GPIO_writePin+0x5a>
     ec0:	5f c0       	rjmp	.+190    	; 0xf80 <GPIO_writePin+0x118>
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	83 30       	cpi	r24, 0x03	; 3
     ec8:	91 05       	cpc	r25, r1
     eca:	09 f4       	brne	.+2      	; 0xece <GPIO_writePin+0x66>
     ecc:	85 c0       	rjmp	.+266    	; 0xfd8 <GPIO_writePin+0x170>
     ece:	af c0       	rjmp	.+350    	; 0x102e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	a1 f4       	brne	.+40     	; 0xefe <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ed6:	ab e3       	ldi	r26, 0x3B	; 59
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	eb e3       	ldi	r30, 0x3B	; 59
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <GPIO_writePin+0x8c>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <GPIO_writePin+0x88>
     ef8:	84 2b       	or	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	98 c0       	rjmp	.+304    	; 0x102e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     efe:	ab e3       	ldi	r26, 0x3B	; 59
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	eb e3       	ldi	r30, 0x3B	; 59
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <GPIO_writePin+0xb4>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <GPIO_writePin+0xb0>
     f20:	80 95       	com	r24
     f22:	84 23       	and	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	83 c0       	rjmp	.+262    	; 0x102e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	a1 f4       	brne	.+40     	; 0xf56 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f2e:	a8 e3       	ldi	r26, 0x38	; 56
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e8 e3       	ldi	r30, 0x38	; 56
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <GPIO_writePin+0xe4>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <GPIO_writePin+0xe0>
     f50:	84 2b       	or	r24, r20
     f52:	8c 93       	st	X, r24
     f54:	6c c0       	rjmp	.+216    	; 0x102e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     f56:	a8 e3       	ldi	r26, 0x38	; 56
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e8 e3       	ldi	r30, 0x38	; 56
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <GPIO_writePin+0x10c>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <GPIO_writePin+0x108>
     f78:	80 95       	com	r24
     f7a:	84 23       	and	r24, r20
     f7c:	8c 93       	st	X, r24
     f7e:	57 c0       	rjmp	.+174    	; 0x102e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	a1 f4       	brne	.+40     	; 0xfae <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f86:	a5 e3       	ldi	r26, 0x35	; 53
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e5 e3       	ldi	r30, 0x35	; 53
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <GPIO_writePin+0x13c>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <GPIO_writePin+0x138>
     fa8:	84 2b       	or	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	40 c0       	rjmp	.+128    	; 0x102e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     fae:	a5 e3       	ldi	r26, 0x35	; 53
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e5 e3       	ldi	r30, 0x35	; 53
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <GPIO_writePin+0x164>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <GPIO_writePin+0x160>
     fd0:	80 95       	com	r24
     fd2:	84 23       	and	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	2b c0       	rjmp	.+86     	; 0x102e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	a1 f4       	brne	.+40     	; 0x1006 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     fde:	a2 e3       	ldi	r26, 0x32	; 50
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e2 e3       	ldi	r30, 0x32	; 50
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <GPIO_writePin+0x194>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <GPIO_writePin+0x190>
    1000:	84 2b       	or	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	14 c0       	rjmp	.+40     	; 0x102e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1006:	a2 e3       	ldi	r26, 0x32	; 50
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e2 e3       	ldi	r30, 0x32	; 50
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <GPIO_writePin+0x1bc>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <GPIO_writePin+0x1b8>
    1028:	80 95       	com	r24
    102a:	84 23       	and	r24, r20
    102c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <GPIO_readPin+0x6>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <GPIO_readPin+0x8>
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	8a 83       	std	Y+2, r24	; 0x02
    104e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1050:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	88 30       	cpi	r24, 0x08	; 8
    1056:	08 f0       	brcs	.+2      	; 0x105a <GPIO_readPin+0x1c>
    1058:	84 c0       	rjmp	.+264    	; 0x1162 <GPIO_readPin+0x124>
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	84 30       	cpi	r24, 0x04	; 4
    105e:	08 f0       	brcs	.+2      	; 0x1062 <GPIO_readPin+0x24>
    1060:	80 c0       	rjmp	.+256    	; 0x1162 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	3d 83       	std	Y+5, r19	; 0x05
    106a:	2c 83       	std	Y+4, r18	; 0x04
    106c:	4c 81       	ldd	r20, Y+4	; 0x04
    106e:	5d 81       	ldd	r21, Y+5	; 0x05
    1070:	41 30       	cpi	r20, 0x01	; 1
    1072:	51 05       	cpc	r21, r1
    1074:	79 f1       	breq	.+94     	; 0x10d4 <GPIO_readPin+0x96>
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	9d 81       	ldd	r25, Y+5	; 0x05
    107a:	82 30       	cpi	r24, 0x02	; 2
    107c:	91 05       	cpc	r25, r1
    107e:	34 f4       	brge	.+12     	; 0x108c <GPIO_readPin+0x4e>
    1080:	2c 81       	ldd	r18, Y+4	; 0x04
    1082:	3d 81       	ldd	r19, Y+5	; 0x05
    1084:	21 15       	cp	r18, r1
    1086:	31 05       	cpc	r19, r1
    1088:	69 f0       	breq	.+26     	; 0x10a4 <GPIO_readPin+0x66>
    108a:	6b c0       	rjmp	.+214    	; 0x1162 <GPIO_readPin+0x124>
    108c:	4c 81       	ldd	r20, Y+4	; 0x04
    108e:	5d 81       	ldd	r21, Y+5	; 0x05
    1090:	42 30       	cpi	r20, 0x02	; 2
    1092:	51 05       	cpc	r21, r1
    1094:	b9 f1       	breq	.+110    	; 0x1104 <GPIO_readPin+0xc6>
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	9d 81       	ldd	r25, Y+5	; 0x05
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	91 05       	cpc	r25, r1
    109e:	09 f4       	brne	.+2      	; 0x10a2 <GPIO_readPin+0x64>
    10a0:	49 c0       	rjmp	.+146    	; 0x1134 <GPIO_readPin+0xf6>
    10a2:	5f c0       	rjmp	.+190    	; 0x1162 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    10a4:	e9 e3       	ldi	r30, 0x39	; 57
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	a9 01       	movw	r20, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <GPIO_readPin+0x7e>
    10b8:	55 95       	asr	r21
    10ba:	47 95       	ror	r20
    10bc:	8a 95       	dec	r24
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <GPIO_readPin+0x7a>
    10c0:	ca 01       	movw	r24, r20
    10c2:	81 70       	andi	r24, 0x01	; 1
    10c4:	90 70       	andi	r25, 0x00	; 0
    10c6:	88 23       	and	r24, r24
    10c8:	19 f0       	breq	.+6      	; 0x10d0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	49 c0       	rjmp	.+146    	; 0x1162 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10d0:	19 82       	std	Y+1, r1	; 0x01
    10d2:	47 c0       	rjmp	.+142    	; 0x1162 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    10d4:	e6 e3       	ldi	r30, 0x36	; 54
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	a9 01       	movw	r20, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <GPIO_readPin+0xae>
    10e8:	55 95       	asr	r21
    10ea:	47 95       	ror	r20
    10ec:	8a 95       	dec	r24
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <GPIO_readPin+0xaa>
    10f0:	ca 01       	movw	r24, r20
    10f2:	81 70       	andi	r24, 0x01	; 1
    10f4:	90 70       	andi	r25, 0x00	; 0
    10f6:	88 23       	and	r24, r24
    10f8:	19 f0       	breq	.+6      	; 0x1100 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	89 83       	std	Y+1, r24	; 0x01
    10fe:	31 c0       	rjmp	.+98     	; 0x1162 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1100:	19 82       	std	Y+1, r1	; 0x01
    1102:	2f c0       	rjmp	.+94     	; 0x1162 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1104:	e3 e3       	ldi	r30, 0x33	; 51
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a9 01       	movw	r20, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <GPIO_readPin+0xde>
    1118:	55 95       	asr	r21
    111a:	47 95       	ror	r20
    111c:	8a 95       	dec	r24
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <GPIO_readPin+0xda>
    1120:	ca 01       	movw	r24, r20
    1122:	81 70       	andi	r24, 0x01	; 1
    1124:	90 70       	andi	r25, 0x00	; 0
    1126:	88 23       	and	r24, r24
    1128:	19 f0       	breq	.+6      	; 0x1130 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	19 c0       	rjmp	.+50     	; 0x1162 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1130:	19 82       	std	Y+1, r1	; 0x01
    1132:	17 c0       	rjmp	.+46     	; 0x1162 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1134:	e0 e3       	ldi	r30, 0x30	; 48
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a9 01       	movw	r20, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <GPIO_readPin+0x10e>
    1148:	55 95       	asr	r21
    114a:	47 95       	ror	r20
    114c:	8a 95       	dec	r24
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <GPIO_readPin+0x10a>
    1150:	ca 01       	movw	r24, r20
    1152:	81 70       	andi	r24, 0x01	; 1
    1154:	90 70       	andi	r25, 0x00	; 0
    1156:	88 23       	and	r24, r24
    1158:	19 f0       	breq	.+6      	; 0x1160 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1160:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <GPIO_setupPortDirection+0x6>
    117a:	00 d0       	rcall	.+0      	; 0x117c <GPIO_setupPortDirection+0x8>
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	90 f5       	brcc	.+100    	; 0x11ee <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	3c 83       	std	Y+4, r19	; 0x04
    1192:	2b 83       	std	Y+3, r18	; 0x03
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	91 05       	cpc	r25, r1
    119c:	d1 f0       	breq	.+52     	; 0x11d2 <GPIO_setupPortDirection+0x5e>
    119e:	2b 81       	ldd	r18, Y+3	; 0x03
    11a0:	3c 81       	ldd	r19, Y+4	; 0x04
    11a2:	22 30       	cpi	r18, 0x02	; 2
    11a4:	31 05       	cpc	r19, r1
    11a6:	2c f4       	brge	.+10     	; 0x11b2 <GPIO_setupPortDirection+0x3e>
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	61 f0       	breq	.+24     	; 0x11c8 <GPIO_setupPortDirection+0x54>
    11b0:	1e c0       	rjmp	.+60     	; 0x11ee <GPIO_setupPortDirection+0x7a>
    11b2:	2b 81       	ldd	r18, Y+3	; 0x03
    11b4:	3c 81       	ldd	r19, Y+4	; 0x04
    11b6:	22 30       	cpi	r18, 0x02	; 2
    11b8:	31 05       	cpc	r19, r1
    11ba:	81 f0       	breq	.+32     	; 0x11dc <GPIO_setupPortDirection+0x68>
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	9c 81       	ldd	r25, Y+4	; 0x04
    11c0:	83 30       	cpi	r24, 0x03	; 3
    11c2:	91 05       	cpc	r25, r1
    11c4:	81 f0       	breq	.+32     	; 0x11e6 <GPIO_setupPortDirection+0x72>
    11c6:	13 c0       	rjmp	.+38     	; 0x11ee <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    11c8:	ea e3       	ldi	r30, 0x3A	; 58
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	80 83       	st	Z, r24
    11d0:	0e c0       	rjmp	.+28     	; 0x11ee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    11d2:	e7 e3       	ldi	r30, 0x37	; 55
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	80 83       	st	Z, r24
    11da:	09 c0       	rjmp	.+18     	; 0x11ee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    11dc:	e4 e3       	ldi	r30, 0x34	; 52
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	80 83       	st	Z, r24
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    11e6:	e1 e3       	ldi	r30, 0x31	; 49
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	80 83       	st	Z, r24
			break;
		}
	}
}
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	00 d0       	rcall	.+0      	; 0x1202 <GPIO_writePort+0x6>
    1202:	00 d0       	rcall	.+0      	; 0x1204 <GPIO_writePort+0x8>
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	84 30       	cpi	r24, 0x04	; 4
    1210:	90 f5       	brcc	.+100    	; 0x1276 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	3c 83       	std	Y+4, r19	; 0x04
    121a:	2b 83       	std	Y+3, r18	; 0x03
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	91 05       	cpc	r25, r1
    1224:	d1 f0       	breq	.+52     	; 0x125a <GPIO_writePort+0x5e>
    1226:	2b 81       	ldd	r18, Y+3	; 0x03
    1228:	3c 81       	ldd	r19, Y+4	; 0x04
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	2c f4       	brge	.+10     	; 0x123a <GPIO_writePort+0x3e>
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	61 f0       	breq	.+24     	; 0x1250 <GPIO_writePort+0x54>
    1238:	1e c0       	rjmp	.+60     	; 0x1276 <GPIO_writePort+0x7a>
    123a:	2b 81       	ldd	r18, Y+3	; 0x03
    123c:	3c 81       	ldd	r19, Y+4	; 0x04
    123e:	22 30       	cpi	r18, 0x02	; 2
    1240:	31 05       	cpc	r19, r1
    1242:	81 f0       	breq	.+32     	; 0x1264 <GPIO_writePort+0x68>
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	83 30       	cpi	r24, 0x03	; 3
    124a:	91 05       	cpc	r25, r1
    124c:	81 f0       	breq	.+32     	; 0x126e <GPIO_writePort+0x72>
    124e:	13 c0       	rjmp	.+38     	; 0x1276 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1250:	eb e3       	ldi	r30, 0x3B	; 59
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	80 83       	st	Z, r24
    1258:	0e c0       	rjmp	.+28     	; 0x1276 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    125a:	e8 e3       	ldi	r30, 0x38	; 56
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	80 83       	st	Z, r24
    1262:	09 c0       	rjmp	.+18     	; 0x1276 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1264:	e5 e3       	ldi	r30, 0x35	; 53
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	80 83       	st	Z, r24
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    126e:	e2 e3       	ldi	r30, 0x32	; 50
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	80 83       	st	Z, r24
			break;
		}
	}
}
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	00 d0       	rcall	.+0      	; 0x128a <GPIO_readPort+0x6>
    128a:	00 d0       	rcall	.+0      	; 0x128c <GPIO_readPort+0x8>
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1292:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	84 30       	cpi	r24, 0x04	; 4
    1298:	90 f5       	brcc	.+100    	; 0x12fe <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	3c 83       	std	Y+4, r19	; 0x04
    12a2:	2b 83       	std	Y+3, r18	; 0x03
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	d1 f0       	breq	.+52     	; 0x12e2 <GPIO_readPort+0x5e>
    12ae:	2b 81       	ldd	r18, Y+3	; 0x03
    12b0:	3c 81       	ldd	r19, Y+4	; 0x04
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	2c f4       	brge	.+10     	; 0x12c2 <GPIO_readPort+0x3e>
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	61 f0       	breq	.+24     	; 0x12d8 <GPIO_readPort+0x54>
    12c0:	1e c0       	rjmp	.+60     	; 0x12fe <GPIO_readPort+0x7a>
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	81 f0       	breq	.+32     	; 0x12ec <GPIO_readPort+0x68>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	83 30       	cpi	r24, 0x03	; 3
    12d2:	91 05       	cpc	r25, r1
    12d4:	81 f0       	breq	.+32     	; 0x12f6 <GPIO_readPort+0x72>
    12d6:	13 c0       	rjmp	.+38     	; 0x12fe <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    12d8:	e9 e3       	ldi	r30, 0x39	; 57
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    12e2:	e6 e3       	ldi	r30, 0x36	; 54
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    12ec:	e3 e3       	ldi	r30, 0x33	; 51
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    12f6:	e0 e3       	ldi	r30, 0x30	; 48
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <LEDS_init>:
#include "led.h"
#include "gpio.h"

/*initialize led port and pin*/
 void LEDS_init(LED_config* led_config)
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	00 d0       	rcall	.+0      	; 0x1314 <LEDS_init+0x6>
    1314:	00 d0       	rcall	.+0      	; 0x1316 <LEDS_init+0x8>
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	9a 83       	std	Y+2, r25	; 0x02
    131c:	89 83       	std	Y+1, r24	; 0x01
	 /* Initialize LED */
	GPIO_setupPinDirection(led_config->port_id, led_config->pin_id, PIN_OUTPUT); /*set pin direction*/
    131e:	e9 81       	ldd	r30, Y+1	; 0x01
    1320:	fa 81       	ldd	r31, Y+2	; 0x02
    1322:	80 81       	ld	r24, Z
    1324:	e9 81       	ldd	r30, Y+1	; 0x01
    1326:	fa 81       	ldd	r31, Y+2	; 0x02
    1328:	91 81       	ldd	r25, Z+1	; 0x01
    132a:	69 2f       	mov	r22, r25
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	0e 94 49 06 	call	0xc92	; 0xc92 <GPIO_setupPinDirection>
	/* Turn LED off */
	switch(led_config->led_connection)
    1332:	e9 81       	ldd	r30, Y+1	; 0x01
    1334:	fa 81       	ldd	r31, Y+2	; 0x02
    1336:	82 81       	ldd	r24, Z+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	3c 83       	std	Y+4, r19	; 0x04
    133e:	2b 83       	std	Y+3, r18	; 0x03
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	31 f0       	breq	.+12     	; 0x1354 <LEDS_init+0x46>
    1348:	2b 81       	ldd	r18, Y+3	; 0x03
    134a:	3c 81       	ldd	r19, Y+4	; 0x04
    134c:	21 30       	cpi	r18, 0x01	; 1
    134e:	31 05       	cpc	r19, r1
    1350:	61 f0       	breq	.+24     	; 0x136a <LEDS_init+0x5c>
    1352:	15 c0       	rjmp	.+42     	; 0x137e <LEDS_init+0x70>
	{
	case positive_logic:
		GPIO_writePin(led_config->port_id, led_config->pin_id, LOGIC_LOW); /*turn led off*/
    1354:	e9 81       	ldd	r30, Y+1	; 0x01
    1356:	fa 81       	ldd	r31, Y+2	; 0x02
    1358:	80 81       	ld	r24, Z
    135a:	e9 81       	ldd	r30, Y+1	; 0x01
    135c:	fa 81       	ldd	r31, Y+2	; 0x02
    135e:	91 81       	ldd	r25, Z+1	; 0x01
    1360:	69 2f       	mov	r22, r25
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
    1368:	0a c0       	rjmp	.+20     	; 0x137e <LEDS_init+0x70>
		break;
	case negative_logic:
		GPIO_writePin(led_config->port_id, led_config->pin_id, LOGIC_HIGH); /*turn led off*/
    136a:	e9 81       	ldd	r30, Y+1	; 0x01
    136c:	fa 81       	ldd	r31, Y+2	; 0x02
    136e:	80 81       	ld	r24, Z
    1370:	e9 81       	ldd	r30, Y+1	; 0x01
    1372:	fa 81       	ldd	r31, Y+2	; 0x02
    1374:	91 81       	ldd	r25, Z+1	; 0x01
    1376:	69 2f       	mov	r22, r25
    1378:	41 e0       	ldi	r20, 0x01	; 1
    137a:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
		break;
	}

}
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <LED_on>:

 void LED_on(LED_config* led_config)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <LED_on+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <LED_on+0x8>
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	89 83       	std	Y+1, r24	; 0x01
	 /* Turn LED on */
	switch(led_config->led_connection)
    139c:	e9 81       	ldd	r30, Y+1	; 0x01
    139e:	fa 81       	ldd	r31, Y+2	; 0x02
    13a0:	82 81       	ldd	r24, Z+2	; 0x02
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	3c 83       	std	Y+4, r19	; 0x04
    13a8:	2b 83       	std	Y+3, r18	; 0x03
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	31 f0       	breq	.+12     	; 0x13be <LED_on+0x32>
    13b2:	2b 81       	ldd	r18, Y+3	; 0x03
    13b4:	3c 81       	ldd	r19, Y+4	; 0x04
    13b6:	21 30       	cpi	r18, 0x01	; 1
    13b8:	31 05       	cpc	r19, r1
    13ba:	61 f0       	breq	.+24     	; 0x13d4 <LED_on+0x48>
    13bc:	15 c0       	rjmp	.+42     	; 0x13e8 <LED_on+0x5c>
	{
	case positive_logic:
		GPIO_writePin(led_config->port_id, led_config->pin_id, LOGIC_HIGH); /*turn led on*/
    13be:	e9 81       	ldd	r30, Y+1	; 0x01
    13c0:	fa 81       	ldd	r31, Y+2	; 0x02
    13c2:	80 81       	ld	r24, Z
    13c4:	e9 81       	ldd	r30, Y+1	; 0x01
    13c6:	fa 81       	ldd	r31, Y+2	; 0x02
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	69 2f       	mov	r22, r25
    13cc:	41 e0       	ldi	r20, 0x01	; 1
    13ce:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
    13d2:	0a c0       	rjmp	.+20     	; 0x13e8 <LED_on+0x5c>
		break;
	case negative_logic:
		GPIO_writePin(led_config->port_id, led_config->pin_id, LOGIC_LOW); /*turn led on*/
    13d4:	e9 81       	ldd	r30, Y+1	; 0x01
    13d6:	fa 81       	ldd	r31, Y+2	; 0x02
    13d8:	80 81       	ld	r24, Z
    13da:	e9 81       	ldd	r30, Y+1	; 0x01
    13dc:	fa 81       	ldd	r31, Y+2	; 0x02
    13de:	91 81       	ldd	r25, Z+1	; 0x01
    13e0:	69 2f       	mov	r22, r25
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
		break;
	}
}
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <LED_off>:

 void LED_off(LED_config* led_config)
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <LED_off+0x6>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <LED_off+0x8>
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	9a 83       	std	Y+2, r25	; 0x02
    1404:	89 83       	std	Y+1, r24	; 0x01
	/* Turn LED off */
	switch(led_config->led_connection)
    1406:	e9 81       	ldd	r30, Y+1	; 0x01
    1408:	fa 81       	ldd	r31, Y+2	; 0x02
    140a:	82 81       	ldd	r24, Z+2	; 0x02
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	3c 83       	std	Y+4, r19	; 0x04
    1412:	2b 83       	std	Y+3, r18	; 0x03
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	31 f0       	breq	.+12     	; 0x1428 <LED_off+0x32>
    141c:	2b 81       	ldd	r18, Y+3	; 0x03
    141e:	3c 81       	ldd	r19, Y+4	; 0x04
    1420:	21 30       	cpi	r18, 0x01	; 1
    1422:	31 05       	cpc	r19, r1
    1424:	61 f0       	breq	.+24     	; 0x143e <LED_off+0x48>
    1426:	15 c0       	rjmp	.+42     	; 0x1452 <LED_off+0x5c>
	{
	case positive_logic:
		GPIO_writePin(led_config->port_id, led_config->pin_id, LOGIC_LOW); /*turn led off*/
    1428:	e9 81       	ldd	r30, Y+1	; 0x01
    142a:	fa 81       	ldd	r31, Y+2	; 0x02
    142c:	80 81       	ld	r24, Z
    142e:	e9 81       	ldd	r30, Y+1	; 0x01
    1430:	fa 81       	ldd	r31, Y+2	; 0x02
    1432:	91 81       	ldd	r25, Z+1	; 0x01
    1434:	69 2f       	mov	r22, r25
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
    143c:	0a c0       	rjmp	.+20     	; 0x1452 <LED_off+0x5c>
		break;
	case negative_logic:
		GPIO_writePin(led_config->port_id, led_config->pin_id, LOGIC_HIGH); /*turn led off*/
    143e:	e9 81       	ldd	r30, Y+1	; 0x01
    1440:	fa 81       	ldd	r31, Y+2	; 0x02
    1442:	80 81       	ld	r24, Z
    1444:	e9 81       	ldd	r30, Y+1	; 0x01
    1446:	fa 81       	ldd	r31, Y+2	; 0x02
    1448:	91 81       	ldd	r25, Z+1	; 0x01
    144a:	69 2f       	mov	r22, r25
    144c:	41 e0       	ldi	r20, 0x01	; 1
    144e:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
		break;
	}
}
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <Seven_Segment_init>:
#include "gpio.h"


/* function to configure seven segment display ports and pins */
void Seven_Segment_init(SEVEN_SEGMENT_Config* a_sevenSegmentConfig)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <Seven_Segment_init+0x6>
    1466:	0f 92       	push	r0
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	9b 83       	std	Y+3, r25	; 0x03
    146e:	8a 83       	std	Y+2, r24	; 0x02
	/* loop according to the number of pins that the seven segment need to operate */
	for(uint8 pinSetup_iterator = 0; pinSetup_iterator < SEVEN_SEGMENT_NUMBER_OF_PINS; pinSetup_iterator++)
    1470:	19 82       	std	Y+1, r1	; 0x01
    1472:	10 c0       	rjmp	.+32     	; 0x1494 <Seven_Segment_init+0x34>
	{
		/* setup the pin direction of each individual pin */
		GPIO_setupPinDirection(a_sevenSegmentConfig->sevenSegmentLedsPort_ID, a_sevenSegmentConfig->sevenSegmentLedsFirstPin_ID + pinSetup_iterator, PIN_OUTPUT);
    1474:	ea 81       	ldd	r30, Y+2	; 0x02
    1476:	fb 81       	ldd	r31, Y+3	; 0x03
    1478:	20 81       	ld	r18, Z
    147a:	ea 81       	ldd	r30, Y+2	; 0x02
    147c:	fb 81       	ldd	r31, Y+3	; 0x03
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	98 0f       	add	r25, r24
    1484:	82 2f       	mov	r24, r18
    1486:	69 2f       	mov	r22, r25
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	0e 94 49 06 	call	0xc92	; 0xc92 <GPIO_setupPinDirection>

/* function to configure seven segment display ports and pins */
void Seven_Segment_init(SEVEN_SEGMENT_Config* a_sevenSegmentConfig)
{
	/* loop according to the number of pins that the seven segment need to operate */
	for(uint8 pinSetup_iterator = 0; pinSetup_iterator < SEVEN_SEGMENT_NUMBER_OF_PINS; pinSetup_iterator++)
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	8f 5f       	subi	r24, 0xFF	; 255
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	84 30       	cpi	r24, 0x04	; 4
    1498:	68 f3       	brcs	.-38     	; 0x1474 <Seven_Segment_init+0x14>
	{
		/* setup the pin direction of each individual pin */
		GPIO_setupPinDirection(a_sevenSegmentConfig->sevenSegmentLedsPort_ID, a_sevenSegmentConfig->sevenSegmentLedsFirstPin_ID + pinSetup_iterator, PIN_OUTPUT);
	}
}
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <Seven_Segment_display>:

/* function to display a number on seven segment */
void Seven_Segment_display(const uint8 number, SEVEN_SEGMENT_Config* a_sevenSegmentConfig)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <Seven_Segment_display+0x6>
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <Seven_Segment_display+0x8>
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	8a 83       	std	Y+2, r24	; 0x02
    14b4:	7c 83       	std	Y+4, r23	; 0x04
    14b6:	6b 83       	std	Y+3, r22	; 0x03
	/* loop according to the number of pins that the seven segment need to operate */
	for(uint8 pinWrite_iterator = 0; pinWrite_iterator < SEVEN_SEGMENT_NUMBER_OF_PINS; pinWrite_iterator++)
    14b8:	19 82       	std	Y+1, r1	; 0x01
    14ba:	20 c0       	rjmp	.+64     	; 0x14fc <Seven_Segment_display+0x56>
	{
		/* write the value of the number to the pins */
		GPIO_writePin(a_sevenSegmentConfig->sevenSegmentLedsPort_ID, a_sevenSegmentConfig->sevenSegmentLedsFirstPin_ID + pinWrite_iterator, ((number & (1<<pinWrite_iterator) )? 1 : 0));
    14bc:	eb 81       	ldd	r30, Y+3	; 0x03
    14be:	fc 81       	ldd	r31, Y+4	; 0x04
    14c0:	50 81       	ld	r21, Z
    14c2:	eb 81       	ldd	r30, Y+3	; 0x03
    14c4:	fc 81       	ldd	r31, Y+4	; 0x04
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	49 2f       	mov	r20, r25
    14cc:	48 0f       	add	r20, r24
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	b9 01       	movw	r22, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <Seven_Segment_display+0x3c>
    14de:	75 95       	asr	r23
    14e0:	67 95       	ror	r22
    14e2:	8a 95       	dec	r24
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <Seven_Segment_display+0x38>
    14e6:	cb 01       	movw	r24, r22
    14e8:	98 2f       	mov	r25, r24
    14ea:	91 70       	andi	r25, 0x01	; 1
    14ec:	85 2f       	mov	r24, r21
    14ee:	64 2f       	mov	r22, r20
    14f0:	49 2f       	mov	r20, r25
    14f2:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>

/* function to display a number on seven segment */
void Seven_Segment_display(const uint8 number, SEVEN_SEGMENT_Config* a_sevenSegmentConfig)
{
	/* loop according to the number of pins that the seven segment need to operate */
	for(uint8 pinWrite_iterator = 0; pinWrite_iterator < SEVEN_SEGMENT_NUMBER_OF_PINS; pinWrite_iterator++)
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	8f 5f       	subi	r24, 0xFF	; 255
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	84 30       	cpi	r24, 0x04	; 4
    1500:	e8 f2       	brcs	.-70     	; 0x14bc <Seven_Segment_display+0x16>
	{
		/* write the value of the number to the pins */
		GPIO_writePin(a_sevenSegmentConfig->sevenSegmentLedsPort_ID, a_sevenSegmentConfig->sevenSegmentLedsFirstPin_ID + pinWrite_iterator, ((number & (1<<pinWrite_iterator) )? 1 : 0));
	}
}
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <main>:
 ************************************************************************************************/
void count_up_mode(void);
void count_down_mode(void);

int main(void)
{
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	c3 55       	subi	r28, 0x53	; 83
    151e:	d1 40       	sbci	r29, 0x01	; 1
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
	SREG |=(1<<7); /* enable interrupts */
    152a:	af e5       	ldi	r26, 0x5F	; 95
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	ef e5       	ldi	r30, 0x5F	; 95
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	80 68       	ori	r24, 0x80	; 128
    1536:	8c 93       	st	X, r24
	/*********************************** Local Variables *****************************************/
	Timer_ConfigType s_timer1_init_values = {TIMER_INITIAL_VALUE, TICKS_REQUIRED_FOR_1_SECOND, timer1, prescaler_1024, compareMode};
    1538:	ce 01       	movw	r24, r28
    153a:	8e 51       	subi	r24, 0x1E	; 30
    153c:	9f 4f       	sbci	r25, 0xFF	; 255
    153e:	cd 5e       	subi	r28, 0xED	; 237
    1540:	de 4f       	sbci	r29, 0xFE	; 254
    1542:	99 83       	std	Y+1, r25	; 0x01
    1544:	88 83       	st	Y, r24
    1546:	c3 51       	subi	r28, 0x13	; 19
    1548:	d1 40       	sbci	r29, 0x01	; 1
    154a:	2c e8       	ldi	r18, 0x8C	; 140
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	cb 5e       	subi	r28, 0xEB	; 235
    1550:	de 4f       	sbci	r29, 0xFE	; 254
    1552:	39 83       	std	Y+1, r19	; 0x01
    1554:	28 83       	st	Y, r18
    1556:	c5 51       	subi	r28, 0x15	; 21
    1558:	d1 40       	sbci	r29, 0x01	; 1
    155a:	37 e0       	ldi	r19, 0x07	; 7
    155c:	c9 5e       	subi	r28, 0xE9	; 233
    155e:	de 4f       	sbci	r29, 0xFE	; 254
    1560:	38 83       	st	Y, r19
    1562:	c7 51       	subi	r28, 0x17	; 23
    1564:	d1 40       	sbci	r29, 0x01	; 1
    1566:	cb 5e       	subi	r28, 0xEB	; 235
    1568:	de 4f       	sbci	r29, 0xFE	; 254
    156a:	e8 81       	ld	r30, Y
    156c:	f9 81       	ldd	r31, Y+1	; 0x01
    156e:	c5 51       	subi	r28, 0x15	; 21
    1570:	d1 40       	sbci	r29, 0x01	; 1
    1572:	00 80       	ld	r0, Z
    1574:	cb 5e       	subi	r28, 0xEB	; 235
    1576:	de 4f       	sbci	r29, 0xFE	; 254
    1578:	28 81       	ld	r18, Y
    157a:	39 81       	ldd	r19, Y+1	; 0x01
    157c:	c5 51       	subi	r28, 0x15	; 21
    157e:	d1 40       	sbci	r29, 0x01	; 1
    1580:	2f 5f       	subi	r18, 0xFF	; 255
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
    1584:	cb 5e       	subi	r28, 0xEB	; 235
    1586:	de 4f       	sbci	r29, 0xFE	; 254
    1588:	39 83       	std	Y+1, r19	; 0x01
    158a:	28 83       	st	Y, r18
    158c:	c5 51       	subi	r28, 0x15	; 21
    158e:	d1 40       	sbci	r29, 0x01	; 1
    1590:	cd 5e       	subi	r28, 0xED	; 237
    1592:	de 4f       	sbci	r29, 0xFE	; 254
    1594:	e8 81       	ld	r30, Y
    1596:	f9 81       	ldd	r31, Y+1	; 0x01
    1598:	c3 51       	subi	r28, 0x13	; 19
    159a:	d1 40       	sbci	r29, 0x01	; 1
    159c:	00 82       	st	Z, r0
    159e:	cd 5e       	subi	r28, 0xED	; 237
    15a0:	de 4f       	sbci	r29, 0xFE	; 254
    15a2:	28 81       	ld	r18, Y
    15a4:	39 81       	ldd	r19, Y+1	; 0x01
    15a6:	c3 51       	subi	r28, 0x13	; 19
    15a8:	d1 40       	sbci	r29, 0x01	; 1
    15aa:	2f 5f       	subi	r18, 0xFF	; 255
    15ac:	3f 4f       	sbci	r19, 0xFF	; 255
    15ae:	cd 5e       	subi	r28, 0xED	; 237
    15b0:	de 4f       	sbci	r29, 0xFE	; 254
    15b2:	39 83       	std	Y+1, r19	; 0x01
    15b4:	28 83       	st	Y, r18
    15b6:	c3 51       	subi	r28, 0x13	; 19
    15b8:	d1 40       	sbci	r29, 0x01	; 1
    15ba:	c9 5e       	subi	r28, 0xE9	; 233
    15bc:	de 4f       	sbci	r29, 0xFE	; 254
    15be:	38 81       	ld	r19, Y
    15c0:	c7 51       	subi	r28, 0x17	; 23
    15c2:	d1 40       	sbci	r29, 0x01	; 1
    15c4:	31 50       	subi	r19, 0x01	; 1
    15c6:	c9 5e       	subi	r28, 0xE9	; 233
    15c8:	de 4f       	sbci	r29, 0xFE	; 254
    15ca:	38 83       	st	Y, r19
    15cc:	c7 51       	subi	r28, 0x17	; 23
    15ce:	d1 40       	sbci	r29, 0x01	; 1
    15d0:	c9 5e       	subi	r28, 0xE9	; 233
    15d2:	de 4f       	sbci	r29, 0xFE	; 254
    15d4:	88 81       	ld	r24, Y
    15d6:	c7 51       	subi	r28, 0x17	; 23
    15d8:	d1 40       	sbci	r29, 0x01	; 1
    15da:	88 23       	and	r24, r24
    15dc:	21 f6       	brne	.-120    	; 0x1566 <main+0x56>
	BUZZER_Config s_buzzer_init_values = {PORTD_ID, PIN0_ID};
    15de:	fe 01       	movw	r30, r28
    15e0:	e7 51       	subi	r30, 0x17	; 23
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	83 e0       	ldi	r24, 0x03	; 3
    15e6:	80 83       	st	Z, r24
    15e8:	fe 01       	movw	r30, r28
    15ea:	e7 51       	subi	r30, 0x17	; 23
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	11 82       	std	Z+1, r1	; 0x01
	/* initialize the values required to set the seven segments */
	SEVEN_SEGMENT_Config s_sevenSegment_init_values = {PORTC_ID, PIN0_ID};
    15f0:	fe 01       	movw	r30, r28
    15f2:	e5 51       	subi	r30, 0x15	; 21
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	82 e0       	ldi	r24, 0x02	; 2
    15f8:	80 83       	st	Z, r24
    15fa:	fe 01       	movw	r30, r28
    15fc:	e5 51       	subi	r30, 0x15	; 21
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	11 82       	std	Z+1, r1	; 0x01

	/* set pins responsible for multiplexing the 6 seven_segments' display */
	GPIO_setupPortDirection(PORTA_ID, (PORT_OUTPUT&0x3F)); /* pins A0 to A5 are set to output */
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	6f e3       	ldi	r22, 0x3F	; 63
    1606:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_setupPortDirection>
	for(uint8 i=0; i<6; i++){GPIO_writePin(PORTA_ID, i, LOGIC_LOW);}; /* initialize A0 to A5 to low */
    160a:	fe 01       	movw	r30, r28
    160c:	ef 51       	subi	r30, 0x1F	; 31
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	10 82       	st	Z, r1
    1612:	11 c0       	rjmp	.+34     	; 0x1636 <main+0x126>
    1614:	fe 01       	movw	r30, r28
    1616:	ef 51       	subi	r30, 0x1F	; 31
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	60 81       	ld	r22, Z
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
    1624:	de 01       	movw	r26, r28
    1626:	af 51       	subi	r26, 0x1F	; 31
    1628:	bf 4f       	sbci	r27, 0xFF	; 255
    162a:	fe 01       	movw	r30, r28
    162c:	ef 51       	subi	r30, 0x1F	; 31
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	80 81       	ld	r24, Z
    1632:	8f 5f       	subi	r24, 0xFF	; 255
    1634:	8c 93       	st	X, r24
    1636:	fe 01       	movw	r30, r28
    1638:	ef 51       	subi	r30, 0x1F	; 31
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	80 81       	ld	r24, Z
    163e:	86 30       	cpi	r24, 0x06	; 6
    1640:	48 f3       	brcs	.-46     	; 0x1614 <main+0x104>

	/* initialize the 10 buttons required for the timer */
	BUTTON_Config	s_resetButton = {PORTD_ID, PIN2_ID, pullup},
    1642:	ce 01       	movw	r24, r28
    1644:	83 51       	subi	r24, 0x13	; 19
    1646:	9f 4f       	sbci	r25, 0xFF	; 255
    1648:	c8 5e       	subi	r28, 0xE8	; 232
    164a:	de 4f       	sbci	r29, 0xFE	; 254
    164c:	99 83       	std	Y+1, r25	; 0x01
    164e:	88 83       	st	Y, r24
    1650:	c8 51       	subi	r28, 0x18	; 24
    1652:	d1 40       	sbci	r29, 0x01	; 1
    1654:	e9 e8       	ldi	r30, 0x89	; 137
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	c6 5e       	subi	r28, 0xE6	; 230
    165a:	de 4f       	sbci	r29, 0xFE	; 254
    165c:	f9 83       	std	Y+1, r31	; 0x01
    165e:	e8 83       	st	Y, r30
    1660:	ca 51       	subi	r28, 0x1A	; 26
    1662:	d1 40       	sbci	r29, 0x01	; 1
    1664:	f3 e0       	ldi	r31, 0x03	; 3
    1666:	c4 5e       	subi	r28, 0xE4	; 228
    1668:	de 4f       	sbci	r29, 0xFE	; 254
    166a:	f8 83       	st	Y, r31
    166c:	cc 51       	subi	r28, 0x1C	; 28
    166e:	d1 40       	sbci	r29, 0x01	; 1
    1670:	c6 5e       	subi	r28, 0xE6	; 230
    1672:	de 4f       	sbci	r29, 0xFE	; 254
    1674:	e8 81       	ld	r30, Y
    1676:	f9 81       	ldd	r31, Y+1	; 0x01
    1678:	ca 51       	subi	r28, 0x1A	; 26
    167a:	d1 40       	sbci	r29, 0x01	; 1
    167c:	00 80       	ld	r0, Z
    167e:	c6 5e       	subi	r28, 0xE6	; 230
    1680:	de 4f       	sbci	r29, 0xFE	; 254
    1682:	28 81       	ld	r18, Y
    1684:	39 81       	ldd	r19, Y+1	; 0x01
    1686:	ca 51       	subi	r28, 0x1A	; 26
    1688:	d1 40       	sbci	r29, 0x01	; 1
    168a:	2f 5f       	subi	r18, 0xFF	; 255
    168c:	3f 4f       	sbci	r19, 0xFF	; 255
    168e:	c6 5e       	subi	r28, 0xE6	; 230
    1690:	de 4f       	sbci	r29, 0xFE	; 254
    1692:	39 83       	std	Y+1, r19	; 0x01
    1694:	28 83       	st	Y, r18
    1696:	ca 51       	subi	r28, 0x1A	; 26
    1698:	d1 40       	sbci	r29, 0x01	; 1
    169a:	c8 5e       	subi	r28, 0xE8	; 232
    169c:	de 4f       	sbci	r29, 0xFE	; 254
    169e:	e8 81       	ld	r30, Y
    16a0:	f9 81       	ldd	r31, Y+1	; 0x01
    16a2:	c8 51       	subi	r28, 0x18	; 24
    16a4:	d1 40       	sbci	r29, 0x01	; 1
    16a6:	00 82       	st	Z, r0
    16a8:	c8 5e       	subi	r28, 0xE8	; 232
    16aa:	de 4f       	sbci	r29, 0xFE	; 254
    16ac:	28 81       	ld	r18, Y
    16ae:	39 81       	ldd	r19, Y+1	; 0x01
    16b0:	c8 51       	subi	r28, 0x18	; 24
    16b2:	d1 40       	sbci	r29, 0x01	; 1
    16b4:	2f 5f       	subi	r18, 0xFF	; 255
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	c8 5e       	subi	r28, 0xE8	; 232
    16ba:	de 4f       	sbci	r29, 0xFE	; 254
    16bc:	39 83       	std	Y+1, r19	; 0x01
    16be:	28 83       	st	Y, r18
    16c0:	c8 51       	subi	r28, 0x18	; 24
    16c2:	d1 40       	sbci	r29, 0x01	; 1
    16c4:	c4 5e       	subi	r28, 0xE4	; 228
    16c6:	de 4f       	sbci	r29, 0xFE	; 254
    16c8:	38 81       	ld	r19, Y
    16ca:	cc 51       	subi	r28, 0x1C	; 28
    16cc:	d1 40       	sbci	r29, 0x01	; 1
    16ce:	31 50       	subi	r19, 0x01	; 1
    16d0:	c4 5e       	subi	r28, 0xE4	; 228
    16d2:	de 4f       	sbci	r29, 0xFE	; 254
    16d4:	38 83       	st	Y, r19
    16d6:	cc 51       	subi	r28, 0x1C	; 28
    16d8:	d1 40       	sbci	r29, 0x01	; 1
    16da:	c4 5e       	subi	r28, 0xE4	; 228
    16dc:	de 4f       	sbci	r29, 0xFE	; 254
    16de:	88 81       	ld	r24, Y
    16e0:	cc 51       	subi	r28, 0x1C	; 28
    16e2:	d1 40       	sbci	r29, 0x01	; 1
    16e4:	88 23       	and	r24, r24
    16e6:	21 f6       	brne	.-120    	; 0x1670 <main+0x160>
					s_resumeButton = {PORTB_ID, PIN2_ID, pullup},
    16e8:	ce 01       	movw	r24, r28
    16ea:	80 51       	subi	r24, 0x10	; 16
    16ec:	9f 4f       	sbci	r25, 0xFF	; 255
    16ee:	c3 5e       	subi	r28, 0xE3	; 227
    16f0:	de 4f       	sbci	r29, 0xFE	; 254
    16f2:	99 83       	std	Y+1, r25	; 0x01
    16f4:	88 83       	st	Y, r24
    16f6:	cd 51       	subi	r28, 0x1D	; 29
    16f8:	d1 40       	sbci	r29, 0x01	; 1
    16fa:	e6 e8       	ldi	r30, 0x86	; 134
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	c1 5e       	subi	r28, 0xE1	; 225
    1700:	de 4f       	sbci	r29, 0xFE	; 254
    1702:	f9 83       	std	Y+1, r31	; 0x01
    1704:	e8 83       	st	Y, r30
    1706:	cf 51       	subi	r28, 0x1F	; 31
    1708:	d1 40       	sbci	r29, 0x01	; 1
    170a:	f3 e0       	ldi	r31, 0x03	; 3
    170c:	cf 5d       	subi	r28, 0xDF	; 223
    170e:	de 4f       	sbci	r29, 0xFE	; 254
    1710:	f8 83       	st	Y, r31
    1712:	c1 52       	subi	r28, 0x21	; 33
    1714:	d1 40       	sbci	r29, 0x01	; 1
    1716:	c1 5e       	subi	r28, 0xE1	; 225
    1718:	de 4f       	sbci	r29, 0xFE	; 254
    171a:	e8 81       	ld	r30, Y
    171c:	f9 81       	ldd	r31, Y+1	; 0x01
    171e:	cf 51       	subi	r28, 0x1F	; 31
    1720:	d1 40       	sbci	r29, 0x01	; 1
    1722:	00 80       	ld	r0, Z
    1724:	c1 5e       	subi	r28, 0xE1	; 225
    1726:	de 4f       	sbci	r29, 0xFE	; 254
    1728:	28 81       	ld	r18, Y
    172a:	39 81       	ldd	r19, Y+1	; 0x01
    172c:	cf 51       	subi	r28, 0x1F	; 31
    172e:	d1 40       	sbci	r29, 0x01	; 1
    1730:	2f 5f       	subi	r18, 0xFF	; 255
    1732:	3f 4f       	sbci	r19, 0xFF	; 255
    1734:	c1 5e       	subi	r28, 0xE1	; 225
    1736:	de 4f       	sbci	r29, 0xFE	; 254
    1738:	39 83       	std	Y+1, r19	; 0x01
    173a:	28 83       	st	Y, r18
    173c:	cf 51       	subi	r28, 0x1F	; 31
    173e:	d1 40       	sbci	r29, 0x01	; 1
    1740:	c3 5e       	subi	r28, 0xE3	; 227
    1742:	de 4f       	sbci	r29, 0xFE	; 254
    1744:	e8 81       	ld	r30, Y
    1746:	f9 81       	ldd	r31, Y+1	; 0x01
    1748:	cd 51       	subi	r28, 0x1D	; 29
    174a:	d1 40       	sbci	r29, 0x01	; 1
    174c:	00 82       	st	Z, r0
    174e:	c3 5e       	subi	r28, 0xE3	; 227
    1750:	de 4f       	sbci	r29, 0xFE	; 254
    1752:	28 81       	ld	r18, Y
    1754:	39 81       	ldd	r19, Y+1	; 0x01
    1756:	cd 51       	subi	r28, 0x1D	; 29
    1758:	d1 40       	sbci	r29, 0x01	; 1
    175a:	2f 5f       	subi	r18, 0xFF	; 255
    175c:	3f 4f       	sbci	r19, 0xFF	; 255
    175e:	c3 5e       	subi	r28, 0xE3	; 227
    1760:	de 4f       	sbci	r29, 0xFE	; 254
    1762:	39 83       	std	Y+1, r19	; 0x01
    1764:	28 83       	st	Y, r18
    1766:	cd 51       	subi	r28, 0x1D	; 29
    1768:	d1 40       	sbci	r29, 0x01	; 1
    176a:	cf 5d       	subi	r28, 0xDF	; 223
    176c:	de 4f       	sbci	r29, 0xFE	; 254
    176e:	38 81       	ld	r19, Y
    1770:	c1 52       	subi	r28, 0x21	; 33
    1772:	d1 40       	sbci	r29, 0x01	; 1
    1774:	31 50       	subi	r19, 0x01	; 1
    1776:	cf 5d       	subi	r28, 0xDF	; 223
    1778:	de 4f       	sbci	r29, 0xFE	; 254
    177a:	38 83       	st	Y, r19
    177c:	c1 52       	subi	r28, 0x21	; 33
    177e:	d1 40       	sbci	r29, 0x01	; 1
    1780:	cf 5d       	subi	r28, 0xDF	; 223
    1782:	de 4f       	sbci	r29, 0xFE	; 254
    1784:	88 81       	ld	r24, Y
    1786:	c1 52       	subi	r28, 0x21	; 33
    1788:	d1 40       	sbci	r29, 0x01	; 1
    178a:	88 23       	and	r24, r24
    178c:	21 f6       	brne	.-120    	; 0x1716 <main+0x206>
					s_pauseButton = {PORTD_ID, PIN3_ID, pulldown},
    178e:	ce 01       	movw	r24, r28
    1790:	8d 50       	subi	r24, 0x0D	; 13
    1792:	9f 4f       	sbci	r25, 0xFF	; 255
    1794:	ce 5d       	subi	r28, 0xDE	; 222
    1796:	de 4f       	sbci	r29, 0xFE	; 254
    1798:	99 83       	std	Y+1, r25	; 0x01
    179a:	88 83       	st	Y, r24
    179c:	c2 52       	subi	r28, 0x22	; 34
    179e:	d1 40       	sbci	r29, 0x01	; 1
    17a0:	e3 e8       	ldi	r30, 0x83	; 131
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	cc 5d       	subi	r28, 0xDC	; 220
    17a6:	de 4f       	sbci	r29, 0xFE	; 254
    17a8:	f9 83       	std	Y+1, r31	; 0x01
    17aa:	e8 83       	st	Y, r30
    17ac:	c4 52       	subi	r28, 0x24	; 36
    17ae:	d1 40       	sbci	r29, 0x01	; 1
    17b0:	f3 e0       	ldi	r31, 0x03	; 3
    17b2:	ca 5d       	subi	r28, 0xDA	; 218
    17b4:	de 4f       	sbci	r29, 0xFE	; 254
    17b6:	f8 83       	st	Y, r31
    17b8:	c6 52       	subi	r28, 0x26	; 38
    17ba:	d1 40       	sbci	r29, 0x01	; 1
    17bc:	cc 5d       	subi	r28, 0xDC	; 220
    17be:	de 4f       	sbci	r29, 0xFE	; 254
    17c0:	e8 81       	ld	r30, Y
    17c2:	f9 81       	ldd	r31, Y+1	; 0x01
    17c4:	c4 52       	subi	r28, 0x24	; 36
    17c6:	d1 40       	sbci	r29, 0x01	; 1
    17c8:	00 80       	ld	r0, Z
    17ca:	cc 5d       	subi	r28, 0xDC	; 220
    17cc:	de 4f       	sbci	r29, 0xFE	; 254
    17ce:	28 81       	ld	r18, Y
    17d0:	39 81       	ldd	r19, Y+1	; 0x01
    17d2:	c4 52       	subi	r28, 0x24	; 36
    17d4:	d1 40       	sbci	r29, 0x01	; 1
    17d6:	2f 5f       	subi	r18, 0xFF	; 255
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	cc 5d       	subi	r28, 0xDC	; 220
    17dc:	de 4f       	sbci	r29, 0xFE	; 254
    17de:	39 83       	std	Y+1, r19	; 0x01
    17e0:	28 83       	st	Y, r18
    17e2:	c4 52       	subi	r28, 0x24	; 36
    17e4:	d1 40       	sbci	r29, 0x01	; 1
    17e6:	ce 5d       	subi	r28, 0xDE	; 222
    17e8:	de 4f       	sbci	r29, 0xFE	; 254
    17ea:	e8 81       	ld	r30, Y
    17ec:	f9 81       	ldd	r31, Y+1	; 0x01
    17ee:	c2 52       	subi	r28, 0x22	; 34
    17f0:	d1 40       	sbci	r29, 0x01	; 1
    17f2:	00 82       	st	Z, r0
    17f4:	ce 5d       	subi	r28, 0xDE	; 222
    17f6:	de 4f       	sbci	r29, 0xFE	; 254
    17f8:	28 81       	ld	r18, Y
    17fa:	39 81       	ldd	r19, Y+1	; 0x01
    17fc:	c2 52       	subi	r28, 0x22	; 34
    17fe:	d1 40       	sbci	r29, 0x01	; 1
    1800:	2f 5f       	subi	r18, 0xFF	; 255
    1802:	3f 4f       	sbci	r19, 0xFF	; 255
    1804:	ce 5d       	subi	r28, 0xDE	; 222
    1806:	de 4f       	sbci	r29, 0xFE	; 254
    1808:	39 83       	std	Y+1, r19	; 0x01
    180a:	28 83       	st	Y, r18
    180c:	c2 52       	subi	r28, 0x22	; 34
    180e:	d1 40       	sbci	r29, 0x01	; 1
    1810:	ca 5d       	subi	r28, 0xDA	; 218
    1812:	de 4f       	sbci	r29, 0xFE	; 254
    1814:	38 81       	ld	r19, Y
    1816:	c6 52       	subi	r28, 0x26	; 38
    1818:	d1 40       	sbci	r29, 0x01	; 1
    181a:	31 50       	subi	r19, 0x01	; 1
    181c:	ca 5d       	subi	r28, 0xDA	; 218
    181e:	de 4f       	sbci	r29, 0xFE	; 254
    1820:	38 83       	st	Y, r19
    1822:	c6 52       	subi	r28, 0x26	; 38
    1824:	d1 40       	sbci	r29, 0x01	; 1
    1826:	ca 5d       	subi	r28, 0xDA	; 218
    1828:	de 4f       	sbci	r29, 0xFE	; 254
    182a:	88 81       	ld	r24, Y
    182c:	c6 52       	subi	r28, 0x26	; 38
    182e:	d1 40       	sbci	r29, 0x01	; 1
    1830:	88 23       	and	r24, r24
    1832:	21 f6       	brne	.-120    	; 0x17bc <main+0x2ac>
					s_timerModeButton = {PORTB_ID, PIN7_ID, pullup},
    1834:	ce 01       	movw	r24, r28
    1836:	8a 50       	subi	r24, 0x0A	; 10
    1838:	9f 4f       	sbci	r25, 0xFF	; 255
    183a:	c9 5d       	subi	r28, 0xD9	; 217
    183c:	de 4f       	sbci	r29, 0xFE	; 254
    183e:	99 83       	std	Y+1, r25	; 0x01
    1840:	88 83       	st	Y, r24
    1842:	c7 52       	subi	r28, 0x27	; 39
    1844:	d1 40       	sbci	r29, 0x01	; 1
    1846:	e0 e8       	ldi	r30, 0x80	; 128
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	c7 5d       	subi	r28, 0xD7	; 215
    184c:	de 4f       	sbci	r29, 0xFE	; 254
    184e:	f9 83       	std	Y+1, r31	; 0x01
    1850:	e8 83       	st	Y, r30
    1852:	c9 52       	subi	r28, 0x29	; 41
    1854:	d1 40       	sbci	r29, 0x01	; 1
    1856:	f3 e0       	ldi	r31, 0x03	; 3
    1858:	c5 5d       	subi	r28, 0xD5	; 213
    185a:	de 4f       	sbci	r29, 0xFE	; 254
    185c:	f8 83       	st	Y, r31
    185e:	cb 52       	subi	r28, 0x2B	; 43
    1860:	d1 40       	sbci	r29, 0x01	; 1
    1862:	c7 5d       	subi	r28, 0xD7	; 215
    1864:	de 4f       	sbci	r29, 0xFE	; 254
    1866:	e8 81       	ld	r30, Y
    1868:	f9 81       	ldd	r31, Y+1	; 0x01
    186a:	c9 52       	subi	r28, 0x29	; 41
    186c:	d1 40       	sbci	r29, 0x01	; 1
    186e:	00 80       	ld	r0, Z
    1870:	c7 5d       	subi	r28, 0xD7	; 215
    1872:	de 4f       	sbci	r29, 0xFE	; 254
    1874:	28 81       	ld	r18, Y
    1876:	39 81       	ldd	r19, Y+1	; 0x01
    1878:	c9 52       	subi	r28, 0x29	; 41
    187a:	d1 40       	sbci	r29, 0x01	; 1
    187c:	2f 5f       	subi	r18, 0xFF	; 255
    187e:	3f 4f       	sbci	r19, 0xFF	; 255
    1880:	c7 5d       	subi	r28, 0xD7	; 215
    1882:	de 4f       	sbci	r29, 0xFE	; 254
    1884:	39 83       	std	Y+1, r19	; 0x01
    1886:	28 83       	st	Y, r18
    1888:	c9 52       	subi	r28, 0x29	; 41
    188a:	d1 40       	sbci	r29, 0x01	; 1
    188c:	c9 5d       	subi	r28, 0xD9	; 217
    188e:	de 4f       	sbci	r29, 0xFE	; 254
    1890:	e8 81       	ld	r30, Y
    1892:	f9 81       	ldd	r31, Y+1	; 0x01
    1894:	c7 52       	subi	r28, 0x27	; 39
    1896:	d1 40       	sbci	r29, 0x01	; 1
    1898:	00 82       	st	Z, r0
    189a:	c9 5d       	subi	r28, 0xD9	; 217
    189c:	de 4f       	sbci	r29, 0xFE	; 254
    189e:	28 81       	ld	r18, Y
    18a0:	39 81       	ldd	r19, Y+1	; 0x01
    18a2:	c7 52       	subi	r28, 0x27	; 39
    18a4:	d1 40       	sbci	r29, 0x01	; 1
    18a6:	2f 5f       	subi	r18, 0xFF	; 255
    18a8:	3f 4f       	sbci	r19, 0xFF	; 255
    18aa:	c9 5d       	subi	r28, 0xD9	; 217
    18ac:	de 4f       	sbci	r29, 0xFE	; 254
    18ae:	39 83       	std	Y+1, r19	; 0x01
    18b0:	28 83       	st	Y, r18
    18b2:	c7 52       	subi	r28, 0x27	; 39
    18b4:	d1 40       	sbci	r29, 0x01	; 1
    18b6:	c5 5d       	subi	r28, 0xD5	; 213
    18b8:	de 4f       	sbci	r29, 0xFE	; 254
    18ba:	38 81       	ld	r19, Y
    18bc:	cb 52       	subi	r28, 0x2B	; 43
    18be:	d1 40       	sbci	r29, 0x01	; 1
    18c0:	31 50       	subi	r19, 0x01	; 1
    18c2:	c5 5d       	subi	r28, 0xD5	; 213
    18c4:	de 4f       	sbci	r29, 0xFE	; 254
    18c6:	38 83       	st	Y, r19
    18c8:	cb 52       	subi	r28, 0x2B	; 43
    18ca:	d1 40       	sbci	r29, 0x01	; 1
    18cc:	c5 5d       	subi	r28, 0xD5	; 213
    18ce:	de 4f       	sbci	r29, 0xFE	; 254
    18d0:	88 81       	ld	r24, Y
    18d2:	cb 52       	subi	r28, 0x2B	; 43
    18d4:	d1 40       	sbci	r29, 0x01	; 1
    18d6:	88 23       	and	r24, r24
    18d8:	21 f6       	brne	.-120    	; 0x1862 <main+0x352>
					s_hoursIncrement = {PORTB_ID, PIN1_ID, pullup},
    18da:	ce 01       	movw	r24, r28
    18dc:	87 50       	subi	r24, 0x07	; 7
    18de:	9f 4f       	sbci	r25, 0xFF	; 255
    18e0:	c4 5d       	subi	r28, 0xD4	; 212
    18e2:	de 4f       	sbci	r29, 0xFE	; 254
    18e4:	99 83       	std	Y+1, r25	; 0x01
    18e6:	88 83       	st	Y, r24
    18e8:	cc 52       	subi	r28, 0x2C	; 44
    18ea:	d1 40       	sbci	r29, 0x01	; 1
    18ec:	ed e7       	ldi	r30, 0x7D	; 125
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	c2 5d       	subi	r28, 0xD2	; 210
    18f2:	de 4f       	sbci	r29, 0xFE	; 254
    18f4:	f9 83       	std	Y+1, r31	; 0x01
    18f6:	e8 83       	st	Y, r30
    18f8:	ce 52       	subi	r28, 0x2E	; 46
    18fa:	d1 40       	sbci	r29, 0x01	; 1
    18fc:	f3 e0       	ldi	r31, 0x03	; 3
    18fe:	c0 5d       	subi	r28, 0xD0	; 208
    1900:	de 4f       	sbci	r29, 0xFE	; 254
    1902:	f8 83       	st	Y, r31
    1904:	c0 53       	subi	r28, 0x30	; 48
    1906:	d1 40       	sbci	r29, 0x01	; 1
    1908:	c2 5d       	subi	r28, 0xD2	; 210
    190a:	de 4f       	sbci	r29, 0xFE	; 254
    190c:	e8 81       	ld	r30, Y
    190e:	f9 81       	ldd	r31, Y+1	; 0x01
    1910:	ce 52       	subi	r28, 0x2E	; 46
    1912:	d1 40       	sbci	r29, 0x01	; 1
    1914:	00 80       	ld	r0, Z
    1916:	c2 5d       	subi	r28, 0xD2	; 210
    1918:	de 4f       	sbci	r29, 0xFE	; 254
    191a:	28 81       	ld	r18, Y
    191c:	39 81       	ldd	r19, Y+1	; 0x01
    191e:	ce 52       	subi	r28, 0x2E	; 46
    1920:	d1 40       	sbci	r29, 0x01	; 1
    1922:	2f 5f       	subi	r18, 0xFF	; 255
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	c2 5d       	subi	r28, 0xD2	; 210
    1928:	de 4f       	sbci	r29, 0xFE	; 254
    192a:	39 83       	std	Y+1, r19	; 0x01
    192c:	28 83       	st	Y, r18
    192e:	ce 52       	subi	r28, 0x2E	; 46
    1930:	d1 40       	sbci	r29, 0x01	; 1
    1932:	c4 5d       	subi	r28, 0xD4	; 212
    1934:	de 4f       	sbci	r29, 0xFE	; 254
    1936:	e8 81       	ld	r30, Y
    1938:	f9 81       	ldd	r31, Y+1	; 0x01
    193a:	cc 52       	subi	r28, 0x2C	; 44
    193c:	d1 40       	sbci	r29, 0x01	; 1
    193e:	00 82       	st	Z, r0
    1940:	c4 5d       	subi	r28, 0xD4	; 212
    1942:	de 4f       	sbci	r29, 0xFE	; 254
    1944:	28 81       	ld	r18, Y
    1946:	39 81       	ldd	r19, Y+1	; 0x01
    1948:	cc 52       	subi	r28, 0x2C	; 44
    194a:	d1 40       	sbci	r29, 0x01	; 1
    194c:	2f 5f       	subi	r18, 0xFF	; 255
    194e:	3f 4f       	sbci	r19, 0xFF	; 255
    1950:	c4 5d       	subi	r28, 0xD4	; 212
    1952:	de 4f       	sbci	r29, 0xFE	; 254
    1954:	39 83       	std	Y+1, r19	; 0x01
    1956:	28 83       	st	Y, r18
    1958:	cc 52       	subi	r28, 0x2C	; 44
    195a:	d1 40       	sbci	r29, 0x01	; 1
    195c:	c0 5d       	subi	r28, 0xD0	; 208
    195e:	de 4f       	sbci	r29, 0xFE	; 254
    1960:	38 81       	ld	r19, Y
    1962:	c0 53       	subi	r28, 0x30	; 48
    1964:	d1 40       	sbci	r29, 0x01	; 1
    1966:	31 50       	subi	r19, 0x01	; 1
    1968:	c0 5d       	subi	r28, 0xD0	; 208
    196a:	de 4f       	sbci	r29, 0xFE	; 254
    196c:	38 83       	st	Y, r19
    196e:	c0 53       	subi	r28, 0x30	; 48
    1970:	d1 40       	sbci	r29, 0x01	; 1
    1972:	c0 5d       	subi	r28, 0xD0	; 208
    1974:	de 4f       	sbci	r29, 0xFE	; 254
    1976:	88 81       	ld	r24, Y
    1978:	c0 53       	subi	r28, 0x30	; 48
    197a:	d1 40       	sbci	r29, 0x01	; 1
    197c:	88 23       	and	r24, r24
    197e:	21 f6       	brne	.-120    	; 0x1908 <main+0x3f8>
					s_hoursDecrement = {PORTB_ID, PIN0_ID, pullup},
    1980:	ce 01       	movw	r24, r28
    1982:	84 50       	subi	r24, 0x04	; 4
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	cf 5c       	subi	r28, 0xCF	; 207
    1988:	de 4f       	sbci	r29, 0xFE	; 254
    198a:	99 83       	std	Y+1, r25	; 0x01
    198c:	88 83       	st	Y, r24
    198e:	c1 53       	subi	r28, 0x31	; 49
    1990:	d1 40       	sbci	r29, 0x01	; 1
    1992:	ea e7       	ldi	r30, 0x7A	; 122
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	cd 5c       	subi	r28, 0xCD	; 205
    1998:	de 4f       	sbci	r29, 0xFE	; 254
    199a:	f9 83       	std	Y+1, r31	; 0x01
    199c:	e8 83       	st	Y, r30
    199e:	c3 53       	subi	r28, 0x33	; 51
    19a0:	d1 40       	sbci	r29, 0x01	; 1
    19a2:	f3 e0       	ldi	r31, 0x03	; 3
    19a4:	cb 5c       	subi	r28, 0xCB	; 203
    19a6:	de 4f       	sbci	r29, 0xFE	; 254
    19a8:	f8 83       	st	Y, r31
    19aa:	c5 53       	subi	r28, 0x35	; 53
    19ac:	d1 40       	sbci	r29, 0x01	; 1
    19ae:	cd 5c       	subi	r28, 0xCD	; 205
    19b0:	de 4f       	sbci	r29, 0xFE	; 254
    19b2:	e8 81       	ld	r30, Y
    19b4:	f9 81       	ldd	r31, Y+1	; 0x01
    19b6:	c3 53       	subi	r28, 0x33	; 51
    19b8:	d1 40       	sbci	r29, 0x01	; 1
    19ba:	00 80       	ld	r0, Z
    19bc:	cd 5c       	subi	r28, 0xCD	; 205
    19be:	de 4f       	sbci	r29, 0xFE	; 254
    19c0:	28 81       	ld	r18, Y
    19c2:	39 81       	ldd	r19, Y+1	; 0x01
    19c4:	c3 53       	subi	r28, 0x33	; 51
    19c6:	d1 40       	sbci	r29, 0x01	; 1
    19c8:	2f 5f       	subi	r18, 0xFF	; 255
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	cd 5c       	subi	r28, 0xCD	; 205
    19ce:	de 4f       	sbci	r29, 0xFE	; 254
    19d0:	39 83       	std	Y+1, r19	; 0x01
    19d2:	28 83       	st	Y, r18
    19d4:	c3 53       	subi	r28, 0x33	; 51
    19d6:	d1 40       	sbci	r29, 0x01	; 1
    19d8:	cf 5c       	subi	r28, 0xCF	; 207
    19da:	de 4f       	sbci	r29, 0xFE	; 254
    19dc:	e8 81       	ld	r30, Y
    19de:	f9 81       	ldd	r31, Y+1	; 0x01
    19e0:	c1 53       	subi	r28, 0x31	; 49
    19e2:	d1 40       	sbci	r29, 0x01	; 1
    19e4:	00 82       	st	Z, r0
    19e6:	cf 5c       	subi	r28, 0xCF	; 207
    19e8:	de 4f       	sbci	r29, 0xFE	; 254
    19ea:	28 81       	ld	r18, Y
    19ec:	39 81       	ldd	r19, Y+1	; 0x01
    19ee:	c1 53       	subi	r28, 0x31	; 49
    19f0:	d1 40       	sbci	r29, 0x01	; 1
    19f2:	2f 5f       	subi	r18, 0xFF	; 255
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	cf 5c       	subi	r28, 0xCF	; 207
    19f8:	de 4f       	sbci	r29, 0xFE	; 254
    19fa:	39 83       	std	Y+1, r19	; 0x01
    19fc:	28 83       	st	Y, r18
    19fe:	c1 53       	subi	r28, 0x31	; 49
    1a00:	d1 40       	sbci	r29, 0x01	; 1
    1a02:	cb 5c       	subi	r28, 0xCB	; 203
    1a04:	de 4f       	sbci	r29, 0xFE	; 254
    1a06:	38 81       	ld	r19, Y
    1a08:	c5 53       	subi	r28, 0x35	; 53
    1a0a:	d1 40       	sbci	r29, 0x01	; 1
    1a0c:	31 50       	subi	r19, 0x01	; 1
    1a0e:	cb 5c       	subi	r28, 0xCB	; 203
    1a10:	de 4f       	sbci	r29, 0xFE	; 254
    1a12:	38 83       	st	Y, r19
    1a14:	c5 53       	subi	r28, 0x35	; 53
    1a16:	d1 40       	sbci	r29, 0x01	; 1
    1a18:	cb 5c       	subi	r28, 0xCB	; 203
    1a1a:	de 4f       	sbci	r29, 0xFE	; 254
    1a1c:	88 81       	ld	r24, Y
    1a1e:	c5 53       	subi	r28, 0x35	; 53
    1a20:	d1 40       	sbci	r29, 0x01	; 1
    1a22:	88 23       	and	r24, r24
    1a24:	21 f6       	brne	.-120    	; 0x19ae <main+0x49e>
					s_minutesIncrement = {PORTB_ID, PIN4_ID, pullup},
    1a26:	ce 01       	movw	r24, r28
    1a28:	81 50       	subi	r24, 0x01	; 1
    1a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2c:	ca 5c       	subi	r28, 0xCA	; 202
    1a2e:	de 4f       	sbci	r29, 0xFE	; 254
    1a30:	99 83       	std	Y+1, r25	; 0x01
    1a32:	88 83       	st	Y, r24
    1a34:	c6 53       	subi	r28, 0x36	; 54
    1a36:	d1 40       	sbci	r29, 0x01	; 1
    1a38:	e7 e7       	ldi	r30, 0x77	; 119
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	c8 5c       	subi	r28, 0xC8	; 200
    1a3e:	de 4f       	sbci	r29, 0xFE	; 254
    1a40:	f9 83       	std	Y+1, r31	; 0x01
    1a42:	e8 83       	st	Y, r30
    1a44:	c8 53       	subi	r28, 0x38	; 56
    1a46:	d1 40       	sbci	r29, 0x01	; 1
    1a48:	f3 e0       	ldi	r31, 0x03	; 3
    1a4a:	c6 5c       	subi	r28, 0xC6	; 198
    1a4c:	de 4f       	sbci	r29, 0xFE	; 254
    1a4e:	f8 83       	st	Y, r31
    1a50:	ca 53       	subi	r28, 0x3A	; 58
    1a52:	d1 40       	sbci	r29, 0x01	; 1
    1a54:	c8 5c       	subi	r28, 0xC8	; 200
    1a56:	de 4f       	sbci	r29, 0xFE	; 254
    1a58:	e8 81       	ld	r30, Y
    1a5a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a5c:	c8 53       	subi	r28, 0x38	; 56
    1a5e:	d1 40       	sbci	r29, 0x01	; 1
    1a60:	00 80       	ld	r0, Z
    1a62:	c8 5c       	subi	r28, 0xC8	; 200
    1a64:	de 4f       	sbci	r29, 0xFE	; 254
    1a66:	28 81       	ld	r18, Y
    1a68:	39 81       	ldd	r19, Y+1	; 0x01
    1a6a:	c8 53       	subi	r28, 0x38	; 56
    1a6c:	d1 40       	sbci	r29, 0x01	; 1
    1a6e:	2f 5f       	subi	r18, 0xFF	; 255
    1a70:	3f 4f       	sbci	r19, 0xFF	; 255
    1a72:	c8 5c       	subi	r28, 0xC8	; 200
    1a74:	de 4f       	sbci	r29, 0xFE	; 254
    1a76:	39 83       	std	Y+1, r19	; 0x01
    1a78:	28 83       	st	Y, r18
    1a7a:	c8 53       	subi	r28, 0x38	; 56
    1a7c:	d1 40       	sbci	r29, 0x01	; 1
    1a7e:	ca 5c       	subi	r28, 0xCA	; 202
    1a80:	de 4f       	sbci	r29, 0xFE	; 254
    1a82:	e8 81       	ld	r30, Y
    1a84:	f9 81       	ldd	r31, Y+1	; 0x01
    1a86:	c6 53       	subi	r28, 0x36	; 54
    1a88:	d1 40       	sbci	r29, 0x01	; 1
    1a8a:	00 82       	st	Z, r0
    1a8c:	ca 5c       	subi	r28, 0xCA	; 202
    1a8e:	de 4f       	sbci	r29, 0xFE	; 254
    1a90:	28 81       	ld	r18, Y
    1a92:	39 81       	ldd	r19, Y+1	; 0x01
    1a94:	c6 53       	subi	r28, 0x36	; 54
    1a96:	d1 40       	sbci	r29, 0x01	; 1
    1a98:	2f 5f       	subi	r18, 0xFF	; 255
    1a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9c:	ca 5c       	subi	r28, 0xCA	; 202
    1a9e:	de 4f       	sbci	r29, 0xFE	; 254
    1aa0:	39 83       	std	Y+1, r19	; 0x01
    1aa2:	28 83       	st	Y, r18
    1aa4:	c6 53       	subi	r28, 0x36	; 54
    1aa6:	d1 40       	sbci	r29, 0x01	; 1
    1aa8:	c6 5c       	subi	r28, 0xC6	; 198
    1aaa:	de 4f       	sbci	r29, 0xFE	; 254
    1aac:	38 81       	ld	r19, Y
    1aae:	ca 53       	subi	r28, 0x3A	; 58
    1ab0:	d1 40       	sbci	r29, 0x01	; 1
    1ab2:	31 50       	subi	r19, 0x01	; 1
    1ab4:	c6 5c       	subi	r28, 0xC6	; 198
    1ab6:	de 4f       	sbci	r29, 0xFE	; 254
    1ab8:	38 83       	st	Y, r19
    1aba:	ca 53       	subi	r28, 0x3A	; 58
    1abc:	d1 40       	sbci	r29, 0x01	; 1
    1abe:	c6 5c       	subi	r28, 0xC6	; 198
    1ac0:	de 4f       	sbci	r29, 0xFE	; 254
    1ac2:	88 81       	ld	r24, Y
    1ac4:	ca 53       	subi	r28, 0x3A	; 58
    1ac6:	d1 40       	sbci	r29, 0x01	; 1
    1ac8:	88 23       	and	r24, r24
    1aca:	21 f6       	brne	.-120    	; 0x1a54 <main+0x544>
					s_minutesDecrement = {PORTB_ID, PIN3_ID, pullup},
    1acc:	ce 01       	movw	r24, r28
    1ace:	8e 5f       	subi	r24, 0xFE	; 254
    1ad0:	9e 4f       	sbci	r25, 0xFE	; 254
    1ad2:	c5 5c       	subi	r28, 0xC5	; 197
    1ad4:	de 4f       	sbci	r29, 0xFE	; 254
    1ad6:	99 83       	std	Y+1, r25	; 0x01
    1ad8:	88 83       	st	Y, r24
    1ada:	cb 53       	subi	r28, 0x3B	; 59
    1adc:	d1 40       	sbci	r29, 0x01	; 1
    1ade:	e4 e7       	ldi	r30, 0x74	; 116
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	c3 5c       	subi	r28, 0xC3	; 195
    1ae4:	de 4f       	sbci	r29, 0xFE	; 254
    1ae6:	f9 83       	std	Y+1, r31	; 0x01
    1ae8:	e8 83       	st	Y, r30
    1aea:	cd 53       	subi	r28, 0x3D	; 61
    1aec:	d1 40       	sbci	r29, 0x01	; 1
    1aee:	f3 e0       	ldi	r31, 0x03	; 3
    1af0:	c1 5c       	subi	r28, 0xC1	; 193
    1af2:	de 4f       	sbci	r29, 0xFE	; 254
    1af4:	f8 83       	st	Y, r31
    1af6:	cf 53       	subi	r28, 0x3F	; 63
    1af8:	d1 40       	sbci	r29, 0x01	; 1
    1afa:	c3 5c       	subi	r28, 0xC3	; 195
    1afc:	de 4f       	sbci	r29, 0xFE	; 254
    1afe:	e8 81       	ld	r30, Y
    1b00:	f9 81       	ldd	r31, Y+1	; 0x01
    1b02:	cd 53       	subi	r28, 0x3D	; 61
    1b04:	d1 40       	sbci	r29, 0x01	; 1
    1b06:	00 80       	ld	r0, Z
    1b08:	c3 5c       	subi	r28, 0xC3	; 195
    1b0a:	de 4f       	sbci	r29, 0xFE	; 254
    1b0c:	28 81       	ld	r18, Y
    1b0e:	39 81       	ldd	r19, Y+1	; 0x01
    1b10:	cd 53       	subi	r28, 0x3D	; 61
    1b12:	d1 40       	sbci	r29, 0x01	; 1
    1b14:	2f 5f       	subi	r18, 0xFF	; 255
    1b16:	3f 4f       	sbci	r19, 0xFF	; 255
    1b18:	c3 5c       	subi	r28, 0xC3	; 195
    1b1a:	de 4f       	sbci	r29, 0xFE	; 254
    1b1c:	39 83       	std	Y+1, r19	; 0x01
    1b1e:	28 83       	st	Y, r18
    1b20:	cd 53       	subi	r28, 0x3D	; 61
    1b22:	d1 40       	sbci	r29, 0x01	; 1
    1b24:	c5 5c       	subi	r28, 0xC5	; 197
    1b26:	de 4f       	sbci	r29, 0xFE	; 254
    1b28:	e8 81       	ld	r30, Y
    1b2a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b2c:	cb 53       	subi	r28, 0x3B	; 59
    1b2e:	d1 40       	sbci	r29, 0x01	; 1
    1b30:	00 82       	st	Z, r0
    1b32:	c5 5c       	subi	r28, 0xC5	; 197
    1b34:	de 4f       	sbci	r29, 0xFE	; 254
    1b36:	28 81       	ld	r18, Y
    1b38:	39 81       	ldd	r19, Y+1	; 0x01
    1b3a:	cb 53       	subi	r28, 0x3B	; 59
    1b3c:	d1 40       	sbci	r29, 0x01	; 1
    1b3e:	2f 5f       	subi	r18, 0xFF	; 255
    1b40:	3f 4f       	sbci	r19, 0xFF	; 255
    1b42:	c5 5c       	subi	r28, 0xC5	; 197
    1b44:	de 4f       	sbci	r29, 0xFE	; 254
    1b46:	39 83       	std	Y+1, r19	; 0x01
    1b48:	28 83       	st	Y, r18
    1b4a:	cb 53       	subi	r28, 0x3B	; 59
    1b4c:	d1 40       	sbci	r29, 0x01	; 1
    1b4e:	c1 5c       	subi	r28, 0xC1	; 193
    1b50:	de 4f       	sbci	r29, 0xFE	; 254
    1b52:	38 81       	ld	r19, Y
    1b54:	cf 53       	subi	r28, 0x3F	; 63
    1b56:	d1 40       	sbci	r29, 0x01	; 1
    1b58:	31 50       	subi	r19, 0x01	; 1
    1b5a:	c1 5c       	subi	r28, 0xC1	; 193
    1b5c:	de 4f       	sbci	r29, 0xFE	; 254
    1b5e:	38 83       	st	Y, r19
    1b60:	cf 53       	subi	r28, 0x3F	; 63
    1b62:	d1 40       	sbci	r29, 0x01	; 1
    1b64:	c1 5c       	subi	r28, 0xC1	; 193
    1b66:	de 4f       	sbci	r29, 0xFE	; 254
    1b68:	88 81       	ld	r24, Y
    1b6a:	cf 53       	subi	r28, 0x3F	; 63
    1b6c:	d1 40       	sbci	r29, 0x01	; 1
    1b6e:	88 23       	and	r24, r24
    1b70:	21 f6       	brne	.-120    	; 0x1afa <main+0x5ea>
					s_secondsIncrement = {PORTB_ID, PIN6_ID, pullup},
    1b72:	ce 01       	movw	r24, r28
    1b74:	8b 5f       	subi	r24, 0xFB	; 251
    1b76:	9e 4f       	sbci	r25, 0xFE	; 254
    1b78:	c0 5c       	subi	r28, 0xC0	; 192
    1b7a:	de 4f       	sbci	r29, 0xFE	; 254
    1b7c:	99 83       	std	Y+1, r25	; 0x01
    1b7e:	88 83       	st	Y, r24
    1b80:	c0 54       	subi	r28, 0x40	; 64
    1b82:	d1 40       	sbci	r29, 0x01	; 1
    1b84:	e1 e7       	ldi	r30, 0x71	; 113
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	ce 5b       	subi	r28, 0xBE	; 190
    1b8a:	de 4f       	sbci	r29, 0xFE	; 254
    1b8c:	f9 83       	std	Y+1, r31	; 0x01
    1b8e:	e8 83       	st	Y, r30
    1b90:	c2 54       	subi	r28, 0x42	; 66
    1b92:	d1 40       	sbci	r29, 0x01	; 1
    1b94:	f3 e0       	ldi	r31, 0x03	; 3
    1b96:	cc 5b       	subi	r28, 0xBC	; 188
    1b98:	de 4f       	sbci	r29, 0xFE	; 254
    1b9a:	f8 83       	st	Y, r31
    1b9c:	c4 54       	subi	r28, 0x44	; 68
    1b9e:	d1 40       	sbci	r29, 0x01	; 1
    1ba0:	ce 5b       	subi	r28, 0xBE	; 190
    1ba2:	de 4f       	sbci	r29, 0xFE	; 254
    1ba4:	e8 81       	ld	r30, Y
    1ba6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ba8:	c2 54       	subi	r28, 0x42	; 66
    1baa:	d1 40       	sbci	r29, 0x01	; 1
    1bac:	00 80       	ld	r0, Z
    1bae:	ce 5b       	subi	r28, 0xBE	; 190
    1bb0:	de 4f       	sbci	r29, 0xFE	; 254
    1bb2:	28 81       	ld	r18, Y
    1bb4:	39 81       	ldd	r19, Y+1	; 0x01
    1bb6:	c2 54       	subi	r28, 0x42	; 66
    1bb8:	d1 40       	sbci	r29, 0x01	; 1
    1bba:	2f 5f       	subi	r18, 0xFF	; 255
    1bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bbe:	ce 5b       	subi	r28, 0xBE	; 190
    1bc0:	de 4f       	sbci	r29, 0xFE	; 254
    1bc2:	39 83       	std	Y+1, r19	; 0x01
    1bc4:	28 83       	st	Y, r18
    1bc6:	c2 54       	subi	r28, 0x42	; 66
    1bc8:	d1 40       	sbci	r29, 0x01	; 1
    1bca:	c0 5c       	subi	r28, 0xC0	; 192
    1bcc:	de 4f       	sbci	r29, 0xFE	; 254
    1bce:	e8 81       	ld	r30, Y
    1bd0:	f9 81       	ldd	r31, Y+1	; 0x01
    1bd2:	c0 54       	subi	r28, 0x40	; 64
    1bd4:	d1 40       	sbci	r29, 0x01	; 1
    1bd6:	00 82       	st	Z, r0
    1bd8:	c0 5c       	subi	r28, 0xC0	; 192
    1bda:	de 4f       	sbci	r29, 0xFE	; 254
    1bdc:	28 81       	ld	r18, Y
    1bde:	39 81       	ldd	r19, Y+1	; 0x01
    1be0:	c0 54       	subi	r28, 0x40	; 64
    1be2:	d1 40       	sbci	r29, 0x01	; 1
    1be4:	2f 5f       	subi	r18, 0xFF	; 255
    1be6:	3f 4f       	sbci	r19, 0xFF	; 255
    1be8:	c0 5c       	subi	r28, 0xC0	; 192
    1bea:	de 4f       	sbci	r29, 0xFE	; 254
    1bec:	39 83       	std	Y+1, r19	; 0x01
    1bee:	28 83       	st	Y, r18
    1bf0:	c0 54       	subi	r28, 0x40	; 64
    1bf2:	d1 40       	sbci	r29, 0x01	; 1
    1bf4:	cc 5b       	subi	r28, 0xBC	; 188
    1bf6:	de 4f       	sbci	r29, 0xFE	; 254
    1bf8:	38 81       	ld	r19, Y
    1bfa:	c4 54       	subi	r28, 0x44	; 68
    1bfc:	d1 40       	sbci	r29, 0x01	; 1
    1bfe:	31 50       	subi	r19, 0x01	; 1
    1c00:	cc 5b       	subi	r28, 0xBC	; 188
    1c02:	de 4f       	sbci	r29, 0xFE	; 254
    1c04:	38 83       	st	Y, r19
    1c06:	c4 54       	subi	r28, 0x44	; 68
    1c08:	d1 40       	sbci	r29, 0x01	; 1
    1c0a:	cc 5b       	subi	r28, 0xBC	; 188
    1c0c:	de 4f       	sbci	r29, 0xFE	; 254
    1c0e:	88 81       	ld	r24, Y
    1c10:	c4 54       	subi	r28, 0x44	; 68
    1c12:	d1 40       	sbci	r29, 0x01	; 1
    1c14:	88 23       	and	r24, r24
    1c16:	21 f6       	brne	.-120    	; 0x1ba0 <main+0x690>
					s_secondsDecrement = {PORTB_ID, PIN5_ID, pullup};
    1c18:	ce 01       	movw	r24, r28
    1c1a:	88 5f       	subi	r24, 0xF8	; 248
    1c1c:	9e 4f       	sbci	r25, 0xFE	; 254
    1c1e:	cb 5b       	subi	r28, 0xBB	; 187
    1c20:	de 4f       	sbci	r29, 0xFE	; 254
    1c22:	99 83       	std	Y+1, r25	; 0x01
    1c24:	88 83       	st	Y, r24
    1c26:	c5 54       	subi	r28, 0x45	; 69
    1c28:	d1 40       	sbci	r29, 0x01	; 1
    1c2a:	ee e6       	ldi	r30, 0x6E	; 110
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	c9 5b       	subi	r28, 0xB9	; 185
    1c30:	de 4f       	sbci	r29, 0xFE	; 254
    1c32:	f9 83       	std	Y+1, r31	; 0x01
    1c34:	e8 83       	st	Y, r30
    1c36:	c7 54       	subi	r28, 0x47	; 71
    1c38:	d1 40       	sbci	r29, 0x01	; 1
    1c3a:	f3 e0       	ldi	r31, 0x03	; 3
    1c3c:	c7 5b       	subi	r28, 0xB7	; 183
    1c3e:	de 4f       	sbci	r29, 0xFE	; 254
    1c40:	f8 83       	st	Y, r31
    1c42:	c9 54       	subi	r28, 0x49	; 73
    1c44:	d1 40       	sbci	r29, 0x01	; 1
    1c46:	c9 5b       	subi	r28, 0xB9	; 185
    1c48:	de 4f       	sbci	r29, 0xFE	; 254
    1c4a:	e8 81       	ld	r30, Y
    1c4c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c4e:	c7 54       	subi	r28, 0x47	; 71
    1c50:	d1 40       	sbci	r29, 0x01	; 1
    1c52:	00 80       	ld	r0, Z
    1c54:	c9 5b       	subi	r28, 0xB9	; 185
    1c56:	de 4f       	sbci	r29, 0xFE	; 254
    1c58:	28 81       	ld	r18, Y
    1c5a:	39 81       	ldd	r19, Y+1	; 0x01
    1c5c:	c7 54       	subi	r28, 0x47	; 71
    1c5e:	d1 40       	sbci	r29, 0x01	; 1
    1c60:	2f 5f       	subi	r18, 0xFF	; 255
    1c62:	3f 4f       	sbci	r19, 0xFF	; 255
    1c64:	c9 5b       	subi	r28, 0xB9	; 185
    1c66:	de 4f       	sbci	r29, 0xFE	; 254
    1c68:	39 83       	std	Y+1, r19	; 0x01
    1c6a:	28 83       	st	Y, r18
    1c6c:	c7 54       	subi	r28, 0x47	; 71
    1c6e:	d1 40       	sbci	r29, 0x01	; 1
    1c70:	cb 5b       	subi	r28, 0xBB	; 187
    1c72:	de 4f       	sbci	r29, 0xFE	; 254
    1c74:	e8 81       	ld	r30, Y
    1c76:	f9 81       	ldd	r31, Y+1	; 0x01
    1c78:	c5 54       	subi	r28, 0x45	; 69
    1c7a:	d1 40       	sbci	r29, 0x01	; 1
    1c7c:	00 82       	st	Z, r0
    1c7e:	cb 5b       	subi	r28, 0xBB	; 187
    1c80:	de 4f       	sbci	r29, 0xFE	; 254
    1c82:	28 81       	ld	r18, Y
    1c84:	39 81       	ldd	r19, Y+1	; 0x01
    1c86:	c5 54       	subi	r28, 0x45	; 69
    1c88:	d1 40       	sbci	r29, 0x01	; 1
    1c8a:	2f 5f       	subi	r18, 0xFF	; 255
    1c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8e:	cb 5b       	subi	r28, 0xBB	; 187
    1c90:	de 4f       	sbci	r29, 0xFE	; 254
    1c92:	39 83       	std	Y+1, r19	; 0x01
    1c94:	28 83       	st	Y, r18
    1c96:	c5 54       	subi	r28, 0x45	; 69
    1c98:	d1 40       	sbci	r29, 0x01	; 1
    1c9a:	c7 5b       	subi	r28, 0xB7	; 183
    1c9c:	de 4f       	sbci	r29, 0xFE	; 254
    1c9e:	38 81       	ld	r19, Y
    1ca0:	c9 54       	subi	r28, 0x49	; 73
    1ca2:	d1 40       	sbci	r29, 0x01	; 1
    1ca4:	31 50       	subi	r19, 0x01	; 1
    1ca6:	c7 5b       	subi	r28, 0xB7	; 183
    1ca8:	de 4f       	sbci	r29, 0xFE	; 254
    1caa:	38 83       	st	Y, r19
    1cac:	c9 54       	subi	r28, 0x49	; 73
    1cae:	d1 40       	sbci	r29, 0x01	; 1
    1cb0:	c7 5b       	subi	r28, 0xB7	; 183
    1cb2:	de 4f       	sbci	r29, 0xFE	; 254
    1cb4:	88 81       	ld	r24, Y
    1cb6:	c9 54       	subi	r28, 0x49	; 73
    1cb8:	d1 40       	sbci	r29, 0x01	; 1
    1cba:	88 23       	and	r24, r24
    1cbc:	21 f6       	brne	.-120    	; 0x1c46 <main+0x736>
	buttons_pressed_flags.flags_size=0; /* set all button flags to zero */
    1cbe:	10 92 9b 00 	sts	0x009B, r1
    1cc2:	10 92 9a 00 	sts	0x009A, r1

	LED_config	s_ledCountUpMode = {PORTD_ID, PIN4_ID, positive_logic},
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	85 5f       	subi	r24, 0xF5	; 245
    1cca:	9e 4f       	sbci	r25, 0xFE	; 254
    1ccc:	c6 5b       	subi	r28, 0xB6	; 182
    1cce:	de 4f       	sbci	r29, 0xFE	; 254
    1cd0:	99 83       	std	Y+1, r25	; 0x01
    1cd2:	88 83       	st	Y, r24
    1cd4:	ca 54       	subi	r28, 0x4A	; 74
    1cd6:	d1 40       	sbci	r29, 0x01	; 1
    1cd8:	eb e6       	ldi	r30, 0x6B	; 107
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	c4 5b       	subi	r28, 0xB4	; 180
    1cde:	de 4f       	sbci	r29, 0xFE	; 254
    1ce0:	f9 83       	std	Y+1, r31	; 0x01
    1ce2:	e8 83       	st	Y, r30
    1ce4:	cc 54       	subi	r28, 0x4C	; 76
    1ce6:	d1 40       	sbci	r29, 0x01	; 1
    1ce8:	f3 e0       	ldi	r31, 0x03	; 3
    1cea:	c2 5b       	subi	r28, 0xB2	; 178
    1cec:	de 4f       	sbci	r29, 0xFE	; 254
    1cee:	f8 83       	st	Y, r31
    1cf0:	ce 54       	subi	r28, 0x4E	; 78
    1cf2:	d1 40       	sbci	r29, 0x01	; 1
    1cf4:	c4 5b       	subi	r28, 0xB4	; 180
    1cf6:	de 4f       	sbci	r29, 0xFE	; 254
    1cf8:	e8 81       	ld	r30, Y
    1cfa:	f9 81       	ldd	r31, Y+1	; 0x01
    1cfc:	cc 54       	subi	r28, 0x4C	; 76
    1cfe:	d1 40       	sbci	r29, 0x01	; 1
    1d00:	00 80       	ld	r0, Z
    1d02:	c4 5b       	subi	r28, 0xB4	; 180
    1d04:	de 4f       	sbci	r29, 0xFE	; 254
    1d06:	28 81       	ld	r18, Y
    1d08:	39 81       	ldd	r19, Y+1	; 0x01
    1d0a:	cc 54       	subi	r28, 0x4C	; 76
    1d0c:	d1 40       	sbci	r29, 0x01	; 1
    1d0e:	2f 5f       	subi	r18, 0xFF	; 255
    1d10:	3f 4f       	sbci	r19, 0xFF	; 255
    1d12:	c4 5b       	subi	r28, 0xB4	; 180
    1d14:	de 4f       	sbci	r29, 0xFE	; 254
    1d16:	39 83       	std	Y+1, r19	; 0x01
    1d18:	28 83       	st	Y, r18
    1d1a:	cc 54       	subi	r28, 0x4C	; 76
    1d1c:	d1 40       	sbci	r29, 0x01	; 1
    1d1e:	c6 5b       	subi	r28, 0xB6	; 182
    1d20:	de 4f       	sbci	r29, 0xFE	; 254
    1d22:	e8 81       	ld	r30, Y
    1d24:	f9 81       	ldd	r31, Y+1	; 0x01
    1d26:	ca 54       	subi	r28, 0x4A	; 74
    1d28:	d1 40       	sbci	r29, 0x01	; 1
    1d2a:	00 82       	st	Z, r0
    1d2c:	c6 5b       	subi	r28, 0xB6	; 182
    1d2e:	de 4f       	sbci	r29, 0xFE	; 254
    1d30:	28 81       	ld	r18, Y
    1d32:	39 81       	ldd	r19, Y+1	; 0x01
    1d34:	ca 54       	subi	r28, 0x4A	; 74
    1d36:	d1 40       	sbci	r29, 0x01	; 1
    1d38:	2f 5f       	subi	r18, 0xFF	; 255
    1d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3c:	c6 5b       	subi	r28, 0xB6	; 182
    1d3e:	de 4f       	sbci	r29, 0xFE	; 254
    1d40:	39 83       	std	Y+1, r19	; 0x01
    1d42:	28 83       	st	Y, r18
    1d44:	ca 54       	subi	r28, 0x4A	; 74
    1d46:	d1 40       	sbci	r29, 0x01	; 1
    1d48:	c2 5b       	subi	r28, 0xB2	; 178
    1d4a:	de 4f       	sbci	r29, 0xFE	; 254
    1d4c:	38 81       	ld	r19, Y
    1d4e:	ce 54       	subi	r28, 0x4E	; 78
    1d50:	d1 40       	sbci	r29, 0x01	; 1
    1d52:	31 50       	subi	r19, 0x01	; 1
    1d54:	c2 5b       	subi	r28, 0xB2	; 178
    1d56:	de 4f       	sbci	r29, 0xFE	; 254
    1d58:	38 83       	st	Y, r19
    1d5a:	ce 54       	subi	r28, 0x4E	; 78
    1d5c:	d1 40       	sbci	r29, 0x01	; 1
    1d5e:	c2 5b       	subi	r28, 0xB2	; 178
    1d60:	de 4f       	sbci	r29, 0xFE	; 254
    1d62:	88 81       	ld	r24, Y
    1d64:	ce 54       	subi	r28, 0x4E	; 78
    1d66:	d1 40       	sbci	r29, 0x01	; 1
    1d68:	88 23       	and	r24, r24
    1d6a:	21 f6       	brne	.-120    	; 0x1cf4 <main+0x7e4>
				s_ledCountDownMode = {PORTD_ID, PIN5_ID, positive_logic};
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	82 5f       	subi	r24, 0xF2	; 242
    1d70:	9e 4f       	sbci	r25, 0xFE	; 254
    1d72:	c1 5b       	subi	r28, 0xB1	; 177
    1d74:	de 4f       	sbci	r29, 0xFE	; 254
    1d76:	99 83       	std	Y+1, r25	; 0x01
    1d78:	88 83       	st	Y, r24
    1d7a:	cf 54       	subi	r28, 0x4F	; 79
    1d7c:	d1 40       	sbci	r29, 0x01	; 1
    1d7e:	e8 e6       	ldi	r30, 0x68	; 104
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	cf 5a       	subi	r28, 0xAF	; 175
    1d84:	de 4f       	sbci	r29, 0xFE	; 254
    1d86:	f9 83       	std	Y+1, r31	; 0x01
    1d88:	e8 83       	st	Y, r30
    1d8a:	c1 55       	subi	r28, 0x51	; 81
    1d8c:	d1 40       	sbci	r29, 0x01	; 1
    1d8e:	f3 e0       	ldi	r31, 0x03	; 3
    1d90:	cd 5a       	subi	r28, 0xAD	; 173
    1d92:	de 4f       	sbci	r29, 0xFE	; 254
    1d94:	f8 83       	st	Y, r31
    1d96:	c3 55       	subi	r28, 0x53	; 83
    1d98:	d1 40       	sbci	r29, 0x01	; 1
    1d9a:	cf 5a       	subi	r28, 0xAF	; 175
    1d9c:	de 4f       	sbci	r29, 0xFE	; 254
    1d9e:	e8 81       	ld	r30, Y
    1da0:	f9 81       	ldd	r31, Y+1	; 0x01
    1da2:	c1 55       	subi	r28, 0x51	; 81
    1da4:	d1 40       	sbci	r29, 0x01	; 1
    1da6:	00 80       	ld	r0, Z
    1da8:	cf 5a       	subi	r28, 0xAF	; 175
    1daa:	de 4f       	sbci	r29, 0xFE	; 254
    1dac:	28 81       	ld	r18, Y
    1dae:	39 81       	ldd	r19, Y+1	; 0x01
    1db0:	c1 55       	subi	r28, 0x51	; 81
    1db2:	d1 40       	sbci	r29, 0x01	; 1
    1db4:	2f 5f       	subi	r18, 0xFF	; 255
    1db6:	3f 4f       	sbci	r19, 0xFF	; 255
    1db8:	cf 5a       	subi	r28, 0xAF	; 175
    1dba:	de 4f       	sbci	r29, 0xFE	; 254
    1dbc:	39 83       	std	Y+1, r19	; 0x01
    1dbe:	28 83       	st	Y, r18
    1dc0:	c1 55       	subi	r28, 0x51	; 81
    1dc2:	d1 40       	sbci	r29, 0x01	; 1
    1dc4:	c1 5b       	subi	r28, 0xB1	; 177
    1dc6:	de 4f       	sbci	r29, 0xFE	; 254
    1dc8:	e8 81       	ld	r30, Y
    1dca:	f9 81       	ldd	r31, Y+1	; 0x01
    1dcc:	cf 54       	subi	r28, 0x4F	; 79
    1dce:	d1 40       	sbci	r29, 0x01	; 1
    1dd0:	00 82       	st	Z, r0
    1dd2:	c1 5b       	subi	r28, 0xB1	; 177
    1dd4:	de 4f       	sbci	r29, 0xFE	; 254
    1dd6:	28 81       	ld	r18, Y
    1dd8:	39 81       	ldd	r19, Y+1	; 0x01
    1dda:	cf 54       	subi	r28, 0x4F	; 79
    1ddc:	d1 40       	sbci	r29, 0x01	; 1
    1dde:	2f 5f       	subi	r18, 0xFF	; 255
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	c1 5b       	subi	r28, 0xB1	; 177
    1de4:	de 4f       	sbci	r29, 0xFE	; 254
    1de6:	39 83       	std	Y+1, r19	; 0x01
    1de8:	28 83       	st	Y, r18
    1dea:	cf 54       	subi	r28, 0x4F	; 79
    1dec:	d1 40       	sbci	r29, 0x01	; 1
    1dee:	cd 5a       	subi	r28, 0xAD	; 173
    1df0:	de 4f       	sbci	r29, 0xFE	; 254
    1df2:	38 81       	ld	r19, Y
    1df4:	c3 55       	subi	r28, 0x53	; 83
    1df6:	d1 40       	sbci	r29, 0x01	; 1
    1df8:	31 50       	subi	r19, 0x01	; 1
    1dfa:	cd 5a       	subi	r28, 0xAD	; 173
    1dfc:	de 4f       	sbci	r29, 0xFE	; 254
    1dfe:	38 83       	st	Y, r19
    1e00:	c3 55       	subi	r28, 0x53	; 83
    1e02:	d1 40       	sbci	r29, 0x01	; 1
    1e04:	cd 5a       	subi	r28, 0xAD	; 173
    1e06:	de 4f       	sbci	r29, 0xFE	; 254
    1e08:	88 81       	ld	r24, Y
    1e0a:	c3 55       	subi	r28, 0x53	; 83
    1e0c:	d1 40       	sbci	r29, 0x01	; 1
    1e0e:	88 23       	and	r24, r24
    1e10:	21 f6       	brne	.-120    	; 0x1d9a <main+0x88a>

	/******* Turn on internal pull_up for all but the pause button *******/
	PORTB = 0xFF; /* turn on internal pull-up resistors for all pins on portB */
    1e12:	e8 e3       	ldi	r30, 0x38	; 56
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
    1e18:	80 83       	st	Z, r24
	PORTD |= 0x04; /* turn on internal pull-up resistor for pin D2 */
    1e1a:	a2 e3       	ldi	r26, 0x32	; 50
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e2 e3       	ldi	r30, 0x32	; 50
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	84 60       	ori	r24, 0x04	; 4
    1e26:	8c 93       	st	X, r24

	/********************************** Initialize Drivers ***************************************/
	Buzzer_init(&s_buzzer_init_values);
    1e28:	ce 01       	movw	r24, r28
    1e2a:	87 51       	subi	r24, 0x17	; 23
    1e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Buzzer_init>
	/* initialize all buttons */
	BUTTON_init(&s_resetButton);
    1e32:	ce 01       	movw	r24, r28
    1e34:	83 51       	subi	r24, 0x13	; 19
    1e36:	9f 4f       	sbci	r25, 0xFF	; 255
    1e38:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUTTON_init>
	BUTTON_init(&s_resumeButton);
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	80 51       	subi	r24, 0x10	; 16
    1e40:	9f 4f       	sbci	r25, 0xFF	; 255
    1e42:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUTTON_init>
	BUTTON_init(&s_pauseButton);
    1e46:	ce 01       	movw	r24, r28
    1e48:	8d 50       	subi	r24, 0x0D	; 13
    1e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4c:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUTTON_init>
	BUTTON_init(&s_timerModeButton);
    1e50:	ce 01       	movw	r24, r28
    1e52:	8a 50       	subi	r24, 0x0A	; 10
    1e54:	9f 4f       	sbci	r25, 0xFF	; 255
    1e56:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUTTON_init>
	BUTTON_init(&s_hoursIncrement);
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	87 50       	subi	r24, 0x07	; 7
    1e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e60:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUTTON_init>
	BUTTON_init(&s_hoursDecrement);
    1e64:	ce 01       	movw	r24, r28
    1e66:	84 50       	subi	r24, 0x04	; 4
    1e68:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6a:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUTTON_init>
	BUTTON_init(&s_minutesIncrement);
    1e6e:	ce 01       	movw	r24, r28
    1e70:	81 50       	subi	r24, 0x01	; 1
    1e72:	9f 4f       	sbci	r25, 0xFF	; 255
    1e74:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUTTON_init>
	BUTTON_init(&s_minutesDecrement);
    1e78:	ce 01       	movw	r24, r28
    1e7a:	8e 5f       	subi	r24, 0xFE	; 254
    1e7c:	9e 4f       	sbci	r25, 0xFE	; 254
    1e7e:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUTTON_init>
	BUTTON_init(&s_secondsIncrement);
    1e82:	ce 01       	movw	r24, r28
    1e84:	8b 5f       	subi	r24, 0xFB	; 251
    1e86:	9e 4f       	sbci	r25, 0xFE	; 254
    1e88:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUTTON_init>
	BUTTON_init(&s_secondsDecrement);
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	88 5f       	subi	r24, 0xF8	; 248
    1e90:	9e 4f       	sbci	r25, 0xFE	; 254
    1e92:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUTTON_init>
	/* initialize seven segments */
	Seven_Segment_init(&s_sevenSegment_init_values);
    1e96:	ce 01       	movw	r24, r28
    1e98:	85 51       	subi	r24, 0x15	; 21
    1e9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9c:	0e 94 30 0a 	call	0x1460	; 0x1460 <Seven_Segment_init>
	/* initialize LEDs that indicate mode */
	LEDS_init(&s_ledCountUpMode);
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	85 5f       	subi	r24, 0xF5	; 245
    1ea4:	9e 4f       	sbci	r25, 0xFE	; 254
    1ea6:	0e 94 87 09 	call	0x130e	; 0x130e <LEDS_init>
	LEDS_init(&s_ledCountDownMode);
    1eaa:	ce 01       	movw	r24, r28
    1eac:	82 5f       	subi	r24, 0xF2	; 242
    1eae:	9e 4f       	sbci	r25, 0xFE	; 254
    1eb0:	0e 94 87 09 	call	0x130e	; 0x130e <LEDS_init>
	/* initially make timer count up using timer 1 */
	Timer_init(&s_timer1_init_values);
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	8e 51       	subi	r24, 0x1E	; 30
    1eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eba:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <Timer_init>
	Timer_setCallBack(count_up_mode, timer1);
    1ebe:	8e e2       	ldi	r24, 0x2E	; 46
    1ec0:	9c e1       	ldi	r25, 0x1C	; 28
    1ec2:	61 e0       	ldi	r22, 0x01	; 1
    1ec4:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <Timer_setCallBack>
	LED_on(&s_ledCountUpMode); /* turn on led that indicates count up mode */
    1ec8:	ce 01       	movw	r24, r28
    1eca:	85 5f       	subi	r24, 0xF5	; 245
    1ecc:	9e 4f       	sbci	r25, 0xFE	; 254
    1ece:	0e 94 c6 09 	call	0x138c	; 0x138c <LED_on>

	/* Super Loop */
	for(;;)
	{
		/* if change mode button is pressed */
		if(BUTTON_checkPressed(&s_timerModeButton))
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	8a 50       	subi	r24, 0x0A	; 10
    1ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed8:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    1edc:	88 23       	and	r24, r24
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <main+0x9d2>
    1ee0:	0a c1       	rjmp	.+532    	; 0x20f6 <main+0xbe6>
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	e3 52       	subi	r30, 0x23	; 35
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 ef       	ldi	r26, 0xF0	; 240
    1eee:	b1 e4       	ldi	r27, 0x41	; 65
    1ef0:	80 83       	st	Z, r24
    1ef2:	91 83       	std	Z+1, r25	; 0x01
    1ef4:	a2 83       	std	Z+2, r26	; 0x02
    1ef6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef8:	8e 01       	movw	r16, r28
    1efa:	07 52       	subi	r16, 0x27	; 39
    1efc:	1f 4f       	sbci	r17, 0xFF	; 255
    1efe:	fe 01       	movw	r30, r28
    1f00:	e3 52       	subi	r30, 0x23	; 35
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	60 81       	ld	r22, Z
    1f06:	71 81       	ldd	r23, Z+1	; 0x01
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	93 81       	ldd	r25, Z+3	; 0x03
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	4a e7       	ldi	r20, 0x7A	; 122
    1f12:	55 e4       	ldi	r21, 0x45	; 69
    1f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	f8 01       	movw	r30, r16
    1f1e:	80 83       	st	Z, r24
    1f20:	91 83       	std	Z+1, r25	; 0x01
    1f22:	a2 83       	std	Z+2, r26	; 0x02
    1f24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f26:	fe 01       	movw	r30, r28
    1f28:	e7 52       	subi	r30, 0x27	; 39
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	60 81       	ld	r22, Z
    1f2e:	71 81       	ldd	r23, Z+1	; 0x01
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	93 81       	ldd	r25, Z+3	; 0x03
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e8       	ldi	r20, 0x80	; 128
    1f3a:	5f e3       	ldi	r21, 0x3F	; 63
    1f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f40:	88 23       	and	r24, r24
    1f42:	44 f4       	brge	.+16     	; 0x1f54 <main+0xa44>
		__ticks = 1;
    1f44:	fe 01       	movw	r30, r28
    1f46:	e9 52       	subi	r30, 0x29	; 41
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	80 83       	st	Z, r24
    1f52:	64 c0       	rjmp	.+200    	; 0x201c <main+0xb0c>
	else if (__tmp > 65535)
    1f54:	fe 01       	movw	r30, r28
    1f56:	e7 52       	subi	r30, 0x27	; 39
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	60 81       	ld	r22, Z
    1f5c:	71 81       	ldd	r23, Z+1	; 0x01
    1f5e:	82 81       	ldd	r24, Z+2	; 0x02
    1f60:	93 81       	ldd	r25, Z+3	; 0x03
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	3f ef       	ldi	r19, 0xFF	; 255
    1f66:	4f e7       	ldi	r20, 0x7F	; 127
    1f68:	57 e4       	ldi	r21, 0x47	; 71
    1f6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f6e:	18 16       	cp	r1, r24
    1f70:	0c f0       	brlt	.+2      	; 0x1f74 <main+0xa64>
    1f72:	43 c0       	rjmp	.+134    	; 0x1ffa <main+0xaea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f74:	fe 01       	movw	r30, r28
    1f76:	e3 52       	subi	r30, 0x23	; 35
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	60 81       	ld	r22, Z
    1f7c:	71 81       	ldd	r23, Z+1	; 0x01
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e2       	ldi	r20, 0x20	; 32
    1f88:	51 e4       	ldi	r21, 0x41	; 65
    1f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	8e 01       	movw	r16, r28
    1f94:	09 52       	subi	r16, 0x29	; 41
    1f96:	1f 4f       	sbci	r17, 0xFF	; 255
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	f8 01       	movw	r30, r16
    1fa6:	91 83       	std	Z+1, r25	; 0x01
    1fa8:	80 83       	st	Z, r24
    1faa:	1f c0       	rjmp	.+62     	; 0x1fea <main+0xada>
    1fac:	fe 01       	movw	r30, r28
    1fae:	eb 52       	subi	r30, 0x2B	; 43
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 e9       	ldi	r24, 0x90	; 144
    1fb4:	91 e0       	ldi	r25, 0x01	; 1
    1fb6:	91 83       	std	Z+1, r25	; 0x01
    1fb8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fba:	fe 01       	movw	r30, r28
    1fbc:	eb 52       	subi	r30, 0x2B	; 43
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	80 81       	ld	r24, Z
    1fc2:	91 81       	ldd	r25, Z+1	; 0x01
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <main+0xab4>
    1fc8:	fe 01       	movw	r30, r28
    1fca:	eb 52       	subi	r30, 0x2B	; 43
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd2:	de 01       	movw	r26, r28
    1fd4:	a9 52       	subi	r26, 0x29	; 41
    1fd6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e9 52       	subi	r30, 0x29	; 41
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 81       	ld	r24, Z
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	11 96       	adiw	r26, 0x01	; 1
    1fe6:	9c 93       	st	X, r25
    1fe8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fea:	fe 01       	movw	r30, r28
    1fec:	e9 52       	subi	r30, 0x29	; 41
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	80 81       	ld	r24, Z
    1ff2:	91 81       	ldd	r25, Z+1	; 0x01
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	d1 f6       	brne	.-76     	; 0x1fac <main+0xa9c>
    1ff8:	27 c0       	rjmp	.+78     	; 0x2048 <main+0xb38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffa:	8e 01       	movw	r16, r28
    1ffc:	09 52       	subi	r16, 0x29	; 41
    1ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    2000:	fe 01       	movw	r30, r28
    2002:	e7 52       	subi	r30, 0x27	; 39
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	60 81       	ld	r22, Z
    2008:	71 81       	ldd	r23, Z+1	; 0x01
    200a:	82 81       	ldd	r24, Z+2	; 0x02
    200c:	93 81       	ldd	r25, Z+3	; 0x03
    200e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	f8 01       	movw	r30, r16
    2018:	91 83       	std	Z+1, r25	; 0x01
    201a:	80 83       	st	Z, r24
    201c:	de 01       	movw	r26, r28
    201e:	ad 52       	subi	r26, 0x2D	; 45
    2020:	bf 4f       	sbci	r27, 0xFF	; 255
    2022:	fe 01       	movw	r30, r28
    2024:	e9 52       	subi	r30, 0x29	; 41
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	80 81       	ld	r24, Z
    202a:	91 81       	ldd	r25, Z+1	; 0x01
    202c:	8d 93       	st	X+, r24
    202e:	9c 93       	st	X, r25
    2030:	fe 01       	movw	r30, r28
    2032:	ed 52       	subi	r30, 0x2D	; 45
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	80 81       	ld	r24, Z
    2038:	91 81       	ldd	r25, Z+1	; 0x01
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <main+0xb2a>
    203e:	fe 01       	movw	r30, r28
    2040:	ed 52       	subi	r30, 0x2D	; 45
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	91 83       	std	Z+1, r25	; 0x01
    2046:	80 83       	st	Z, r24
		{
			_delay_ms(BUTTON_DEBOUNCE_PERIOD); /* delay to overcome debounce effect */
			if(BUTTON_checkPressed(&s_timerModeButton) && !buttons_pressed_flags.flags.timerMode_flag)
    2048:	ce 01       	movw	r24, r28
    204a:	8a 50       	subi	r24, 0x0A	; 10
    204c:	9f 4f       	sbci	r25, 0xFF	; 255
    204e:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    2052:	88 23       	and	r24, r24
    2054:	09 f4       	brne	.+2      	; 0x2058 <main+0xb48>
    2056:	54 c0       	rjmp	.+168    	; 0x2100 <main+0xbf0>
    2058:	80 91 9a 00 	lds	r24, 0x009A
    205c:	88 70       	andi	r24, 0x08	; 8
    205e:	88 23       	and	r24, r24
    2060:	09 f0       	breq	.+2      	; 0x2064 <main+0xb54>
    2062:	4e c0       	rjmp	.+156    	; 0x2100 <main+0xbf0>
			{
				buttons_pressed_flags.flags.timerMode_flag = 1; /* indicates that button is still pressed */
    2064:	80 91 9a 00 	lds	r24, 0x009A
    2068:	88 60       	ori	r24, 0x08	; 8
    206a:	80 93 9a 00 	sts	0x009A, r24
				timer_mode^=1; /* switch timer mode */
    206e:	90 91 94 00 	lds	r25, 0x0094
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	89 27       	eor	r24, r25
    2076:	80 93 94 00 	sts	0x0094, r24
				target_reached_flag = 0; /* start incrementing / decrementing again */
    207a:	10 92 99 00 	sts	0x0099, r1
				/* change which mode the timer is running on */
				switch(timer_mode)
    207e:	80 91 94 00 	lds	r24, 0x0094
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	cf 5e       	subi	r28, 0xEF	; 239
    2088:	de 4f       	sbci	r29, 0xFE	; 254
    208a:	39 83       	std	Y+1, r19	; 0x01
    208c:	28 83       	st	Y, r18
    208e:	c1 51       	subi	r28, 0x11	; 17
    2090:	d1 40       	sbci	r29, 0x01	; 1
    2092:	cf 5e       	subi	r28, 0xEF	; 239
    2094:	de 4f       	sbci	r29, 0xFE	; 254
    2096:	88 81       	ld	r24, Y
    2098:	99 81       	ldd	r25, Y+1	; 0x01
    209a:	c1 51       	subi	r28, 0x11	; 17
    209c:	d1 40       	sbci	r29, 0x01	; 1
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	51 f0       	breq	.+20     	; 0x20b6 <main+0xba6>
    20a2:	cf 5e       	subi	r28, 0xEF	; 239
    20a4:	de 4f       	sbci	r29, 0xFE	; 254
    20a6:	e8 81       	ld	r30, Y
    20a8:	f9 81       	ldd	r31, Y+1	; 0x01
    20aa:	c1 51       	subi	r28, 0x11	; 17
    20ac:	d1 40       	sbci	r29, 0x01	; 1
    20ae:	e1 30       	cpi	r30, 0x01	; 1
    20b0:	f1 05       	cpc	r31, r1
    20b2:	89 f0       	breq	.+34     	; 0x20d6 <main+0xbc6>
    20b4:	25 c0       	rjmp	.+74     	; 0x2100 <main+0xbf0>
				{
				case COUNTUP_MODE:
					Timer_setCallBack(count_up_mode, timer1); /* make timer count up using timer 1 */
    20b6:	8e e2       	ldi	r24, 0x2E	; 46
    20b8:	9c e1       	ldi	r25, 0x1C	; 28
    20ba:	61 e0       	ldi	r22, 0x01	; 1
    20bc:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <Timer_setCallBack>
					LED_on(&s_ledCountUpMode);
    20c0:	ce 01       	movw	r24, r28
    20c2:	85 5f       	subi	r24, 0xF5	; 245
    20c4:	9e 4f       	sbci	r25, 0xFE	; 254
    20c6:	0e 94 c6 09 	call	0x138c	; 0x138c <LED_on>
					LED_off(&s_ledCountDownMode);
    20ca:	ce 01       	movw	r24, r28
    20cc:	82 5f       	subi	r24, 0xF2	; 242
    20ce:	9e 4f       	sbci	r25, 0xFE	; 254
    20d0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <LED_off>
    20d4:	15 c0       	rjmp	.+42     	; 0x2100 <main+0xbf0>
					break;
				case COUNTDOWN_MODE:
					Timer_setCallBack(count_down_mode, timer1); /* make timer count down using timer 1 */
    20d6:	82 e6       	ldi	r24, 0x62	; 98
    20d8:	9c e1       	ldi	r25, 0x1C	; 28
    20da:	61 e0       	ldi	r22, 0x01	; 1
    20dc:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <Timer_setCallBack>
					LED_on(&s_ledCountDownMode);
    20e0:	ce 01       	movw	r24, r28
    20e2:	82 5f       	subi	r24, 0xF2	; 242
    20e4:	9e 4f       	sbci	r25, 0xFE	; 254
    20e6:	0e 94 c6 09 	call	0x138c	; 0x138c <LED_on>
					LED_off(&s_ledCountUpMode);
    20ea:	ce 01       	movw	r24, r28
    20ec:	85 5f       	subi	r24, 0xF5	; 245
    20ee:	9e 4f       	sbci	r25, 0xFE	; 254
    20f0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <LED_off>
    20f4:	05 c0       	rjmp	.+10     	; 0x2100 <main+0xbf0>
				}
			}
		}
		else
		{
			buttons_pressed_flags.flags.timerMode_flag=0; /* indicate that button is released */
    20f6:	80 91 9a 00 	lds	r24, 0x009A
    20fa:	87 7f       	andi	r24, 0xF7	; 247
    20fc:	80 93 9a 00 	sts	0x009A, r24
		}

		/********** if timer pause button is pressed **********/

		if(BUTTON_checkPressed(&s_pauseButton))
    2100:	ce 01       	movw	r24, r28
    2102:	8d 50       	subi	r24, 0x0D	; 13
    2104:	9f 4f       	sbci	r25, 0xFF	; 255
    2106:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    210a:	88 23       	and	r24, r24
    210c:	09 f4       	brne	.+2      	; 0x2110 <main+0xc00>
    210e:	c8 c0       	rjmp	.+400    	; 0x22a0 <main+0xd90>
    2110:	fe 01       	movw	r30, r28
    2112:	e1 53       	subi	r30, 0x31	; 49
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	a0 ef       	ldi	r26, 0xF0	; 240
    211c:	b1 e4       	ldi	r27, 0x41	; 65
    211e:	80 83       	st	Z, r24
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	a2 83       	std	Z+2, r26	; 0x02
    2124:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2126:	8e 01       	movw	r16, r28
    2128:	05 53       	subi	r16, 0x35	; 53
    212a:	1f 4f       	sbci	r17, 0xFF	; 255
    212c:	fe 01       	movw	r30, r28
    212e:	e1 53       	subi	r30, 0x31	; 49
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	60 81       	ld	r22, Z
    2134:	71 81       	ldd	r23, Z+1	; 0x01
    2136:	82 81       	ldd	r24, Z+2	; 0x02
    2138:	93 81       	ldd	r25, Z+3	; 0x03
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	4a e7       	ldi	r20, 0x7A	; 122
    2140:	55 e4       	ldi	r21, 0x45	; 69
    2142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	f8 01       	movw	r30, r16
    214c:	80 83       	st	Z, r24
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	a2 83       	std	Z+2, r26	; 0x02
    2152:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2154:	fe 01       	movw	r30, r28
    2156:	e5 53       	subi	r30, 0x35	; 53
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	44 f4       	brge	.+16     	; 0x2182 <main+0xc72>
		__ticks = 1;
    2172:	fe 01       	movw	r30, r28
    2174:	e7 53       	subi	r30, 0x37	; 55
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	80 83       	st	Z, r24
    2180:	64 c0       	rjmp	.+200    	; 0x224a <main+0xd3a>
	else if (__tmp > 65535)
    2182:	fe 01       	movw	r30, r28
    2184:	e5 53       	subi	r30, 0x35	; 53
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	60 81       	ld	r22, Z
    218a:	71 81       	ldd	r23, Z+1	; 0x01
    218c:	82 81       	ldd	r24, Z+2	; 0x02
    218e:	93 81       	ldd	r25, Z+3	; 0x03
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219c:	18 16       	cp	r1, r24
    219e:	0c f0       	brlt	.+2      	; 0x21a2 <main+0xc92>
    21a0:	43 c0       	rjmp	.+134    	; 0x2228 <main+0xd18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a2:	fe 01       	movw	r30, r28
    21a4:	e1 53       	subi	r30, 0x31	; 49
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	82 81       	ldd	r24, Z+2	; 0x02
    21ae:	93 81       	ldd	r25, Z+3	; 0x03
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e2       	ldi	r20, 0x20	; 32
    21b6:	51 e4       	ldi	r21, 0x41	; 65
    21b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	8e 01       	movw	r16, r28
    21c2:	07 53       	subi	r16, 0x37	; 55
    21c4:	1f 4f       	sbci	r17, 0xFF	; 255
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	f8 01       	movw	r30, r16
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	80 83       	st	Z, r24
    21d8:	1f c0       	rjmp	.+62     	; 0x2218 <main+0xd08>
    21da:	fe 01       	movw	r30, r28
    21dc:	e9 53       	subi	r30, 0x39	; 57
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	80 e9       	ldi	r24, 0x90	; 144
    21e2:	91 e0       	ldi	r25, 0x01	; 1
    21e4:	91 83       	std	Z+1, r25	; 0x01
    21e6:	80 83       	st	Z, r24
    21e8:	fe 01       	movw	r30, r28
    21ea:	e9 53       	subi	r30, 0x39	; 57
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	80 81       	ld	r24, Z
    21f0:	91 81       	ldd	r25, Z+1	; 0x01
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <main+0xce2>
    21f6:	fe 01       	movw	r30, r28
    21f8:	e9 53       	subi	r30, 0x39	; 57
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2200:	de 01       	movw	r26, r28
    2202:	a7 53       	subi	r26, 0x37	; 55
    2204:	bf 4f       	sbci	r27, 0xFF	; 255
    2206:	fe 01       	movw	r30, r28
    2208:	e7 53       	subi	r30, 0x37	; 55
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 81       	ld	r24, Z
    220e:	91 81       	ldd	r25, Z+1	; 0x01
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	11 96       	adiw	r26, 0x01	; 1
    2214:	9c 93       	st	X, r25
    2216:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2218:	fe 01       	movw	r30, r28
    221a:	e7 53       	subi	r30, 0x37	; 55
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	80 81       	ld	r24, Z
    2220:	91 81       	ldd	r25, Z+1	; 0x01
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	d1 f6       	brne	.-76     	; 0x21da <main+0xcca>
    2226:	27 c0       	rjmp	.+78     	; 0x2276 <main+0xd66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2228:	8e 01       	movw	r16, r28
    222a:	07 53       	subi	r16, 0x37	; 55
    222c:	1f 4f       	sbci	r17, 0xFF	; 255
    222e:	fe 01       	movw	r30, r28
    2230:	e5 53       	subi	r30, 0x35	; 53
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	60 81       	ld	r22, Z
    2236:	71 81       	ldd	r23, Z+1	; 0x01
    2238:	82 81       	ldd	r24, Z+2	; 0x02
    223a:	93 81       	ldd	r25, Z+3	; 0x03
    223c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	f8 01       	movw	r30, r16
    2246:	91 83       	std	Z+1, r25	; 0x01
    2248:	80 83       	st	Z, r24
    224a:	de 01       	movw	r26, r28
    224c:	ab 53       	subi	r26, 0x3B	; 59
    224e:	bf 4f       	sbci	r27, 0xFF	; 255
    2250:	fe 01       	movw	r30, r28
    2252:	e7 53       	subi	r30, 0x37	; 55
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	91 81       	ldd	r25, Z+1	; 0x01
    225a:	8d 93       	st	X+, r24
    225c:	9c 93       	st	X, r25
    225e:	fe 01       	movw	r30, r28
    2260:	eb 53       	subi	r30, 0x3B	; 59
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 81       	ld	r24, Z
    2266:	91 81       	ldd	r25, Z+1	; 0x01
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <main+0xd58>
    226c:	fe 01       	movw	r30, r28
    226e:	eb 53       	subi	r30, 0x3B	; 59
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	80 83       	st	Z, r24
		{
			_delay_ms(BUTTON_DEBOUNCE_PERIOD); /* delay to overcome debounce effect */
			if(BUTTON_checkPressed(&s_pauseButton) && !buttons_pressed_flags.flags.pause_flag)
    2276:	ce 01       	movw	r24, r28
    2278:	8d 50       	subi	r24, 0x0D	; 13
    227a:	9f 4f       	sbci	r25, 0xFF	; 255
    227c:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    2280:	88 23       	and	r24, r24
    2282:	99 f0       	breq	.+38     	; 0x22aa <main+0xd9a>
    2284:	80 91 9a 00 	lds	r24, 0x009A
    2288:	84 70       	andi	r24, 0x04	; 4
    228a:	88 23       	and	r24, r24
    228c:	71 f4       	brne	.+28     	; 0x22aa <main+0xd9a>
			{
				buttons_pressed_flags.flags.pause_flag = 1; /* indicates that button is still pressed */
    228e:	80 91 9a 00 	lds	r24, 0x009A
    2292:	84 60       	ori	r24, 0x04	; 4
    2294:	80 93 9a 00 	sts	0x009A, r24
				Timer_deInit(timer1);/* deinitialize timer1 */
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <Timer_deInit>
    229e:	05 c0       	rjmp	.+10     	; 0x22aa <main+0xd9a>
			}
		}
		else
		{
			buttons_pressed_flags.flags.pause_flag=0; /* indicate that button is released */
    22a0:	80 91 9a 00 	lds	r24, 0x009A
    22a4:	8b 7f       	andi	r24, 0xFB	; 251
    22a6:	80 93 9a 00 	sts	0x009A, r24
		}

		/********** if timer resume button is pressed **********/

		if(BUTTON_checkPressed(&s_resumeButton))
    22aa:	ce 01       	movw	r24, r28
    22ac:	80 51       	subi	r24, 0x10	; 16
    22ae:	9f 4f       	sbci	r25, 0xFF	; 255
    22b0:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    22b4:	88 23       	and	r24, r24
    22b6:	09 f4       	brne	.+2      	; 0x22ba <main+0xdaa>
    22b8:	ca c0       	rjmp	.+404    	; 0x244e <main+0xf3e>
    22ba:	fe 01       	movw	r30, r28
    22bc:	ef 53       	subi	r30, 0x3F	; 63
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	a0 ef       	ldi	r26, 0xF0	; 240
    22c6:	b1 e4       	ldi	r27, 0x41	; 65
    22c8:	80 83       	st	Z, r24
    22ca:	91 83       	std	Z+1, r25	; 0x01
    22cc:	a2 83       	std	Z+2, r26	; 0x02
    22ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d0:	8e 01       	movw	r16, r28
    22d2:	03 54       	subi	r16, 0x43	; 67
    22d4:	1f 4f       	sbci	r17, 0xFF	; 255
    22d6:	fe 01       	movw	r30, r28
    22d8:	ef 53       	subi	r30, 0x3F	; 63
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	60 81       	ld	r22, Z
    22de:	71 81       	ldd	r23, Z+1	; 0x01
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	4a e7       	ldi	r20, 0x7A	; 122
    22ea:	55 e4       	ldi	r21, 0x45	; 69
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	f8 01       	movw	r30, r16
    22f6:	80 83       	st	Z, r24
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	a2 83       	std	Z+2, r26	; 0x02
    22fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22fe:	fe 01       	movw	r30, r28
    2300:	e3 54       	subi	r30, 0x43	; 67
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	60 81       	ld	r22, Z
    2306:	71 81       	ldd	r23, Z+1	; 0x01
    2308:	82 81       	ldd	r24, Z+2	; 0x02
    230a:	93 81       	ldd	r25, Z+3	; 0x03
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e8       	ldi	r20, 0x80	; 128
    2312:	5f e3       	ldi	r21, 0x3F	; 63
    2314:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2318:	88 23       	and	r24, r24
    231a:	44 f4       	brge	.+16     	; 0x232c <main+0xe1c>
		__ticks = 1;
    231c:	fe 01       	movw	r30, r28
    231e:	e5 54       	subi	r30, 0x45	; 69
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	80 83       	st	Z, r24
    232a:	64 c0       	rjmp	.+200    	; 0x23f4 <main+0xee4>
	else if (__tmp > 65535)
    232c:	fe 01       	movw	r30, r28
    232e:	e3 54       	subi	r30, 0x43	; 67
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	60 81       	ld	r22, Z
    2334:	71 81       	ldd	r23, Z+1	; 0x01
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	93 81       	ldd	r25, Z+3	; 0x03
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	3f ef       	ldi	r19, 0xFF	; 255
    233e:	4f e7       	ldi	r20, 0x7F	; 127
    2340:	57 e4       	ldi	r21, 0x47	; 71
    2342:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2346:	18 16       	cp	r1, r24
    2348:	0c f0       	brlt	.+2      	; 0x234c <main+0xe3c>
    234a:	43 c0       	rjmp	.+134    	; 0x23d2 <main+0xec2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234c:	fe 01       	movw	r30, r28
    234e:	ef 53       	subi	r30, 0x3F	; 63
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	60 81       	ld	r22, Z
    2354:	71 81       	ldd	r23, Z+1	; 0x01
    2356:	82 81       	ldd	r24, Z+2	; 0x02
    2358:	93 81       	ldd	r25, Z+3	; 0x03
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e2       	ldi	r20, 0x20	; 32
    2360:	51 e4       	ldi	r21, 0x41	; 65
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	8e 01       	movw	r16, r28
    236c:	05 54       	subi	r16, 0x45	; 69
    236e:	1f 4f       	sbci	r17, 0xFF	; 255
    2370:	bc 01       	movw	r22, r24
    2372:	cd 01       	movw	r24, r26
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	f8 01       	movw	r30, r16
    237e:	91 83       	std	Z+1, r25	; 0x01
    2380:	80 83       	st	Z, r24
    2382:	1f c0       	rjmp	.+62     	; 0x23c2 <main+0xeb2>
    2384:	fe 01       	movw	r30, r28
    2386:	e7 54       	subi	r30, 0x47	; 71
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	80 e9       	ldi	r24, 0x90	; 144
    238c:	91 e0       	ldi	r25, 0x01	; 1
    238e:	91 83       	std	Z+1, r25	; 0x01
    2390:	80 83       	st	Z, r24
    2392:	fe 01       	movw	r30, r28
    2394:	e7 54       	subi	r30, 0x47	; 71
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	80 81       	ld	r24, Z
    239a:	91 81       	ldd	r25, Z+1	; 0x01
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <main+0xe8c>
    23a0:	fe 01       	movw	r30, r28
    23a2:	e7 54       	subi	r30, 0x47	; 71
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	91 83       	std	Z+1, r25	; 0x01
    23a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23aa:	de 01       	movw	r26, r28
    23ac:	a5 54       	subi	r26, 0x45	; 69
    23ae:	bf 4f       	sbci	r27, 0xFF	; 255
    23b0:	fe 01       	movw	r30, r28
    23b2:	e5 54       	subi	r30, 0x45	; 69
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	11 96       	adiw	r26, 0x01	; 1
    23be:	9c 93       	st	X, r25
    23c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c2:	fe 01       	movw	r30, r28
    23c4:	e5 54       	subi	r30, 0x45	; 69
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	80 81       	ld	r24, Z
    23ca:	91 81       	ldd	r25, Z+1	; 0x01
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	d1 f6       	brne	.-76     	; 0x2384 <main+0xe74>
    23d0:	27 c0       	rjmp	.+78     	; 0x2420 <main+0xf10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d2:	8e 01       	movw	r16, r28
    23d4:	05 54       	subi	r16, 0x45	; 69
    23d6:	1f 4f       	sbci	r17, 0xFF	; 255
    23d8:	fe 01       	movw	r30, r28
    23da:	e3 54       	subi	r30, 0x43	; 67
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	60 81       	ld	r22, Z
    23e0:	71 81       	ldd	r23, Z+1	; 0x01
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	93 81       	ldd	r25, Z+3	; 0x03
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	f8 01       	movw	r30, r16
    23f0:	91 83       	std	Z+1, r25	; 0x01
    23f2:	80 83       	st	Z, r24
    23f4:	de 01       	movw	r26, r28
    23f6:	a9 54       	subi	r26, 0x49	; 73
    23f8:	bf 4f       	sbci	r27, 0xFF	; 255
    23fa:	fe 01       	movw	r30, r28
    23fc:	e5 54       	subi	r30, 0x45	; 69
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	80 81       	ld	r24, Z
    2402:	91 81       	ldd	r25, Z+1	; 0x01
    2404:	8d 93       	st	X+, r24
    2406:	9c 93       	st	X, r25
    2408:	fe 01       	movw	r30, r28
    240a:	e9 54       	subi	r30, 0x49	; 73
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 81       	ld	r24, Z
    2410:	91 81       	ldd	r25, Z+1	; 0x01
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <main+0xf02>
    2416:	fe 01       	movw	r30, r28
    2418:	e9 54       	subi	r30, 0x49	; 73
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	80 83       	st	Z, r24
		{
			_delay_ms(BUTTON_DEBOUNCE_PERIOD); /* delay to overcome debounce effect */
			if(BUTTON_checkPressed(&s_resumeButton) && !buttons_pressed_flags.flags.resume_flag)
    2420:	ce 01       	movw	r24, r28
    2422:	80 51       	subi	r24, 0x10	; 16
    2424:	9f 4f       	sbci	r25, 0xFF	; 255
    2426:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    242a:	88 23       	and	r24, r24
    242c:	a9 f0       	breq	.+42     	; 0x2458 <main+0xf48>
    242e:	80 91 9a 00 	lds	r24, 0x009A
    2432:	82 70       	andi	r24, 0x02	; 2
    2434:	88 23       	and	r24, r24
    2436:	81 f4       	brne	.+32     	; 0x2458 <main+0xf48>
			{
				buttons_pressed_flags.flags.resume_flag = 1; /* indicates that button is still pressed */
    2438:	80 91 9a 00 	lds	r24, 0x009A
    243c:	82 60       	ori	r24, 0x02	; 2
    243e:	80 93 9a 00 	sts	0x009A, r24
				Timer_init(&s_timer1_init_values);/* initialize timer1 */
    2442:	ce 01       	movw	r24, r28
    2444:	8e 51       	subi	r24, 0x1E	; 30
    2446:	9f 4f       	sbci	r25, 0xFF	; 255
    2448:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <Timer_init>
    244c:	05 c0       	rjmp	.+10     	; 0x2458 <main+0xf48>
			}
		}
		else
		{
			buttons_pressed_flags.flags.resume_flag=0; /* indicate that button is released */
    244e:	80 91 9a 00 	lds	r24, 0x009A
    2452:	8d 7f       	andi	r24, 0xFD	; 253
    2454:	80 93 9a 00 	sts	0x009A, r24
		}

		/********** if timer reset button is pressed **********/

		if(BUTTON_checkPressed(&s_resetButton))
    2458:	ce 01       	movw	r24, r28
    245a:	83 51       	subi	r24, 0x13	; 19
    245c:	9f 4f       	sbci	r25, 0xFF	; 255
    245e:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    2462:	88 23       	and	r24, r24
    2464:	09 f4       	brne	.+2      	; 0x2468 <main+0xf58>
    2466:	cb c0       	rjmp	.+406    	; 0x25fe <main+0x10ee>
    2468:	fe 01       	movw	r30, r28
    246a:	ed 54       	subi	r30, 0x4D	; 77
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	a0 ef       	ldi	r26, 0xF0	; 240
    2474:	b1 e4       	ldi	r27, 0x41	; 65
    2476:	80 83       	st	Z, r24
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	a2 83       	std	Z+2, r26	; 0x02
    247c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247e:	8e 01       	movw	r16, r28
    2480:	01 55       	subi	r16, 0x51	; 81
    2482:	1f 4f       	sbci	r17, 0xFF	; 255
    2484:	fe 01       	movw	r30, r28
    2486:	ed 54       	subi	r30, 0x4D	; 77
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	60 81       	ld	r22, Z
    248c:	71 81       	ldd	r23, Z+1	; 0x01
    248e:	82 81       	ldd	r24, Z+2	; 0x02
    2490:	93 81       	ldd	r25, Z+3	; 0x03
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	4a e7       	ldi	r20, 0x7A	; 122
    2498:	55 e4       	ldi	r21, 0x45	; 69
    249a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	f8 01       	movw	r30, r16
    24a4:	80 83       	st	Z, r24
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	a2 83       	std	Z+2, r26	; 0x02
    24aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ac:	fe 01       	movw	r30, r28
    24ae:	e1 55       	subi	r30, 0x51	; 81
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e8       	ldi	r20, 0x80	; 128
    24c0:	5f e3       	ldi	r21, 0x3F	; 63
    24c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c6:	88 23       	and	r24, r24
    24c8:	44 f4       	brge	.+16     	; 0x24da <main+0xfca>
		__ticks = 1;
    24ca:	fe 01       	movw	r30, r28
    24cc:	e3 55       	subi	r30, 0x53	; 83
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	80 83       	st	Z, r24
    24d8:	64 c0       	rjmp	.+200    	; 0x25a2 <main+0x1092>
	else if (__tmp > 65535)
    24da:	fe 01       	movw	r30, r28
    24dc:	e1 55       	subi	r30, 0x51	; 81
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	60 81       	ld	r22, Z
    24e2:	71 81       	ldd	r23, Z+1	; 0x01
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	3f ef       	ldi	r19, 0xFF	; 255
    24ec:	4f e7       	ldi	r20, 0x7F	; 127
    24ee:	57 e4       	ldi	r21, 0x47	; 71
    24f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f4:	18 16       	cp	r1, r24
    24f6:	0c f0       	brlt	.+2      	; 0x24fa <main+0xfea>
    24f8:	43 c0       	rjmp	.+134    	; 0x2580 <main+0x1070>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fa:	fe 01       	movw	r30, r28
    24fc:	ed 54       	subi	r30, 0x4D	; 77
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	60 81       	ld	r22, Z
    2502:	71 81       	ldd	r23, Z+1	; 0x01
    2504:	82 81       	ldd	r24, Z+2	; 0x02
    2506:	93 81       	ldd	r25, Z+3	; 0x03
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e2       	ldi	r20, 0x20	; 32
    250e:	51 e4       	ldi	r21, 0x41	; 65
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	8e 01       	movw	r16, r28
    251a:	03 55       	subi	r16, 0x53	; 83
    251c:	1f 4f       	sbci	r17, 0xFF	; 255
    251e:	bc 01       	movw	r22, r24
    2520:	cd 01       	movw	r24, r26
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	f8 01       	movw	r30, r16
    252c:	91 83       	std	Z+1, r25	; 0x01
    252e:	80 83       	st	Z, r24
    2530:	1f c0       	rjmp	.+62     	; 0x2570 <main+0x1060>
    2532:	fe 01       	movw	r30, r28
    2534:	e5 55       	subi	r30, 0x55	; 85
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	80 e9       	ldi	r24, 0x90	; 144
    253a:	91 e0       	ldi	r25, 0x01	; 1
    253c:	91 83       	std	Z+1, r25	; 0x01
    253e:	80 83       	st	Z, r24
    2540:	fe 01       	movw	r30, r28
    2542:	e5 55       	subi	r30, 0x55	; 85
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	80 81       	ld	r24, Z
    2548:	91 81       	ldd	r25, Z+1	; 0x01
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <main+0x103a>
    254e:	fe 01       	movw	r30, r28
    2550:	e5 55       	subi	r30, 0x55	; 85
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2558:	de 01       	movw	r26, r28
    255a:	a3 55       	subi	r26, 0x53	; 83
    255c:	bf 4f       	sbci	r27, 0xFF	; 255
    255e:	fe 01       	movw	r30, r28
    2560:	e3 55       	subi	r30, 0x53	; 83
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 81       	ld	r24, Z
    2566:	91 81       	ldd	r25, Z+1	; 0x01
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	11 96       	adiw	r26, 0x01	; 1
    256c:	9c 93       	st	X, r25
    256e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2570:	fe 01       	movw	r30, r28
    2572:	e3 55       	subi	r30, 0x53	; 83
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	d1 f6       	brne	.-76     	; 0x2532 <main+0x1022>
    257e:	27 c0       	rjmp	.+78     	; 0x25ce <main+0x10be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2580:	8e 01       	movw	r16, r28
    2582:	03 55       	subi	r16, 0x53	; 83
    2584:	1f 4f       	sbci	r17, 0xFF	; 255
    2586:	fe 01       	movw	r30, r28
    2588:	e1 55       	subi	r30, 0x51	; 81
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	60 81       	ld	r22, Z
    258e:	71 81       	ldd	r23, Z+1	; 0x01
    2590:	82 81       	ldd	r24, Z+2	; 0x02
    2592:	93 81       	ldd	r25, Z+3	; 0x03
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	f8 01       	movw	r30, r16
    259e:	91 83       	std	Z+1, r25	; 0x01
    25a0:	80 83       	st	Z, r24
    25a2:	de 01       	movw	r26, r28
    25a4:	a7 55       	subi	r26, 0x57	; 87
    25a6:	bf 4f       	sbci	r27, 0xFF	; 255
    25a8:	fe 01       	movw	r30, r28
    25aa:	e3 55       	subi	r30, 0x53	; 83
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 81       	ld	r24, Z
    25b0:	91 81       	ldd	r25, Z+1	; 0x01
    25b2:	8d 93       	st	X+, r24
    25b4:	9c 93       	st	X, r25
    25b6:	fe 01       	movw	r30, r28
    25b8:	e7 55       	subi	r30, 0x57	; 87
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	91 81       	ldd	r25, Z+1	; 0x01
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <main+0x10b0>
    25c4:	fe 01       	movw	r30, r28
    25c6:	e7 55       	subi	r30, 0x57	; 87
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	80 83       	st	Z, r24
		{
			_delay_ms(BUTTON_DEBOUNCE_PERIOD); /* delay to overcome debounce effect */
			if(BUTTON_checkPressed(&s_resetButton) && !buttons_pressed_flags.flags.reset_flag)
    25ce:	ce 01       	movw	r24, r28
    25d0:	83 51       	subi	r24, 0x13	; 19
    25d2:	9f 4f       	sbci	r25, 0xFF	; 255
    25d4:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    25d8:	88 23       	and	r24, r24
    25da:	b1 f0       	breq	.+44     	; 0x2608 <main+0x10f8>
    25dc:	80 91 9a 00 	lds	r24, 0x009A
    25e0:	81 70       	andi	r24, 0x01	; 1
    25e2:	88 23       	and	r24, r24
    25e4:	89 f4       	brne	.+34     	; 0x2608 <main+0x10f8>
			{
				buttons_pressed_flags.flags.reset_flag = 1; /* indicates that button is still pressed */
    25e6:	80 91 9a 00 	lds	r24, 0x009A
    25ea:	81 60       	ori	r24, 0x01	; 1
    25ec:	80 93 9a 00 	sts	0x009A, r24
				/* reset timer values */
				seconds_counter = 0;
    25f0:	10 92 95 00 	sts	0x0095, r1
				minutes_counter = 0;
    25f4:	10 92 96 00 	sts	0x0096, r1
				hours_counter = 0;
    25f8:	10 92 97 00 	sts	0x0097, r1
    25fc:	05 c0       	rjmp	.+10     	; 0x2608 <main+0x10f8>
			}
		}
		else
		{
			buttons_pressed_flags.flags.reset_flag=0; /* indicate that button is released */
    25fe:	80 91 9a 00 	lds	r24, 0x009A
    2602:	8e 7f       	andi	r24, 0xFE	; 254
    2604:	80 93 9a 00 	sts	0x009A, r24
		}

		/********** Increment/Decrement buttons **********/

		/* increment seconds */
		if(BUTTON_checkPressed(&s_secondsIncrement))
    2608:	ce 01       	movw	r24, r28
    260a:	8b 5f       	subi	r24, 0xFB	; 251
    260c:	9e 4f       	sbci	r25, 0xFE	; 254
    260e:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    2612:	88 23       	and	r24, r24
    2614:	09 f4       	brne	.+2      	; 0x2618 <main+0x1108>
    2616:	e6 c0       	rjmp	.+460    	; 0x27e4 <main+0x12d4>
    2618:	fe 01       	movw	r30, r28
    261a:	eb 55       	subi	r30, 0x5B	; 91
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	a0 ef       	ldi	r26, 0xF0	; 240
    2624:	b1 e4       	ldi	r27, 0x41	; 65
    2626:	80 83       	st	Z, r24
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	a2 83       	std	Z+2, r26	; 0x02
    262c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262e:	8e 01       	movw	r16, r28
    2630:	0f 55       	subi	r16, 0x5F	; 95
    2632:	1f 4f       	sbci	r17, 0xFF	; 255
    2634:	fe 01       	movw	r30, r28
    2636:	eb 55       	subi	r30, 0x5B	; 91
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	60 81       	ld	r22, Z
    263c:	71 81       	ldd	r23, Z+1	; 0x01
    263e:	82 81       	ldd	r24, Z+2	; 0x02
    2640:	93 81       	ldd	r25, Z+3	; 0x03
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	4a e7       	ldi	r20, 0x7A	; 122
    2648:	55 e4       	ldi	r21, 0x45	; 69
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	f8 01       	movw	r30, r16
    2654:	80 83       	st	Z, r24
    2656:	91 83       	std	Z+1, r25	; 0x01
    2658:	a2 83       	std	Z+2, r26	; 0x02
    265a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    265c:	fe 01       	movw	r30, r28
    265e:	ef 55       	subi	r30, 0x5F	; 95
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e8       	ldi	r20, 0x80	; 128
    2670:	5f e3       	ldi	r21, 0x3F	; 63
    2672:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2676:	88 23       	and	r24, r24
    2678:	44 f4       	brge	.+16     	; 0x268a <main+0x117a>
		__ticks = 1;
    267a:	fe 01       	movw	r30, r28
    267c:	e1 56       	subi	r30, 0x61	; 97
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	80 83       	st	Z, r24
    2688:	64 c0       	rjmp	.+200    	; 0x2752 <main+0x1242>
	else if (__tmp > 65535)
    268a:	fe 01       	movw	r30, r28
    268c:	ef 55       	subi	r30, 0x5F	; 95
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	60 81       	ld	r22, Z
    2692:	71 81       	ldd	r23, Z+1	; 0x01
    2694:	82 81       	ldd	r24, Z+2	; 0x02
    2696:	93 81       	ldd	r25, Z+3	; 0x03
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	3f ef       	ldi	r19, 0xFF	; 255
    269c:	4f e7       	ldi	r20, 0x7F	; 127
    269e:	57 e4       	ldi	r21, 0x47	; 71
    26a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26a4:	18 16       	cp	r1, r24
    26a6:	0c f0       	brlt	.+2      	; 0x26aa <main+0x119a>
    26a8:	43 c0       	rjmp	.+134    	; 0x2730 <main+0x1220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26aa:	fe 01       	movw	r30, r28
    26ac:	eb 55       	subi	r30, 0x5B	; 91
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	60 81       	ld	r22, Z
    26b2:	71 81       	ldd	r23, Z+1	; 0x01
    26b4:	82 81       	ldd	r24, Z+2	; 0x02
    26b6:	93 81       	ldd	r25, Z+3	; 0x03
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e2       	ldi	r20, 0x20	; 32
    26be:	51 e4       	ldi	r21, 0x41	; 65
    26c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	8e 01       	movw	r16, r28
    26ca:	01 56       	subi	r16, 0x61	; 97
    26cc:	1f 4f       	sbci	r17, 0xFF	; 255
    26ce:	bc 01       	movw	r22, r24
    26d0:	cd 01       	movw	r24, r26
    26d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	f8 01       	movw	r30, r16
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	80 83       	st	Z, r24
    26e0:	1f c0       	rjmp	.+62     	; 0x2720 <main+0x1210>
    26e2:	fe 01       	movw	r30, r28
    26e4:	e3 56       	subi	r30, 0x63	; 99
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	80 e9       	ldi	r24, 0x90	; 144
    26ea:	91 e0       	ldi	r25, 0x01	; 1
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
    26f0:	fe 01       	movw	r30, r28
    26f2:	e3 56       	subi	r30, 0x63	; 99
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	f1 f7       	brne	.-4      	; 0x26fa <main+0x11ea>
    26fe:	fe 01       	movw	r30, r28
    2700:	e3 56       	subi	r30, 0x63	; 99
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2708:	de 01       	movw	r26, r28
    270a:	a1 56       	subi	r26, 0x61	; 97
    270c:	bf 4f       	sbci	r27, 0xFF	; 255
    270e:	fe 01       	movw	r30, r28
    2710:	e1 56       	subi	r30, 0x61	; 97
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 81       	ld	r24, Z
    2716:	91 81       	ldd	r25, Z+1	; 0x01
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	11 96       	adiw	r26, 0x01	; 1
    271c:	9c 93       	st	X, r25
    271e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2720:	fe 01       	movw	r30, r28
    2722:	e1 56       	subi	r30, 0x61	; 97
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 81       	ld	r24, Z
    2728:	91 81       	ldd	r25, Z+1	; 0x01
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	d1 f6       	brne	.-76     	; 0x26e2 <main+0x11d2>
    272e:	27 c0       	rjmp	.+78     	; 0x277e <main+0x126e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2730:	8e 01       	movw	r16, r28
    2732:	01 56       	subi	r16, 0x61	; 97
    2734:	1f 4f       	sbci	r17, 0xFF	; 255
    2736:	fe 01       	movw	r30, r28
    2738:	ef 55       	subi	r30, 0x5F	; 95
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	f8 01       	movw	r30, r16
    274e:	91 83       	std	Z+1, r25	; 0x01
    2750:	80 83       	st	Z, r24
    2752:	de 01       	movw	r26, r28
    2754:	a5 56       	subi	r26, 0x65	; 101
    2756:	bf 4f       	sbci	r27, 0xFF	; 255
    2758:	fe 01       	movw	r30, r28
    275a:	e1 56       	subi	r30, 0x61	; 97
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 81       	ld	r24, Z
    2760:	91 81       	ldd	r25, Z+1	; 0x01
    2762:	8d 93       	st	X+, r24
    2764:	9c 93       	st	X, r25
    2766:	fe 01       	movw	r30, r28
    2768:	e5 56       	subi	r30, 0x65	; 101
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	80 81       	ld	r24, Z
    276e:	91 81       	ldd	r25, Z+1	; 0x01
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <main+0x1260>
    2774:	fe 01       	movw	r30, r28
    2776:	e5 56       	subi	r30, 0x65	; 101
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	91 83       	std	Z+1, r25	; 0x01
    277c:	80 83       	st	Z, r24
		{
			_delay_ms(BUTTON_DEBOUNCE_PERIOD); /* delay to overcome debounce effect */
			if(BUTTON_checkPressed(&s_secondsIncrement) && !buttons_pressed_flags.flags.secondsInc_flag)
    277e:	ce 01       	movw	r24, r28
    2780:	8b 5f       	subi	r24, 0xFB	; 251
    2782:	9e 4f       	sbci	r25, 0xFE	; 254
    2784:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    2788:	88 23       	and	r24, r24
    278a:	89 f1       	breq	.+98     	; 0x27ee <main+0x12de>
    278c:	80 91 9b 00 	lds	r24, 0x009B
    2790:	81 70       	andi	r24, 0x01	; 1
    2792:	88 23       	and	r24, r24
    2794:	61 f5       	brne	.+88     	; 0x27ee <main+0x12de>
			{
				buttons_pressed_flags.flags.secondsInc_flag = 1; /* indicates that button is still pressed */
    2796:	80 91 9b 00 	lds	r24, 0x009B
    279a:	81 60       	ori	r24, 0x01	; 1
    279c:	80 93 9b 00 	sts	0x009B, r24
				if(seconds_counter<59)
    27a0:	80 91 95 00 	lds	r24, 0x0095
    27a4:	8b 33       	cpi	r24, 0x3B	; 59
    27a6:	30 f4       	brcc	.+12     	; 0x27b4 <main+0x12a4>
				{
					seconds_counter++; /* increment seconds by 1 */
    27a8:	80 91 95 00 	lds	r24, 0x0095
    27ac:	8f 5f       	subi	r24, 0xFF	; 255
    27ae:	80 93 95 00 	sts	0x0095, r24
    27b2:	1d c0       	rjmp	.+58     	; 0x27ee <main+0x12de>
				}
				else
				{
					seconds_counter = 0; /* reset seconds counter */
    27b4:	10 92 95 00 	sts	0x0095, r1
					if(minutes_counter<59)
    27b8:	80 91 96 00 	lds	r24, 0x0096
    27bc:	8b 33       	cpi	r24, 0x3B	; 59
    27be:	30 f4       	brcc	.+12     	; 0x27cc <main+0x12bc>
					{
						minutes_counter++; /* increment minutes by 1 */
    27c0:	80 91 96 00 	lds	r24, 0x0096
    27c4:	8f 5f       	subi	r24, 0xFF	; 255
    27c6:	80 93 96 00 	sts	0x0096, r24
    27ca:	11 c0       	rjmp	.+34     	; 0x27ee <main+0x12de>
					}
					else
					{
						minutes_counter = 0; /* reset minutes counter */
    27cc:	10 92 96 00 	sts	0x0096, r1
						if(hours_counter<99)
    27d0:	80 91 97 00 	lds	r24, 0x0097
    27d4:	83 36       	cpi	r24, 0x63	; 99
    27d6:	58 f4       	brcc	.+22     	; 0x27ee <main+0x12de>
						{
							hours_counter++; /* increment hours by 1 */
    27d8:	80 91 97 00 	lds	r24, 0x0097
    27dc:	8f 5f       	subi	r24, 0xFF	; 255
    27de:	80 93 97 00 	sts	0x0097, r24
    27e2:	05 c0       	rjmp	.+10     	; 0x27ee <main+0x12de>

			}
		}
		else
		{
			buttons_pressed_flags.flags.secondsInc_flag=0; /* indicate that button is released */
    27e4:	80 91 9b 00 	lds	r24, 0x009B
    27e8:	8e 7f       	andi	r24, 0xFE	; 254
    27ea:	80 93 9b 00 	sts	0x009B, r24
		}

		/* Decrement seconds */
		if(BUTTON_checkPressed(&s_secondsDecrement))
    27ee:	ce 01       	movw	r24, r28
    27f0:	88 5f       	subi	r24, 0xF8	; 248
    27f2:	9e 4f       	sbci	r25, 0xFE	; 254
    27f4:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    27f8:	88 23       	and	r24, r24
    27fa:	09 f4       	brne	.+2      	; 0x27fe <main+0x12ee>
    27fc:	eb c0       	rjmp	.+470    	; 0x29d4 <main+0x14c4>
    27fe:	fe 01       	movw	r30, r28
    2800:	e9 56       	subi	r30, 0x69	; 105
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	a0 ef       	ldi	r26, 0xF0	; 240
    280a:	b1 e4       	ldi	r27, 0x41	; 65
    280c:	80 83       	st	Z, r24
    280e:	91 83       	std	Z+1, r25	; 0x01
    2810:	a2 83       	std	Z+2, r26	; 0x02
    2812:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2814:	8e 01       	movw	r16, r28
    2816:	0d 56       	subi	r16, 0x6D	; 109
    2818:	1f 4f       	sbci	r17, 0xFF	; 255
    281a:	fe 01       	movw	r30, r28
    281c:	e9 56       	subi	r30, 0x69	; 105
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	4a e7       	ldi	r20, 0x7A	; 122
    282e:	55 e4       	ldi	r21, 0x45	; 69
    2830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	f8 01       	movw	r30, r16
    283a:	80 83       	st	Z, r24
    283c:	91 83       	std	Z+1, r25	; 0x01
    283e:	a2 83       	std	Z+2, r26	; 0x02
    2840:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2842:	fe 01       	movw	r30, r28
    2844:	ed 56       	subi	r30, 0x6D	; 109
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	60 81       	ld	r22, Z
    284a:	71 81       	ldd	r23, Z+1	; 0x01
    284c:	82 81       	ldd	r24, Z+2	; 0x02
    284e:	93 81       	ldd	r25, Z+3	; 0x03
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e8       	ldi	r20, 0x80	; 128
    2856:	5f e3       	ldi	r21, 0x3F	; 63
    2858:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    285c:	88 23       	and	r24, r24
    285e:	44 f4       	brge	.+16     	; 0x2870 <main+0x1360>
		__ticks = 1;
    2860:	fe 01       	movw	r30, r28
    2862:	ef 56       	subi	r30, 0x6F	; 111
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	80 83       	st	Z, r24
    286e:	64 c0       	rjmp	.+200    	; 0x2938 <main+0x1428>
	else if (__tmp > 65535)
    2870:	fe 01       	movw	r30, r28
    2872:	ed 56       	subi	r30, 0x6D	; 109
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	60 81       	ld	r22, Z
    2878:	71 81       	ldd	r23, Z+1	; 0x01
    287a:	82 81       	ldd	r24, Z+2	; 0x02
    287c:	93 81       	ldd	r25, Z+3	; 0x03
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	3f ef       	ldi	r19, 0xFF	; 255
    2882:	4f e7       	ldi	r20, 0x7F	; 127
    2884:	57 e4       	ldi	r21, 0x47	; 71
    2886:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    288a:	18 16       	cp	r1, r24
    288c:	0c f0       	brlt	.+2      	; 0x2890 <main+0x1380>
    288e:	43 c0       	rjmp	.+134    	; 0x2916 <main+0x1406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2890:	fe 01       	movw	r30, r28
    2892:	e9 56       	subi	r30, 0x69	; 105
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	60 81       	ld	r22, Z
    2898:	71 81       	ldd	r23, Z+1	; 0x01
    289a:	82 81       	ldd	r24, Z+2	; 0x02
    289c:	93 81       	ldd	r25, Z+3	; 0x03
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e2       	ldi	r20, 0x20	; 32
    28a4:	51 e4       	ldi	r21, 0x41	; 65
    28a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	8e 01       	movw	r16, r28
    28b0:	0f 56       	subi	r16, 0x6F	; 111
    28b2:	1f 4f       	sbci	r17, 0xFF	; 255
    28b4:	bc 01       	movw	r22, r24
    28b6:	cd 01       	movw	r24, r26
    28b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	f8 01       	movw	r30, r16
    28c2:	91 83       	std	Z+1, r25	; 0x01
    28c4:	80 83       	st	Z, r24
    28c6:	1f c0       	rjmp	.+62     	; 0x2906 <main+0x13f6>
    28c8:	fe 01       	movw	r30, r28
    28ca:	e1 57       	subi	r30, 0x71	; 113
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	80 e9       	ldi	r24, 0x90	; 144
    28d0:	91 e0       	ldi	r25, 0x01	; 1
    28d2:	91 83       	std	Z+1, r25	; 0x01
    28d4:	80 83       	st	Z, r24
    28d6:	fe 01       	movw	r30, r28
    28d8:	e1 57       	subi	r30, 0x71	; 113
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	80 81       	ld	r24, Z
    28de:	91 81       	ldd	r25, Z+1	; 0x01
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <main+0x13d0>
    28e4:	fe 01       	movw	r30, r28
    28e6:	e1 57       	subi	r30, 0x71	; 113
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	91 83       	std	Z+1, r25	; 0x01
    28ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ee:	de 01       	movw	r26, r28
    28f0:	af 56       	subi	r26, 0x6F	; 111
    28f2:	bf 4f       	sbci	r27, 0xFF	; 255
    28f4:	fe 01       	movw	r30, r28
    28f6:	ef 56       	subi	r30, 0x6F	; 111
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	80 81       	ld	r24, Z
    28fc:	91 81       	ldd	r25, Z+1	; 0x01
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	11 96       	adiw	r26, 0x01	; 1
    2902:	9c 93       	st	X, r25
    2904:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2906:	fe 01       	movw	r30, r28
    2908:	ef 56       	subi	r30, 0x6F	; 111
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	80 81       	ld	r24, Z
    290e:	91 81       	ldd	r25, Z+1	; 0x01
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	d1 f6       	brne	.-76     	; 0x28c8 <main+0x13b8>
    2914:	27 c0       	rjmp	.+78     	; 0x2964 <main+0x1454>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2916:	8e 01       	movw	r16, r28
    2918:	0f 56       	subi	r16, 0x6F	; 111
    291a:	1f 4f       	sbci	r17, 0xFF	; 255
    291c:	fe 01       	movw	r30, r28
    291e:	ed 56       	subi	r30, 0x6D	; 109
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	60 81       	ld	r22, Z
    2924:	71 81       	ldd	r23, Z+1	; 0x01
    2926:	82 81       	ldd	r24, Z+2	; 0x02
    2928:	93 81       	ldd	r25, Z+3	; 0x03
    292a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	f8 01       	movw	r30, r16
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	80 83       	st	Z, r24
    2938:	de 01       	movw	r26, r28
    293a:	a3 57       	subi	r26, 0x73	; 115
    293c:	bf 4f       	sbci	r27, 0xFF	; 255
    293e:	fe 01       	movw	r30, r28
    2940:	ef 56       	subi	r30, 0x6F	; 111
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	80 81       	ld	r24, Z
    2946:	91 81       	ldd	r25, Z+1	; 0x01
    2948:	8d 93       	st	X+, r24
    294a:	9c 93       	st	X, r25
    294c:	fe 01       	movw	r30, r28
    294e:	e3 57       	subi	r30, 0x73	; 115
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	80 81       	ld	r24, Z
    2954:	91 81       	ldd	r25, Z+1	; 0x01
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	f1 f7       	brne	.-4      	; 0x2956 <main+0x1446>
    295a:	fe 01       	movw	r30, r28
    295c:	e3 57       	subi	r30, 0x73	; 115
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	91 83       	std	Z+1, r25	; 0x01
    2962:	80 83       	st	Z, r24
		{
			_delay_ms(BUTTON_DEBOUNCE_PERIOD); /* delay to overcome debounce effect */
			if(BUTTON_checkPressed(&s_secondsDecrement) && !buttons_pressed_flags.flags.secondsDec_flag)
    2964:	ce 01       	movw	r24, r28
    2966:	88 5f       	subi	r24, 0xF8	; 248
    2968:	9e 4f       	sbci	r25, 0xFE	; 254
    296a:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    296e:	88 23       	and	r24, r24
    2970:	b1 f1       	breq	.+108    	; 0x29de <main+0x14ce>
    2972:	80 91 9b 00 	lds	r24, 0x009B
    2976:	82 70       	andi	r24, 0x02	; 2
    2978:	88 23       	and	r24, r24
    297a:	89 f5       	brne	.+98     	; 0x29de <main+0x14ce>
			{
				buttons_pressed_flags.flags.secondsDec_flag = 1; /* indicates that button is still pressed */
    297c:	80 91 9b 00 	lds	r24, 0x009B
    2980:	82 60       	ori	r24, 0x02	; 2
    2982:	80 93 9b 00 	sts	0x009B, r24
				if(seconds_counter>0) /* if seconds counter is more than 0 */
    2986:	80 91 95 00 	lds	r24, 0x0095
    298a:	88 23       	and	r24, r24
    298c:	31 f0       	breq	.+12     	; 0x299a <main+0x148a>
				{
					seconds_counter--; /* decrement time by 1 second */
    298e:	80 91 95 00 	lds	r24, 0x0095
    2992:	81 50       	subi	r24, 0x01	; 1
    2994:	80 93 95 00 	sts	0x0095, r24
    2998:	22 c0       	rjmp	.+68     	; 0x29de <main+0x14ce>
				}
				else
				{
					if(minutes_counter>0) /* if minutes counter is more than 0 */
    299a:	80 91 96 00 	lds	r24, 0x0096
    299e:	88 23       	and	r24, r24
    29a0:	49 f0       	breq	.+18     	; 0x29b4 <main+0x14a4>
					{
						minutes_counter--; /* decrement time by 1 minute */
    29a2:	80 91 96 00 	lds	r24, 0x0096
    29a6:	81 50       	subi	r24, 0x01	; 1
    29a8:	80 93 96 00 	sts	0x0096, r24
						seconds_counter = 59; /* recount from 59 seconds */
    29ac:	8b e3       	ldi	r24, 0x3B	; 59
    29ae:	80 93 95 00 	sts	0x0095, r24
    29b2:	15 c0       	rjmp	.+42     	; 0x29de <main+0x14ce>
					}
					else
					{
						if(hours_counter>0) /* if hours counter is more than 0 */
    29b4:	80 91 97 00 	lds	r24, 0x0097
    29b8:	88 23       	and	r24, r24
    29ba:	89 f0       	breq	.+34     	; 0x29de <main+0x14ce>
						{
							hours_counter--; /* decrement time by 1 hour */
    29bc:	80 91 97 00 	lds	r24, 0x0097
    29c0:	81 50       	subi	r24, 0x01	; 1
    29c2:	80 93 97 00 	sts	0x0097, r24
							minutes_counter = 59; /* recount from 59 minutes */
    29c6:	8b e3       	ldi	r24, 0x3B	; 59
    29c8:	80 93 96 00 	sts	0x0096, r24
							seconds_counter = 59; /* recount from 59 seconds */
    29cc:	8b e3       	ldi	r24, 0x3B	; 59
    29ce:	80 93 95 00 	sts	0x0095, r24
    29d2:	05 c0       	rjmp	.+10     	; 0x29de <main+0x14ce>
			} /* end of internal checking button clicked */

		}
		else
		{
			buttons_pressed_flags.flags.secondsDec_flag=0; /* indicate that button is released */
    29d4:	80 91 9b 00 	lds	r24, 0x009B
    29d8:	8d 7f       	andi	r24, 0xFD	; 253
    29da:	80 93 9b 00 	sts	0x009B, r24
		}

		/* increment minutes */
		if(BUTTON_checkPressed(&s_minutesIncrement))
    29de:	ce 01       	movw	r24, r28
    29e0:	81 50       	subi	r24, 0x01	; 1
    29e2:	9f 4f       	sbci	r25, 0xFF	; 255
    29e4:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    29e8:	88 23       	and	r24, r24
    29ea:	09 f4       	brne	.+2      	; 0x29ee <main+0x14de>
    29ec:	da c0       	rjmp	.+436    	; 0x2ba2 <main+0x1692>
    29ee:	fe 01       	movw	r30, r28
    29f0:	e7 57       	subi	r30, 0x77	; 119
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	a0 ef       	ldi	r26, 0xF0	; 240
    29fa:	b1 e4       	ldi	r27, 0x41	; 65
    29fc:	80 83       	st	Z, r24
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	a2 83       	std	Z+2, r26	; 0x02
    2a02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a04:	8e 01       	movw	r16, r28
    2a06:	0b 57       	subi	r16, 0x7B	; 123
    2a08:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e7 57       	subi	r30, 0x77	; 119
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	60 81       	ld	r22, Z
    2a12:	71 81       	ldd	r23, Z+1	; 0x01
    2a14:	82 81       	ldd	r24, Z+2	; 0x02
    2a16:	93 81       	ldd	r25, Z+3	; 0x03
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	4a e7       	ldi	r20, 0x7A	; 122
    2a1e:	55 e4       	ldi	r21, 0x45	; 69
    2a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	f8 01       	movw	r30, r16
    2a2a:	80 83       	st	Z, r24
    2a2c:	91 83       	std	Z+1, r25	; 0x01
    2a2e:	a2 83       	std	Z+2, r26	; 0x02
    2a30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a32:	fe 01       	movw	r30, r28
    2a34:	eb 57       	subi	r30, 0x7B	; 123
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	60 81       	ld	r22, Z
    2a3a:	71 81       	ldd	r23, Z+1	; 0x01
    2a3c:	82 81       	ldd	r24, Z+2	; 0x02
    2a3e:	93 81       	ldd	r25, Z+3	; 0x03
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e8       	ldi	r20, 0x80	; 128
    2a46:	5f e3       	ldi	r21, 0x3F	; 63
    2a48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a4c:	88 23       	and	r24, r24
    2a4e:	44 f4       	brge	.+16     	; 0x2a60 <main+0x1550>
		__ticks = 1;
    2a50:	fe 01       	movw	r30, r28
    2a52:	ed 57       	subi	r30, 0x7D	; 125
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	91 83       	std	Z+1, r25	; 0x01
    2a5c:	80 83       	st	Z, r24
    2a5e:	64 c0       	rjmp	.+200    	; 0x2b28 <main+0x1618>
	else if (__tmp > 65535)
    2a60:	fe 01       	movw	r30, r28
    2a62:	eb 57       	subi	r30, 0x7B	; 123
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	60 81       	ld	r22, Z
    2a68:	71 81       	ldd	r23, Z+1	; 0x01
    2a6a:	82 81       	ldd	r24, Z+2	; 0x02
    2a6c:	93 81       	ldd	r25, Z+3	; 0x03
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	3f ef       	ldi	r19, 0xFF	; 255
    2a72:	4f e7       	ldi	r20, 0x7F	; 127
    2a74:	57 e4       	ldi	r21, 0x47	; 71
    2a76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a7a:	18 16       	cp	r1, r24
    2a7c:	0c f0       	brlt	.+2      	; 0x2a80 <main+0x1570>
    2a7e:	43 c0       	rjmp	.+134    	; 0x2b06 <main+0x15f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a80:	fe 01       	movw	r30, r28
    2a82:	e7 57       	subi	r30, 0x77	; 119
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	60 81       	ld	r22, Z
    2a88:	71 81       	ldd	r23, Z+1	; 0x01
    2a8a:	82 81       	ldd	r24, Z+2	; 0x02
    2a8c:	93 81       	ldd	r25, Z+3	; 0x03
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e2       	ldi	r20, 0x20	; 32
    2a94:	51 e4       	ldi	r21, 0x41	; 65
    2a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	8e 01       	movw	r16, r28
    2aa0:	0d 57       	subi	r16, 0x7D	; 125
    2aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa4:	bc 01       	movw	r22, r24
    2aa6:	cd 01       	movw	r24, r26
    2aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	f8 01       	movw	r30, r16
    2ab2:	91 83       	std	Z+1, r25	; 0x01
    2ab4:	80 83       	st	Z, r24
    2ab6:	1f c0       	rjmp	.+62     	; 0x2af6 <main+0x15e6>
    2ab8:	fe 01       	movw	r30, r28
    2aba:	ef 57       	subi	r30, 0x7F	; 127
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	80 e9       	ldi	r24, 0x90	; 144
    2ac0:	91 e0       	ldi	r25, 0x01	; 1
    2ac2:	91 83       	std	Z+1, r25	; 0x01
    2ac4:	80 83       	st	Z, r24
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	ef 57       	subi	r30, 0x7F	; 127
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	80 81       	ld	r24, Z
    2ace:	91 81       	ldd	r25, Z+1	; 0x01
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	f1 f7       	brne	.-4      	; 0x2ad0 <main+0x15c0>
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	ef 57       	subi	r30, 0x7F	; 127
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	91 83       	std	Z+1, r25	; 0x01
    2adc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ade:	de 01       	movw	r26, r28
    2ae0:	ad 57       	subi	r26, 0x7D	; 125
    2ae2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	ed 57       	subi	r30, 0x7D	; 125
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	80 81       	ld	r24, Z
    2aec:	91 81       	ldd	r25, Z+1	; 0x01
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	11 96       	adiw	r26, 0x01	; 1
    2af2:	9c 93       	st	X, r25
    2af4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af6:	fe 01       	movw	r30, r28
    2af8:	ed 57       	subi	r30, 0x7D	; 125
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	80 81       	ld	r24, Z
    2afe:	91 81       	ldd	r25, Z+1	; 0x01
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	d1 f6       	brne	.-76     	; 0x2ab8 <main+0x15a8>
    2b04:	27 c0       	rjmp	.+78     	; 0x2b54 <main+0x1644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b06:	8e 01       	movw	r16, r28
    2b08:	0d 57       	subi	r16, 0x7D	; 125
    2b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	eb 57       	subi	r30, 0x7B	; 123
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	60 81       	ld	r22, Z
    2b14:	71 81       	ldd	r23, Z+1	; 0x01
    2b16:	82 81       	ldd	r24, Z+2	; 0x02
    2b18:	93 81       	ldd	r25, Z+3	; 0x03
    2b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	f8 01       	movw	r30, r16
    2b24:	91 83       	std	Z+1, r25	; 0x01
    2b26:	80 83       	st	Z, r24
    2b28:	de 01       	movw	r26, r28
    2b2a:	a1 58       	subi	r26, 0x81	; 129
    2b2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b2e:	fe 01       	movw	r30, r28
    2b30:	ed 57       	subi	r30, 0x7D	; 125
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	80 81       	ld	r24, Z
    2b36:	91 81       	ldd	r25, Z+1	; 0x01
    2b38:	8d 93       	st	X+, r24
    2b3a:	9c 93       	st	X, r25
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e1 58       	subi	r30, 0x81	; 129
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 81       	ld	r24, Z
    2b44:	91 81       	ldd	r25, Z+1	; 0x01
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <main+0x1636>
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e1 58       	subi	r30, 0x81	; 129
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	91 83       	std	Z+1, r25	; 0x01
    2b52:	80 83       	st	Z, r24
		{
			_delay_ms(BUTTON_DEBOUNCE_PERIOD); /* delay to overcome debounce effect */
			if(BUTTON_checkPressed(&s_minutesIncrement) && !buttons_pressed_flags.flags.minutesInc_flag)
    2b54:	ce 01       	movw	r24, r28
    2b56:	81 50       	subi	r24, 0x01	; 1
    2b58:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5a:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    2b5e:	88 23       	and	r24, r24
    2b60:	29 f1       	breq	.+74     	; 0x2bac <main+0x169c>
    2b62:	80 91 9a 00 	lds	r24, 0x009A
    2b66:	80 74       	andi	r24, 0x40	; 64
    2b68:	88 23       	and	r24, r24
    2b6a:	01 f5       	brne	.+64     	; 0x2bac <main+0x169c>
			{
				buttons_pressed_flags.flags.minutesInc_flag = 1; /* indicates that button is still pressed */
    2b6c:	80 91 9a 00 	lds	r24, 0x009A
    2b70:	80 64       	ori	r24, 0x40	; 64
    2b72:	80 93 9a 00 	sts	0x009A, r24
				if(minutes_counter<59)
    2b76:	80 91 96 00 	lds	r24, 0x0096
    2b7a:	8b 33       	cpi	r24, 0x3B	; 59
    2b7c:	30 f4       	brcc	.+12     	; 0x2b8a <main+0x167a>
					{
						minutes_counter++; /* increment minutes by 1 */
    2b7e:	80 91 96 00 	lds	r24, 0x0096
    2b82:	8f 5f       	subi	r24, 0xFF	; 255
    2b84:	80 93 96 00 	sts	0x0096, r24
    2b88:	11 c0       	rjmp	.+34     	; 0x2bac <main+0x169c>
					}
					else
					{
						minutes_counter = 0; /* reset minutes counter */
    2b8a:	10 92 96 00 	sts	0x0096, r1
						if(hours_counter<99)
    2b8e:	80 91 97 00 	lds	r24, 0x0097
    2b92:	83 36       	cpi	r24, 0x63	; 99
    2b94:	58 f4       	brcc	.+22     	; 0x2bac <main+0x169c>
						{
							hours_counter++; /* increment hours by 1 */
    2b96:	80 91 97 00 	lds	r24, 0x0097
    2b9a:	8f 5f       	subi	r24, 0xFF	; 255
    2b9c:	80 93 97 00 	sts	0x0097, r24
    2ba0:	05 c0       	rjmp	.+10     	; 0x2bac <main+0x169c>
					}
			}
		}
		else
		{
			buttons_pressed_flags.flags.minutesInc_flag=0; /* indicate that button is released */
    2ba2:	80 91 9a 00 	lds	r24, 0x009A
    2ba6:	8f 7b       	andi	r24, 0xBF	; 191
    2ba8:	80 93 9a 00 	sts	0x009A, r24
		}

		/* Decrement minutes */
		if(BUTTON_checkPressed(&s_minutesDecrement))
    2bac:	ce 01       	movw	r24, r28
    2bae:	8e 5f       	subi	r24, 0xFE	; 254
    2bb0:	9e 4f       	sbci	r25, 0xFE	; 254
    2bb2:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    2bb6:	88 23       	and	r24, r24
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <main+0x16ac>
    2bba:	e1 c0       	rjmp	.+450    	; 0x2d7e <main+0x186e>
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e5 58       	subi	r30, 0x85	; 133
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	a0 ef       	ldi	r26, 0xF0	; 240
    2bc8:	b1 e4       	ldi	r27, 0x41	; 65
    2bca:	80 83       	st	Z, r24
    2bcc:	91 83       	std	Z+1, r25	; 0x01
    2bce:	a2 83       	std	Z+2, r26	; 0x02
    2bd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd2:	8e 01       	movw	r16, r28
    2bd4:	09 58       	subi	r16, 0x89	; 137
    2bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e5 58       	subi	r30, 0x85	; 133
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	60 81       	ld	r22, Z
    2be0:	71 81       	ldd	r23, Z+1	; 0x01
    2be2:	82 81       	ldd	r24, Z+2	; 0x02
    2be4:	93 81       	ldd	r25, Z+3	; 0x03
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	4a e7       	ldi	r20, 0x7A	; 122
    2bec:	55 e4       	ldi	r21, 0x45	; 69
    2bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	f8 01       	movw	r30, r16
    2bf8:	80 83       	st	Z, r24
    2bfa:	91 83       	std	Z+1, r25	; 0x01
    2bfc:	a2 83       	std	Z+2, r26	; 0x02
    2bfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c00:	fe 01       	movw	r30, r28
    2c02:	e9 58       	subi	r30, 0x89	; 137
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	60 81       	ld	r22, Z
    2c08:	71 81       	ldd	r23, Z+1	; 0x01
    2c0a:	82 81       	ldd	r24, Z+2	; 0x02
    2c0c:	93 81       	ldd	r25, Z+3	; 0x03
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e8       	ldi	r20, 0x80	; 128
    2c14:	5f e3       	ldi	r21, 0x3F	; 63
    2c16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c1a:	88 23       	and	r24, r24
    2c1c:	44 f4       	brge	.+16     	; 0x2c2e <main+0x171e>
		__ticks = 1;
    2c1e:	fe 01       	movw	r30, r28
    2c20:	eb 58       	subi	r30, 0x8B	; 139
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	91 83       	std	Z+1, r25	; 0x01
    2c2a:	80 83       	st	Z, r24
    2c2c:	64 c0       	rjmp	.+200    	; 0x2cf6 <main+0x17e6>
	else if (__tmp > 65535)
    2c2e:	fe 01       	movw	r30, r28
    2c30:	e9 58       	subi	r30, 0x89	; 137
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	60 81       	ld	r22, Z
    2c36:	71 81       	ldd	r23, Z+1	; 0x01
    2c38:	82 81       	ldd	r24, Z+2	; 0x02
    2c3a:	93 81       	ldd	r25, Z+3	; 0x03
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	3f ef       	ldi	r19, 0xFF	; 255
    2c40:	4f e7       	ldi	r20, 0x7F	; 127
    2c42:	57 e4       	ldi	r21, 0x47	; 71
    2c44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c48:	18 16       	cp	r1, r24
    2c4a:	0c f0       	brlt	.+2      	; 0x2c4e <main+0x173e>
    2c4c:	43 c0       	rjmp	.+134    	; 0x2cd4 <main+0x17c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e5 58       	subi	r30, 0x85	; 133
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	60 81       	ld	r22, Z
    2c56:	71 81       	ldd	r23, Z+1	; 0x01
    2c58:	82 81       	ldd	r24, Z+2	; 0x02
    2c5a:	93 81       	ldd	r25, Z+3	; 0x03
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e2       	ldi	r20, 0x20	; 32
    2c62:	51 e4       	ldi	r21, 0x41	; 65
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	8e 01       	movw	r16, r28
    2c6e:	0b 58       	subi	r16, 0x8B	; 139
    2c70:	1f 4f       	sbci	r17, 0xFF	; 255
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	f8 01       	movw	r30, r16
    2c80:	91 83       	std	Z+1, r25	; 0x01
    2c82:	80 83       	st	Z, r24
    2c84:	1f c0       	rjmp	.+62     	; 0x2cc4 <main+0x17b4>
    2c86:	fe 01       	movw	r30, r28
    2c88:	ed 58       	subi	r30, 0x8D	; 141
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	80 e9       	ldi	r24, 0x90	; 144
    2c8e:	91 e0       	ldi	r25, 0x01	; 1
    2c90:	91 83       	std	Z+1, r25	; 0x01
    2c92:	80 83       	st	Z, r24
    2c94:	fe 01       	movw	r30, r28
    2c96:	ed 58       	subi	r30, 0x8D	; 141
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 81       	ld	r24, Z
    2c9c:	91 81       	ldd	r25, Z+1	; 0x01
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	f1 f7       	brne	.-4      	; 0x2c9e <main+0x178e>
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	ed 58       	subi	r30, 0x8D	; 141
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	91 83       	std	Z+1, r25	; 0x01
    2caa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cac:	de 01       	movw	r26, r28
    2cae:	ab 58       	subi	r26, 0x8B	; 139
    2cb0:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	eb 58       	subi	r30, 0x8B	; 139
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	80 81       	ld	r24, Z
    2cba:	91 81       	ldd	r25, Z+1	; 0x01
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	11 96       	adiw	r26, 0x01	; 1
    2cc0:	9c 93       	st	X, r25
    2cc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	eb 58       	subi	r30, 0x8B	; 139
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	80 81       	ld	r24, Z
    2ccc:	91 81       	ldd	r25, Z+1	; 0x01
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	d1 f6       	brne	.-76     	; 0x2c86 <main+0x1776>
    2cd2:	27 c0       	rjmp	.+78     	; 0x2d22 <main+0x1812>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd4:	8e 01       	movw	r16, r28
    2cd6:	0b 58       	subi	r16, 0x8B	; 139
    2cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cda:	fe 01       	movw	r30, r28
    2cdc:	e9 58       	subi	r30, 0x89	; 137
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	60 81       	ld	r22, Z
    2ce2:	71 81       	ldd	r23, Z+1	; 0x01
    2ce4:	82 81       	ldd	r24, Z+2	; 0x02
    2ce6:	93 81       	ldd	r25, Z+3	; 0x03
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	91 83       	std	Z+1, r25	; 0x01
    2cf4:	80 83       	st	Z, r24
    2cf6:	de 01       	movw	r26, r28
    2cf8:	af 58       	subi	r26, 0x8F	; 143
    2cfa:	bf 4f       	sbci	r27, 0xFF	; 255
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	eb 58       	subi	r30, 0x8B	; 139
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	80 81       	ld	r24, Z
    2d04:	91 81       	ldd	r25, Z+1	; 0x01
    2d06:	8d 93       	st	X+, r24
    2d08:	9c 93       	st	X, r25
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	ef 58       	subi	r30, 0x8F	; 143
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	80 81       	ld	r24, Z
    2d12:	91 81       	ldd	r25, Z+1	; 0x01
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	f1 f7       	brne	.-4      	; 0x2d14 <main+0x1804>
    2d18:	fe 01       	movw	r30, r28
    2d1a:	ef 58       	subi	r30, 0x8F	; 143
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	91 83       	std	Z+1, r25	; 0x01
    2d20:	80 83       	st	Z, r24
		{
			_delay_ms(BUTTON_DEBOUNCE_PERIOD); /* delay to overcome debounce effect */
			if(BUTTON_checkPressed(&s_minutesDecrement) && !buttons_pressed_flags.flags.minutesDec_flag)
    2d22:	ce 01       	movw	r24, r28
    2d24:	8e 5f       	subi	r24, 0xFE	; 254
    2d26:	9e 4f       	sbci	r25, 0xFE	; 254
    2d28:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    2d2c:	88 23       	and	r24, r24
    2d2e:	61 f1       	breq	.+88     	; 0x2d88 <main+0x1878>
    2d30:	80 91 9a 00 	lds	r24, 0x009A
    2d34:	80 78       	andi	r24, 0x80	; 128
    2d36:	88 23       	and	r24, r24
    2d38:	39 f5       	brne	.+78     	; 0x2d88 <main+0x1878>
			{
				buttons_pressed_flags.flags.minutesDec_flag = 1; /* indicates that button is still pressed */
    2d3a:	80 91 9a 00 	lds	r24, 0x009A
    2d3e:	80 68       	ori	r24, 0x80	; 128
    2d40:	80 93 9a 00 	sts	0x009A, r24

					if(minutes_counter>0) /* if minutes counter is more than 0 */
    2d44:	80 91 96 00 	lds	r24, 0x0096
    2d48:	88 23       	and	r24, r24
    2d4a:	49 f0       	breq	.+18     	; 0x2d5e <main+0x184e>
					{
						minutes_counter--; /* decrement time by 1 minute */
    2d4c:	80 91 96 00 	lds	r24, 0x0096
    2d50:	81 50       	subi	r24, 0x01	; 1
    2d52:	80 93 96 00 	sts	0x0096, r24
						seconds_counter = 59; /* recount from 59 seconds */
    2d56:	8b e3       	ldi	r24, 0x3B	; 59
    2d58:	80 93 95 00 	sts	0x0095, r24
    2d5c:	15 c0       	rjmp	.+42     	; 0x2d88 <main+0x1878>
					}
					else
					{
						if(hours_counter>0) /* if hours counter is more than 0 */
    2d5e:	80 91 97 00 	lds	r24, 0x0097
    2d62:	88 23       	and	r24, r24
    2d64:	89 f0       	breq	.+34     	; 0x2d88 <main+0x1878>
						{
							hours_counter--; /* decrement time by 1 hour */
    2d66:	80 91 97 00 	lds	r24, 0x0097
    2d6a:	81 50       	subi	r24, 0x01	; 1
    2d6c:	80 93 97 00 	sts	0x0097, r24
							minutes_counter = 59; /* recount from 59 minutes */
    2d70:	8b e3       	ldi	r24, 0x3B	; 59
    2d72:	80 93 96 00 	sts	0x0096, r24
							seconds_counter = 59; /* recount from 59 seconds */
    2d76:	8b e3       	ldi	r24, 0x3B	; 59
    2d78:	80 93 95 00 	sts	0x0095, r24
    2d7c:	05 c0       	rjmp	.+10     	; 0x2d88 <main+0x1878>
					} /* end of checking on hours decrement */
				} /* end of checking on minutes decrement */
		}
		else
		{
			buttons_pressed_flags.flags.minutesDec_flag=0; /* indicate that button is released */
    2d7e:	80 91 9a 00 	lds	r24, 0x009A
    2d82:	8f 77       	andi	r24, 0x7F	; 127
    2d84:	80 93 9a 00 	sts	0x009A, r24
		}

		/* increment hours */
		if(BUTTON_checkPressed(&s_hoursIncrement))
    2d88:	ce 01       	movw	r24, r28
    2d8a:	87 50       	subi	r24, 0x07	; 7
    2d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8e:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    2d92:	88 23       	and	r24, r24
    2d94:	09 f4       	brne	.+2      	; 0x2d98 <main+0x1888>
    2d96:	ce c0       	rjmp	.+412    	; 0x2f34 <main+0x1a24>
    2d98:	fe 01       	movw	r30, r28
    2d9a:	e3 59       	subi	r30, 0x93	; 147
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	a0 ef       	ldi	r26, 0xF0	; 240
    2da4:	b1 e4       	ldi	r27, 0x41	; 65
    2da6:	80 83       	st	Z, r24
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	a2 83       	std	Z+2, r26	; 0x02
    2dac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dae:	8e 01       	movw	r16, r28
    2db0:	07 59       	subi	r16, 0x97	; 151
    2db2:	1f 4f       	sbci	r17, 0xFF	; 255
    2db4:	fe 01       	movw	r30, r28
    2db6:	e3 59       	subi	r30, 0x93	; 147
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	60 81       	ld	r22, Z
    2dbc:	71 81       	ldd	r23, Z+1	; 0x01
    2dbe:	82 81       	ldd	r24, Z+2	; 0x02
    2dc0:	93 81       	ldd	r25, Z+3	; 0x03
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	4a e7       	ldi	r20, 0x7A	; 122
    2dc8:	55 e4       	ldi	r21, 0x45	; 69
    2dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	f8 01       	movw	r30, r16
    2dd4:	80 83       	st	Z, r24
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	a2 83       	std	Z+2, r26	; 0x02
    2dda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ddc:	fe 01       	movw	r30, r28
    2dde:	e7 59       	subi	r30, 0x97	; 151
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	60 81       	ld	r22, Z
    2de4:	71 81       	ldd	r23, Z+1	; 0x01
    2de6:	82 81       	ldd	r24, Z+2	; 0x02
    2de8:	93 81       	ldd	r25, Z+3	; 0x03
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	40 e8       	ldi	r20, 0x80	; 128
    2df0:	5f e3       	ldi	r21, 0x3F	; 63
    2df2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2df6:	88 23       	and	r24, r24
    2df8:	44 f4       	brge	.+16     	; 0x2e0a <main+0x18fa>
		__ticks = 1;
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	e9 59       	subi	r30, 0x99	; 153
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	80 83       	st	Z, r24
    2e08:	64 c0       	rjmp	.+200    	; 0x2ed2 <main+0x19c2>
	else if (__tmp > 65535)
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e7 59       	subi	r30, 0x97	; 151
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	60 81       	ld	r22, Z
    2e12:	71 81       	ldd	r23, Z+1	; 0x01
    2e14:	82 81       	ldd	r24, Z+2	; 0x02
    2e16:	93 81       	ldd	r25, Z+3	; 0x03
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	3f ef       	ldi	r19, 0xFF	; 255
    2e1c:	4f e7       	ldi	r20, 0x7F	; 127
    2e1e:	57 e4       	ldi	r21, 0x47	; 71
    2e20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e24:	18 16       	cp	r1, r24
    2e26:	0c f0       	brlt	.+2      	; 0x2e2a <main+0x191a>
    2e28:	43 c0       	rjmp	.+134    	; 0x2eb0 <main+0x19a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	e3 59       	subi	r30, 0x93	; 147
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	60 81       	ld	r22, Z
    2e32:	71 81       	ldd	r23, Z+1	; 0x01
    2e34:	82 81       	ldd	r24, Z+2	; 0x02
    2e36:	93 81       	ldd	r25, Z+3	; 0x03
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	40 e2       	ldi	r20, 0x20	; 32
    2e3e:	51 e4       	ldi	r21, 0x41	; 65
    2e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	8e 01       	movw	r16, r28
    2e4a:	09 59       	subi	r16, 0x99	; 153
    2e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4e:	bc 01       	movw	r22, r24
    2e50:	cd 01       	movw	r24, r26
    2e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	f8 01       	movw	r30, r16
    2e5c:	91 83       	std	Z+1, r25	; 0x01
    2e5e:	80 83       	st	Z, r24
    2e60:	1f c0       	rjmp	.+62     	; 0x2ea0 <main+0x1990>
    2e62:	fe 01       	movw	r30, r28
    2e64:	eb 59       	subi	r30, 0x9B	; 155
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	80 e9       	ldi	r24, 0x90	; 144
    2e6a:	91 e0       	ldi	r25, 0x01	; 1
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	80 83       	st	Z, r24
    2e70:	fe 01       	movw	r30, r28
    2e72:	eb 59       	subi	r30, 0x9B	; 155
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	80 81       	ld	r24, Z
    2e78:	91 81       	ldd	r25, Z+1	; 0x01
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	f1 f7       	brne	.-4      	; 0x2e7a <main+0x196a>
    2e7e:	fe 01       	movw	r30, r28
    2e80:	eb 59       	subi	r30, 0x9B	; 155
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	91 83       	std	Z+1, r25	; 0x01
    2e86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e88:	de 01       	movw	r26, r28
    2e8a:	a9 59       	subi	r26, 0x99	; 153
    2e8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e9 59       	subi	r30, 0x99	; 153
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	80 81       	ld	r24, Z
    2e96:	91 81       	ldd	r25, Z+1	; 0x01
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	11 96       	adiw	r26, 0x01	; 1
    2e9c:	9c 93       	st	X, r25
    2e9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e9 59       	subi	r30, 0x99	; 153
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	80 81       	ld	r24, Z
    2ea8:	91 81       	ldd	r25, Z+1	; 0x01
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	d1 f6       	brne	.-76     	; 0x2e62 <main+0x1952>
    2eae:	27 c0       	rjmp	.+78     	; 0x2efe <main+0x19ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb0:	8e 01       	movw	r16, r28
    2eb2:	09 59       	subi	r16, 0x99	; 153
    2eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	e7 59       	subi	r30, 0x97	; 151
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	60 81       	ld	r22, Z
    2ebe:	71 81       	ldd	r23, Z+1	; 0x01
    2ec0:	82 81       	ldd	r24, Z+2	; 0x02
    2ec2:	93 81       	ldd	r25, Z+3	; 0x03
    2ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	f8 01       	movw	r30, r16
    2ece:	91 83       	std	Z+1, r25	; 0x01
    2ed0:	80 83       	st	Z, r24
    2ed2:	de 01       	movw	r26, r28
    2ed4:	ad 59       	subi	r26, 0x9D	; 157
    2ed6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed8:	fe 01       	movw	r30, r28
    2eda:	e9 59       	subi	r30, 0x99	; 153
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	80 81       	ld	r24, Z
    2ee0:	91 81       	ldd	r25, Z+1	; 0x01
    2ee2:	8d 93       	st	X+, r24
    2ee4:	9c 93       	st	X, r25
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	ed 59       	subi	r30, 0x9D	; 157
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	80 81       	ld	r24, Z
    2eee:	91 81       	ldd	r25, Z+1	; 0x01
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <main+0x19e0>
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	ed 59       	subi	r30, 0x9D	; 157
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	91 83       	std	Z+1, r25	; 0x01
    2efc:	80 83       	st	Z, r24
		{
			_delay_ms(BUTTON_DEBOUNCE_PERIOD); /* delay to overcome debounce effect */
			if(BUTTON_checkPressed(&s_hoursIncrement) && !buttons_pressed_flags.flags.hoursInc_flag)
    2efe:	ce 01       	movw	r24, r28
    2f00:	87 50       	subi	r24, 0x07	; 7
    2f02:	9f 4f       	sbci	r25, 0xFF	; 255
    2f04:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    2f08:	88 23       	and	r24, r24
    2f0a:	c9 f0       	breq	.+50     	; 0x2f3e <main+0x1a2e>
    2f0c:	80 91 9a 00 	lds	r24, 0x009A
    2f10:	80 71       	andi	r24, 0x10	; 16
    2f12:	88 23       	and	r24, r24
    2f14:	a1 f4       	brne	.+40     	; 0x2f3e <main+0x1a2e>
			{
				buttons_pressed_flags.flags.hoursInc_flag = 1; /* indicates that button is still pressed */
    2f16:	80 91 9a 00 	lds	r24, 0x009A
    2f1a:	80 61       	ori	r24, 0x10	; 16
    2f1c:	80 93 9a 00 	sts	0x009A, r24

				if(hours_counter<99)
    2f20:	80 91 97 00 	lds	r24, 0x0097
    2f24:	83 36       	cpi	r24, 0x63	; 99
    2f26:	58 f4       	brcc	.+22     	; 0x2f3e <main+0x1a2e>
				{
					hours_counter++; /* increment hours by 1 */
    2f28:	80 91 97 00 	lds	r24, 0x0097
    2f2c:	8f 5f       	subi	r24, 0xFF	; 255
    2f2e:	80 93 97 00 	sts	0x0097, r24
    2f32:	05 c0       	rjmp	.+10     	; 0x2f3e <main+0x1a2e>
				}
			}
		}
		else
		{
			buttons_pressed_flags.flags.hoursInc_flag=0; /* indicate that button is released */
    2f34:	80 91 9a 00 	lds	r24, 0x009A
    2f38:	8f 7e       	andi	r24, 0xEF	; 239
    2f3a:	80 93 9a 00 	sts	0x009A, r24
		}

		/* Decrement hours */
		if(BUTTON_checkPressed(&s_hoursDecrement))
    2f3e:	ce 01       	movw	r24, r28
    2f40:	84 50       	subi	r24, 0x04	; 4
    2f42:	9f 4f       	sbci	r25, 0xFF	; 255
    2f44:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    2f48:	88 23       	and	r24, r24
    2f4a:	09 f4       	brne	.+2      	; 0x2f4e <main+0x1a3e>
    2f4c:	d4 c0       	rjmp	.+424    	; 0x30f6 <main+0x1be6>
    2f4e:	fe 01       	movw	r30, r28
    2f50:	e1 5a       	subi	r30, 0xA1	; 161
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	a0 ef       	ldi	r26, 0xF0	; 240
    2f5a:	b1 e4       	ldi	r27, 0x41	; 65
    2f5c:	80 83       	st	Z, r24
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	a2 83       	std	Z+2, r26	; 0x02
    2f62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f64:	8e 01       	movw	r16, r28
    2f66:	05 5a       	subi	r16, 0xA5	; 165
    2f68:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	e1 5a       	subi	r30, 0xA1	; 161
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	60 81       	ld	r22, Z
    2f72:	71 81       	ldd	r23, Z+1	; 0x01
    2f74:	82 81       	ldd	r24, Z+2	; 0x02
    2f76:	93 81       	ldd	r25, Z+3	; 0x03
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	4a e7       	ldi	r20, 0x7A	; 122
    2f7e:	55 e4       	ldi	r21, 0x45	; 69
    2f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	f8 01       	movw	r30, r16
    2f8a:	80 83       	st	Z, r24
    2f8c:	91 83       	std	Z+1, r25	; 0x01
    2f8e:	a2 83       	std	Z+2, r26	; 0x02
    2f90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f92:	fe 01       	movw	r30, r28
    2f94:	e5 5a       	subi	r30, 0xA5	; 165
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	60 81       	ld	r22, Z
    2f9a:	71 81       	ldd	r23, Z+1	; 0x01
    2f9c:	82 81       	ldd	r24, Z+2	; 0x02
    2f9e:	93 81       	ldd	r25, Z+3	; 0x03
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e8       	ldi	r20, 0x80	; 128
    2fa6:	5f e3       	ldi	r21, 0x3F	; 63
    2fa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fac:	88 23       	and	r24, r24
    2fae:	44 f4       	brge	.+16     	; 0x2fc0 <main+0x1ab0>
		__ticks = 1;
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e7 5a       	subi	r30, 0xA7	; 167
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	91 83       	std	Z+1, r25	; 0x01
    2fbc:	80 83       	st	Z, r24
    2fbe:	64 c0       	rjmp	.+200    	; 0x3088 <main+0x1b78>
	else if (__tmp > 65535)
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	e5 5a       	subi	r30, 0xA5	; 165
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	60 81       	ld	r22, Z
    2fc8:	71 81       	ldd	r23, Z+1	; 0x01
    2fca:	82 81       	ldd	r24, Z+2	; 0x02
    2fcc:	93 81       	ldd	r25, Z+3	; 0x03
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	3f ef       	ldi	r19, 0xFF	; 255
    2fd2:	4f e7       	ldi	r20, 0x7F	; 127
    2fd4:	57 e4       	ldi	r21, 0x47	; 71
    2fd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fda:	18 16       	cp	r1, r24
    2fdc:	0c f0       	brlt	.+2      	; 0x2fe0 <main+0x1ad0>
    2fde:	43 c0       	rjmp	.+134    	; 0x3066 <main+0x1b56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	e1 5a       	subi	r30, 0xA1	; 161
    2fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe6:	60 81       	ld	r22, Z
    2fe8:	71 81       	ldd	r23, Z+1	; 0x01
    2fea:	82 81       	ldd	r24, Z+2	; 0x02
    2fec:	93 81       	ldd	r25, Z+3	; 0x03
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	40 e2       	ldi	r20, 0x20	; 32
    2ff4:	51 e4       	ldi	r21, 0x41	; 65
    2ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	8e 01       	movw	r16, r28
    3000:	07 5a       	subi	r16, 0xA7	; 167
    3002:	1f 4f       	sbci	r17, 0xFF	; 255
    3004:	bc 01       	movw	r22, r24
    3006:	cd 01       	movw	r24, r26
    3008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	f8 01       	movw	r30, r16
    3012:	91 83       	std	Z+1, r25	; 0x01
    3014:	80 83       	st	Z, r24
    3016:	1f c0       	rjmp	.+62     	; 0x3056 <main+0x1b46>
    3018:	fe 01       	movw	r30, r28
    301a:	e9 5a       	subi	r30, 0xA9	; 169
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	80 e9       	ldi	r24, 0x90	; 144
    3020:	91 e0       	ldi	r25, 0x01	; 1
    3022:	91 83       	std	Z+1, r25	; 0x01
    3024:	80 83       	st	Z, r24
    3026:	fe 01       	movw	r30, r28
    3028:	e9 5a       	subi	r30, 0xA9	; 169
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	80 81       	ld	r24, Z
    302e:	91 81       	ldd	r25, Z+1	; 0x01
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	f1 f7       	brne	.-4      	; 0x3030 <main+0x1b20>
    3034:	fe 01       	movw	r30, r28
    3036:	e9 5a       	subi	r30, 0xA9	; 169
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	91 83       	std	Z+1, r25	; 0x01
    303c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    303e:	de 01       	movw	r26, r28
    3040:	a7 5a       	subi	r26, 0xA7	; 167
    3042:	bf 4f       	sbci	r27, 0xFF	; 255
    3044:	fe 01       	movw	r30, r28
    3046:	e7 5a       	subi	r30, 0xA7	; 167
    3048:	ff 4f       	sbci	r31, 0xFF	; 255
    304a:	80 81       	ld	r24, Z
    304c:	91 81       	ldd	r25, Z+1	; 0x01
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	11 96       	adiw	r26, 0x01	; 1
    3052:	9c 93       	st	X, r25
    3054:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3056:	fe 01       	movw	r30, r28
    3058:	e7 5a       	subi	r30, 0xA7	; 167
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	80 81       	ld	r24, Z
    305e:	91 81       	ldd	r25, Z+1	; 0x01
    3060:	00 97       	sbiw	r24, 0x00	; 0
    3062:	d1 f6       	brne	.-76     	; 0x3018 <main+0x1b08>
    3064:	27 c0       	rjmp	.+78     	; 0x30b4 <main+0x1ba4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3066:	8e 01       	movw	r16, r28
    3068:	07 5a       	subi	r16, 0xA7	; 167
    306a:	1f 4f       	sbci	r17, 0xFF	; 255
    306c:	fe 01       	movw	r30, r28
    306e:	e5 5a       	subi	r30, 0xA5	; 165
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	60 81       	ld	r22, Z
    3074:	71 81       	ldd	r23, Z+1	; 0x01
    3076:	82 81       	ldd	r24, Z+2	; 0x02
    3078:	93 81       	ldd	r25, Z+3	; 0x03
    307a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	f8 01       	movw	r30, r16
    3084:	91 83       	std	Z+1, r25	; 0x01
    3086:	80 83       	st	Z, r24
    3088:	de 01       	movw	r26, r28
    308a:	ab 5a       	subi	r26, 0xAB	; 171
    308c:	bf 4f       	sbci	r27, 0xFF	; 255
    308e:	fe 01       	movw	r30, r28
    3090:	e7 5a       	subi	r30, 0xA7	; 167
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	80 81       	ld	r24, Z
    3096:	91 81       	ldd	r25, Z+1	; 0x01
    3098:	8d 93       	st	X+, r24
    309a:	9c 93       	st	X, r25
    309c:	fe 01       	movw	r30, r28
    309e:	eb 5a       	subi	r30, 0xAB	; 171
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	80 81       	ld	r24, Z
    30a4:	91 81       	ldd	r25, Z+1	; 0x01
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	f1 f7       	brne	.-4      	; 0x30a6 <main+0x1b96>
    30aa:	fe 01       	movw	r30, r28
    30ac:	eb 5a       	subi	r30, 0xAB	; 171
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	91 83       	std	Z+1, r25	; 0x01
    30b2:	80 83       	st	Z, r24
		{
			_delay_ms(BUTTON_DEBOUNCE_PERIOD); /* delay to overcome debounce effect */
			if(BUTTON_checkPressed(&s_hoursDecrement) && !buttons_pressed_flags.flags.hoursDec_flag)
    30b4:	ce 01       	movw	r24, r28
    30b6:	84 50       	subi	r24, 0x04	; 4
    30b8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ba:	0e 94 b9 05 	call	0xb72	; 0xb72 <BUTTON_checkPressed>
    30be:	88 23       	and	r24, r24
    30c0:	f9 f0       	breq	.+62     	; 0x3100 <main+0x1bf0>
    30c2:	80 91 9a 00 	lds	r24, 0x009A
    30c6:	80 72       	andi	r24, 0x20	; 32
    30c8:	88 23       	and	r24, r24
    30ca:	d1 f4       	brne	.+52     	; 0x3100 <main+0x1bf0>
			{
				buttons_pressed_flags.flags.hoursDec_flag = 1; /* indicates that button is still pressed */
    30cc:	80 91 9a 00 	lds	r24, 0x009A
    30d0:	80 62       	ori	r24, 0x20	; 32
    30d2:	80 93 9a 00 	sts	0x009A, r24

				if(hours_counter>0) /* if hours counter is more than 0 */
    30d6:	80 91 97 00 	lds	r24, 0x0097
    30da:	88 23       	and	r24, r24
    30dc:	89 f0       	breq	.+34     	; 0x3100 <main+0x1bf0>
				{
					hours_counter--; /* decrement time by 1 hour */
    30de:	80 91 97 00 	lds	r24, 0x0097
    30e2:	81 50       	subi	r24, 0x01	; 1
    30e4:	80 93 97 00 	sts	0x0097, r24
					minutes_counter = 59; /* recount from 59 minutes */
    30e8:	8b e3       	ldi	r24, 0x3B	; 59
    30ea:	80 93 96 00 	sts	0x0096, r24
					seconds_counter = 59; /* recount from 59 seconds */
    30ee:	8b e3       	ldi	r24, 0x3B	; 59
    30f0:	80 93 95 00 	sts	0x0095, r24
    30f4:	05 c0       	rjmp	.+10     	; 0x3100 <main+0x1bf0>

			}
		}
		else
		{
			buttons_pressed_flags.flags.hoursDec_flag=0; /* indicate that button is released */
    30f6:	80 91 9a 00 	lds	r24, 0x009A
    30fa:	8f 7d       	andi	r24, 0xDF	; 223
    30fc:	80 93 9a 00 	sts	0x009A, r24
		}

		/********** display values on seven-segments **********/

		/* display seconds */
		GPIO_writePin(PORTA_ID, PIN5_ID, LOGIC_HIGH); /* turn on 1st display from the right */
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	65 e0       	ldi	r22, 0x05	; 5
    3104:	41 e0       	ldi	r20, 0x01	; 1
    3106:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
		Seven_Segment_display(seconds_counter%10,&s_sevenSegment_init_values); /* display the units of seconds on 1st display */
    310a:	80 91 95 00 	lds	r24, 0x0095
    310e:	9a e0       	ldi	r25, 0x0A	; 10
    3110:	69 2f       	mov	r22, r25
    3112:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__udivmodqi4>
    3116:	89 2f       	mov	r24, r25
    3118:	9e 01       	movw	r18, r28
    311a:	25 51       	subi	r18, 0x15	; 21
    311c:	3f 4f       	sbci	r19, 0xFF	; 255
    311e:	b9 01       	movw	r22, r18
    3120:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <Seven_Segment_display>
    3124:	fe 01       	movw	r30, r28
    3126:	ef 5a       	subi	r30, 0xAF	; 175
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	a0 ea       	ldi	r26, 0xA0	; 160
    3130:	b0 e4       	ldi	r27, 0x40	; 64
    3132:	80 83       	st	Z, r24
    3134:	91 83       	std	Z+1, r25	; 0x01
    3136:	a2 83       	std	Z+2, r26	; 0x02
    3138:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313a:	8e 01       	movw	r16, r28
    313c:	03 5b       	subi	r16, 0xB3	; 179
    313e:	1f 4f       	sbci	r17, 0xFF	; 255
    3140:	fe 01       	movw	r30, r28
    3142:	ef 5a       	subi	r30, 0xAF	; 175
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	60 81       	ld	r22, Z
    3148:	71 81       	ldd	r23, Z+1	; 0x01
    314a:	82 81       	ldd	r24, Z+2	; 0x02
    314c:	93 81       	ldd	r25, Z+3	; 0x03
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	4a e7       	ldi	r20, 0x7A	; 122
    3154:	55 e4       	ldi	r21, 0x45	; 69
    3156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	f8 01       	movw	r30, r16
    3160:	80 83       	st	Z, r24
    3162:	91 83       	std	Z+1, r25	; 0x01
    3164:	a2 83       	std	Z+2, r26	; 0x02
    3166:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3168:	fe 01       	movw	r30, r28
    316a:	e3 5b       	subi	r30, 0xB3	; 179
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	60 81       	ld	r22, Z
    3170:	71 81       	ldd	r23, Z+1	; 0x01
    3172:	82 81       	ldd	r24, Z+2	; 0x02
    3174:	93 81       	ldd	r25, Z+3	; 0x03
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	40 e8       	ldi	r20, 0x80	; 128
    317c:	5f e3       	ldi	r21, 0x3F	; 63
    317e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3182:	88 23       	and	r24, r24
    3184:	44 f4       	brge	.+16     	; 0x3196 <main+0x1c86>
		__ticks = 1;
    3186:	fe 01       	movw	r30, r28
    3188:	e5 5b       	subi	r30, 0xB5	; 181
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	91 83       	std	Z+1, r25	; 0x01
    3192:	80 83       	st	Z, r24
    3194:	64 c0       	rjmp	.+200    	; 0x325e <main+0x1d4e>
	else if (__tmp > 65535)
    3196:	fe 01       	movw	r30, r28
    3198:	e3 5b       	subi	r30, 0xB3	; 179
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	60 81       	ld	r22, Z
    319e:	71 81       	ldd	r23, Z+1	; 0x01
    31a0:	82 81       	ldd	r24, Z+2	; 0x02
    31a2:	93 81       	ldd	r25, Z+3	; 0x03
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	3f ef       	ldi	r19, 0xFF	; 255
    31a8:	4f e7       	ldi	r20, 0x7F	; 127
    31aa:	57 e4       	ldi	r21, 0x47	; 71
    31ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31b0:	18 16       	cp	r1, r24
    31b2:	0c f0       	brlt	.+2      	; 0x31b6 <main+0x1ca6>
    31b4:	43 c0       	rjmp	.+134    	; 0x323c <main+0x1d2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b6:	fe 01       	movw	r30, r28
    31b8:	ef 5a       	subi	r30, 0xAF	; 175
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	60 81       	ld	r22, Z
    31be:	71 81       	ldd	r23, Z+1	; 0x01
    31c0:	82 81       	ldd	r24, Z+2	; 0x02
    31c2:	93 81       	ldd	r25, Z+3	; 0x03
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	40 e2       	ldi	r20, 0x20	; 32
    31ca:	51 e4       	ldi	r21, 0x41	; 65
    31cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	8e 01       	movw	r16, r28
    31d6:	05 5b       	subi	r16, 0xB5	; 181
    31d8:	1f 4f       	sbci	r17, 0xFF	; 255
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	f8 01       	movw	r30, r16
    31e8:	91 83       	std	Z+1, r25	; 0x01
    31ea:	80 83       	st	Z, r24
    31ec:	1f c0       	rjmp	.+62     	; 0x322c <main+0x1d1c>
    31ee:	fe 01       	movw	r30, r28
    31f0:	e7 5b       	subi	r30, 0xB7	; 183
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 e9       	ldi	r24, 0x90	; 144
    31f6:	91 e0       	ldi	r25, 0x01	; 1
    31f8:	91 83       	std	Z+1, r25	; 0x01
    31fa:	80 83       	st	Z, r24
    31fc:	fe 01       	movw	r30, r28
    31fe:	e7 5b       	subi	r30, 0xB7	; 183
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	f1 f7       	brne	.-4      	; 0x3206 <main+0x1cf6>
    320a:	fe 01       	movw	r30, r28
    320c:	e7 5b       	subi	r30, 0xB7	; 183
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	91 83       	std	Z+1, r25	; 0x01
    3212:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3214:	de 01       	movw	r26, r28
    3216:	a5 5b       	subi	r26, 0xB5	; 181
    3218:	bf 4f       	sbci	r27, 0xFF	; 255
    321a:	fe 01       	movw	r30, r28
    321c:	e5 5b       	subi	r30, 0xB5	; 181
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	80 81       	ld	r24, Z
    3222:	91 81       	ldd	r25, Z+1	; 0x01
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	11 96       	adiw	r26, 0x01	; 1
    3228:	9c 93       	st	X, r25
    322a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322c:	fe 01       	movw	r30, r28
    322e:	e5 5b       	subi	r30, 0xB5	; 181
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	80 81       	ld	r24, Z
    3234:	91 81       	ldd	r25, Z+1	; 0x01
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	d1 f6       	brne	.-76     	; 0x31ee <main+0x1cde>
    323a:	27 c0       	rjmp	.+78     	; 0x328a <main+0x1d7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    323c:	8e 01       	movw	r16, r28
    323e:	05 5b       	subi	r16, 0xB5	; 181
    3240:	1f 4f       	sbci	r17, 0xFF	; 255
    3242:	fe 01       	movw	r30, r28
    3244:	e3 5b       	subi	r30, 0xB3	; 179
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	60 81       	ld	r22, Z
    324a:	71 81       	ldd	r23, Z+1	; 0x01
    324c:	82 81       	ldd	r24, Z+2	; 0x02
    324e:	93 81       	ldd	r25, Z+3	; 0x03
    3250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	f8 01       	movw	r30, r16
    325a:	91 83       	std	Z+1, r25	; 0x01
    325c:	80 83       	st	Z, r24
    325e:	de 01       	movw	r26, r28
    3260:	a9 5b       	subi	r26, 0xB9	; 185
    3262:	bf 4f       	sbci	r27, 0xFF	; 255
    3264:	fe 01       	movw	r30, r28
    3266:	e5 5b       	subi	r30, 0xB5	; 181
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	80 81       	ld	r24, Z
    326c:	91 81       	ldd	r25, Z+1	; 0x01
    326e:	8d 93       	st	X+, r24
    3270:	9c 93       	st	X, r25
    3272:	fe 01       	movw	r30, r28
    3274:	e9 5b       	subi	r30, 0xB9	; 185
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	80 81       	ld	r24, Z
    327a:	91 81       	ldd	r25, Z+1	; 0x01
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	f1 f7       	brne	.-4      	; 0x327c <main+0x1d6c>
    3280:	fe 01       	movw	r30, r28
    3282:	e9 5b       	subi	r30, 0xB9	; 185
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	91 83       	std	Z+1, r25	; 0x01
    3288:	80 83       	st	Z, r24
		_delay_ms(MULTIPLEXING_DELAY);
		GPIO_writePin(PORTA_ID, PIN5_ID, LOGIC_LOW); /* turn off 1st display from the right */
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	65 e0       	ldi	r22, 0x05	; 5
    328e:	40 e0       	ldi	r20, 0x00	; 0
    3290:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>

		GPIO_writePin(PORTA_ID, PIN4_ID, LOGIC_HIGH); /* turn on 2nd display from the right */
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	64 e0       	ldi	r22, 0x04	; 4
    3298:	41 e0       	ldi	r20, 0x01	; 1
    329a:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
		Seven_Segment_display(seconds_counter/10,&s_sevenSegment_init_values); /* display the tens of seconds on 2nd display */
    329e:	80 91 95 00 	lds	r24, 0x0095
    32a2:	9a e0       	ldi	r25, 0x0A	; 10
    32a4:	69 2f       	mov	r22, r25
    32a6:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__udivmodqi4>
    32aa:	9e 01       	movw	r18, r28
    32ac:	25 51       	subi	r18, 0x15	; 21
    32ae:	3f 4f       	sbci	r19, 0xFF	; 255
    32b0:	b9 01       	movw	r22, r18
    32b2:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <Seven_Segment_display>
    32b6:	fe 01       	movw	r30, r28
    32b8:	ed 5b       	subi	r30, 0xBD	; 189
    32ba:	ff 4f       	sbci	r31, 0xFF	; 255
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	a0 ea       	ldi	r26, 0xA0	; 160
    32c2:	b0 e4       	ldi	r27, 0x40	; 64
    32c4:	80 83       	st	Z, r24
    32c6:	91 83       	std	Z+1, r25	; 0x01
    32c8:	a2 83       	std	Z+2, r26	; 0x02
    32ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32cc:	8e 01       	movw	r16, r28
    32ce:	01 5c       	subi	r16, 0xC1	; 193
    32d0:	1f 4f       	sbci	r17, 0xFF	; 255
    32d2:	fe 01       	movw	r30, r28
    32d4:	ed 5b       	subi	r30, 0xBD	; 189
    32d6:	ff 4f       	sbci	r31, 0xFF	; 255
    32d8:	60 81       	ld	r22, Z
    32da:	71 81       	ldd	r23, Z+1	; 0x01
    32dc:	82 81       	ldd	r24, Z+2	; 0x02
    32de:	93 81       	ldd	r25, Z+3	; 0x03
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	4a e7       	ldi	r20, 0x7A	; 122
    32e6:	55 e4       	ldi	r21, 0x45	; 69
    32e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	f8 01       	movw	r30, r16
    32f2:	80 83       	st	Z, r24
    32f4:	91 83       	std	Z+1, r25	; 0x01
    32f6:	a2 83       	std	Z+2, r26	; 0x02
    32f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32fa:	fe 01       	movw	r30, r28
    32fc:	ff 96       	adiw	r30, 0x3f	; 63
    32fe:	60 81       	ld	r22, Z
    3300:	71 81       	ldd	r23, Z+1	; 0x01
    3302:	82 81       	ldd	r24, Z+2	; 0x02
    3304:	93 81       	ldd	r25, Z+3	; 0x03
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	40 e8       	ldi	r20, 0x80	; 128
    330c:	5f e3       	ldi	r21, 0x3F	; 63
    330e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3312:	88 23       	and	r24, r24
    3314:	2c f4       	brge	.+10     	; 0x3320 <main+0x1e10>
		__ticks = 1;
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	9e af       	std	Y+62, r25	; 0x3e
    331c:	8d af       	std	Y+61, r24	; 0x3d
    331e:	46 c0       	rjmp	.+140    	; 0x33ac <main+0x1e9c>
	else if (__tmp > 65535)
    3320:	fe 01       	movw	r30, r28
    3322:	ff 96       	adiw	r30, 0x3f	; 63
    3324:	60 81       	ld	r22, Z
    3326:	71 81       	ldd	r23, Z+1	; 0x01
    3328:	82 81       	ldd	r24, Z+2	; 0x02
    332a:	93 81       	ldd	r25, Z+3	; 0x03
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	3f ef       	ldi	r19, 0xFF	; 255
    3330:	4f e7       	ldi	r20, 0x7F	; 127
    3332:	57 e4       	ldi	r21, 0x47	; 71
    3334:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3338:	18 16       	cp	r1, r24
    333a:	64 f5       	brge	.+88     	; 0x3394 <main+0x1e84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333c:	fe 01       	movw	r30, r28
    333e:	ed 5b       	subi	r30, 0xBD	; 189
    3340:	ff 4f       	sbci	r31, 0xFF	; 255
    3342:	60 81       	ld	r22, Z
    3344:	71 81       	ldd	r23, Z+1	; 0x01
    3346:	82 81       	ldd	r24, Z+2	; 0x02
    3348:	93 81       	ldd	r25, Z+3	; 0x03
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	40 e2       	ldi	r20, 0x20	; 32
    3350:	51 e4       	ldi	r21, 0x41	; 65
    3352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	bc 01       	movw	r22, r24
    335c:	cd 01       	movw	r24, r26
    335e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	9e af       	std	Y+62, r25	; 0x3e
    3368:	8d af       	std	Y+61, r24	; 0x3d
    336a:	0f c0       	rjmp	.+30     	; 0x338a <main+0x1e7a>
    336c:	80 e9       	ldi	r24, 0x90	; 144
    336e:	91 e0       	ldi	r25, 0x01	; 1
    3370:	9c af       	std	Y+60, r25	; 0x3c
    3372:	8b af       	std	Y+59, r24	; 0x3b
    3374:	8b ad       	ldd	r24, Y+59	; 0x3b
    3376:	9c ad       	ldd	r25, Y+60	; 0x3c
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	f1 f7       	brne	.-4      	; 0x3378 <main+0x1e68>
    337c:	9c af       	std	Y+60, r25	; 0x3c
    337e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3380:	8d ad       	ldd	r24, Y+61	; 0x3d
    3382:	9e ad       	ldd	r25, Y+62	; 0x3e
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	9e af       	std	Y+62, r25	; 0x3e
    3388:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    338a:	8d ad       	ldd	r24, Y+61	; 0x3d
    338c:	9e ad       	ldd	r25, Y+62	; 0x3e
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	69 f7       	brne	.-38     	; 0x336c <main+0x1e5c>
    3392:	16 c0       	rjmp	.+44     	; 0x33c0 <main+0x1eb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3394:	fe 01       	movw	r30, r28
    3396:	ff 96       	adiw	r30, 0x3f	; 63
    3398:	60 81       	ld	r22, Z
    339a:	71 81       	ldd	r23, Z+1	; 0x01
    339c:	82 81       	ldd	r24, Z+2	; 0x02
    339e:	93 81       	ldd	r25, Z+3	; 0x03
    33a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	9e af       	std	Y+62, r25	; 0x3e
    33aa:	8d af       	std	Y+61, r24	; 0x3d
    33ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    33ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    33b0:	9a af       	std	Y+58, r25	; 0x3a
    33b2:	89 af       	std	Y+57, r24	; 0x39
    33b4:	89 ad       	ldd	r24, Y+57	; 0x39
    33b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    33b8:	01 97       	sbiw	r24, 0x01	; 1
    33ba:	f1 f7       	brne	.-4      	; 0x33b8 <main+0x1ea8>
    33bc:	9a af       	std	Y+58, r25	; 0x3a
    33be:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(MULTIPLEXING_DELAY);
		GPIO_writePin(PORTA_ID, PIN4_ID, LOGIC_LOW); /* turn off 2nd display from the right */
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	64 e0       	ldi	r22, 0x04	; 4
    33c4:	40 e0       	ldi	r20, 0x00	; 0
    33c6:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>

		/* display minutes */
		GPIO_writePin(PORTA_ID, PIN3_ID, LOGIC_HIGH); /* turn on 3rd display from the right */
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	63 e0       	ldi	r22, 0x03	; 3
    33ce:	41 e0       	ldi	r20, 0x01	; 1
    33d0:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
		Seven_Segment_display(minutes_counter%10,&s_sevenSegment_init_values); /* display the units of minutes on 3rd display */
    33d4:	80 91 96 00 	lds	r24, 0x0096
    33d8:	9a e0       	ldi	r25, 0x0A	; 10
    33da:	69 2f       	mov	r22, r25
    33dc:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__udivmodqi4>
    33e0:	89 2f       	mov	r24, r25
    33e2:	9e 01       	movw	r18, r28
    33e4:	25 51       	subi	r18, 0x15	; 21
    33e6:	3f 4f       	sbci	r19, 0xFF	; 255
    33e8:	b9 01       	movw	r22, r18
    33ea:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <Seven_Segment_display>
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	a0 ea       	ldi	r26, 0xA0	; 160
    33f4:	b0 e4       	ldi	r27, 0x40	; 64
    33f6:	8d ab       	std	Y+53, r24	; 0x35
    33f8:	9e ab       	std	Y+54, r25	; 0x36
    33fa:	af ab       	std	Y+55, r26	; 0x37
    33fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33fe:	6d a9       	ldd	r22, Y+53	; 0x35
    3400:	7e a9       	ldd	r23, Y+54	; 0x36
    3402:	8f a9       	ldd	r24, Y+55	; 0x37
    3404:	98 ad       	ldd	r25, Y+56	; 0x38
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	4a e7       	ldi	r20, 0x7A	; 122
    340c:	55 e4       	ldi	r21, 0x45	; 69
    340e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	89 ab       	std	Y+49, r24	; 0x31
    3418:	9a ab       	std	Y+50, r25	; 0x32
    341a:	ab ab       	std	Y+51, r26	; 0x33
    341c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    341e:	69 a9       	ldd	r22, Y+49	; 0x31
    3420:	7a a9       	ldd	r23, Y+50	; 0x32
    3422:	8b a9       	ldd	r24, Y+51	; 0x33
    3424:	9c a9       	ldd	r25, Y+52	; 0x34
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	40 e8       	ldi	r20, 0x80	; 128
    342c:	5f e3       	ldi	r21, 0x3F	; 63
    342e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3432:	88 23       	and	r24, r24
    3434:	2c f4       	brge	.+10     	; 0x3440 <main+0x1f30>
		__ticks = 1;
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	98 ab       	std	Y+48, r25	; 0x30
    343c:	8f a7       	std	Y+47, r24	; 0x2f
    343e:	3f c0       	rjmp	.+126    	; 0x34be <main+0x1fae>
	else if (__tmp > 65535)
    3440:	69 a9       	ldd	r22, Y+49	; 0x31
    3442:	7a a9       	ldd	r23, Y+50	; 0x32
    3444:	8b a9       	ldd	r24, Y+51	; 0x33
    3446:	9c a9       	ldd	r25, Y+52	; 0x34
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	3f ef       	ldi	r19, 0xFF	; 255
    344c:	4f e7       	ldi	r20, 0x7F	; 127
    344e:	57 e4       	ldi	r21, 0x47	; 71
    3450:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3454:	18 16       	cp	r1, r24
    3456:	4c f5       	brge	.+82     	; 0x34aa <main+0x1f9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3458:	6d a9       	ldd	r22, Y+53	; 0x35
    345a:	7e a9       	ldd	r23, Y+54	; 0x36
    345c:	8f a9       	ldd	r24, Y+55	; 0x37
    345e:	98 ad       	ldd	r25, Y+56	; 0x38
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	40 e2       	ldi	r20, 0x20	; 32
    3466:	51 e4       	ldi	r21, 0x41	; 65
    3468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	bc 01       	movw	r22, r24
    3472:	cd 01       	movw	r24, r26
    3474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	98 ab       	std	Y+48, r25	; 0x30
    347e:	8f a7       	std	Y+47, r24	; 0x2f
    3480:	0f c0       	rjmp	.+30     	; 0x34a0 <main+0x1f90>
    3482:	80 e9       	ldi	r24, 0x90	; 144
    3484:	91 e0       	ldi	r25, 0x01	; 1
    3486:	9e a7       	std	Y+46, r25	; 0x2e
    3488:	8d a7       	std	Y+45, r24	; 0x2d
    348a:	8d a5       	ldd	r24, Y+45	; 0x2d
    348c:	9e a5       	ldd	r25, Y+46	; 0x2e
    348e:	01 97       	sbiw	r24, 0x01	; 1
    3490:	f1 f7       	brne	.-4      	; 0x348e <main+0x1f7e>
    3492:	9e a7       	std	Y+46, r25	; 0x2e
    3494:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3496:	8f a5       	ldd	r24, Y+47	; 0x2f
    3498:	98 a9       	ldd	r25, Y+48	; 0x30
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	98 ab       	std	Y+48, r25	; 0x30
    349e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    34a2:	98 a9       	ldd	r25, Y+48	; 0x30
    34a4:	00 97       	sbiw	r24, 0x00	; 0
    34a6:	69 f7       	brne	.-38     	; 0x3482 <main+0x1f72>
    34a8:	14 c0       	rjmp	.+40     	; 0x34d2 <main+0x1fc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34aa:	69 a9       	ldd	r22, Y+49	; 0x31
    34ac:	7a a9       	ldd	r23, Y+50	; 0x32
    34ae:	8b a9       	ldd	r24, Y+51	; 0x33
    34b0:	9c a9       	ldd	r25, Y+52	; 0x34
    34b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b6:	dc 01       	movw	r26, r24
    34b8:	cb 01       	movw	r24, r22
    34ba:	98 ab       	std	Y+48, r25	; 0x30
    34bc:	8f a7       	std	Y+47, r24	; 0x2f
    34be:	8f a5       	ldd	r24, Y+47	; 0x2f
    34c0:	98 a9       	ldd	r25, Y+48	; 0x30
    34c2:	9c a7       	std	Y+44, r25	; 0x2c
    34c4:	8b a7       	std	Y+43, r24	; 0x2b
    34c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    34c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    34ca:	01 97       	sbiw	r24, 0x01	; 1
    34cc:	f1 f7       	brne	.-4      	; 0x34ca <main+0x1fba>
    34ce:	9c a7       	std	Y+44, r25	; 0x2c
    34d0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(MULTIPLEXING_DELAY);
		GPIO_writePin(PORTA_ID, PIN3_ID, LOGIC_LOW); /* turn off 3rd display from the right */
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	63 e0       	ldi	r22, 0x03	; 3
    34d6:	40 e0       	ldi	r20, 0x00	; 0
    34d8:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>

		GPIO_writePin(PORTA_ID, PIN2_ID, LOGIC_HIGH); /* turn on 4th display from the right */
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	62 e0       	ldi	r22, 0x02	; 2
    34e0:	41 e0       	ldi	r20, 0x01	; 1
    34e2:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
		Seven_Segment_display(minutes_counter/10,&s_sevenSegment_init_values); /* display the tens of minutes on 4th display */
    34e6:	80 91 96 00 	lds	r24, 0x0096
    34ea:	9a e0       	ldi	r25, 0x0A	; 10
    34ec:	69 2f       	mov	r22, r25
    34ee:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__udivmodqi4>
    34f2:	9e 01       	movw	r18, r28
    34f4:	25 51       	subi	r18, 0x15	; 21
    34f6:	3f 4f       	sbci	r19, 0xFF	; 255
    34f8:	b9 01       	movw	r22, r18
    34fa:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <Seven_Segment_display>
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	a0 ea       	ldi	r26, 0xA0	; 160
    3504:	b0 e4       	ldi	r27, 0x40	; 64
    3506:	8f a3       	std	Y+39, r24	; 0x27
    3508:	98 a7       	std	Y+40, r25	; 0x28
    350a:	a9 a7       	std	Y+41, r26	; 0x29
    350c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350e:	6f a1       	ldd	r22, Y+39	; 0x27
    3510:	78 a5       	ldd	r23, Y+40	; 0x28
    3512:	89 a5       	ldd	r24, Y+41	; 0x29
    3514:	9a a5       	ldd	r25, Y+42	; 0x2a
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	4a e7       	ldi	r20, 0x7A	; 122
    351c:	55 e4       	ldi	r21, 0x45	; 69
    351e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	8b a3       	std	Y+35, r24	; 0x23
    3528:	9c a3       	std	Y+36, r25	; 0x24
    352a:	ad a3       	std	Y+37, r26	; 0x25
    352c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    352e:	6b a1       	ldd	r22, Y+35	; 0x23
    3530:	7c a1       	ldd	r23, Y+36	; 0x24
    3532:	8d a1       	ldd	r24, Y+37	; 0x25
    3534:	9e a1       	ldd	r25, Y+38	; 0x26
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	40 e8       	ldi	r20, 0x80	; 128
    353c:	5f e3       	ldi	r21, 0x3F	; 63
    353e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3542:	88 23       	and	r24, r24
    3544:	2c f4       	brge	.+10     	; 0x3550 <main+0x2040>
		__ticks = 1;
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	9a a3       	std	Y+34, r25	; 0x22
    354c:	89 a3       	std	Y+33, r24	; 0x21
    354e:	3f c0       	rjmp	.+126    	; 0x35ce <main+0x20be>
	else if (__tmp > 65535)
    3550:	6b a1       	ldd	r22, Y+35	; 0x23
    3552:	7c a1       	ldd	r23, Y+36	; 0x24
    3554:	8d a1       	ldd	r24, Y+37	; 0x25
    3556:	9e a1       	ldd	r25, Y+38	; 0x26
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	3f ef       	ldi	r19, 0xFF	; 255
    355c:	4f e7       	ldi	r20, 0x7F	; 127
    355e:	57 e4       	ldi	r21, 0x47	; 71
    3560:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3564:	18 16       	cp	r1, r24
    3566:	4c f5       	brge	.+82     	; 0x35ba <main+0x20aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3568:	6f a1       	ldd	r22, Y+39	; 0x27
    356a:	78 a5       	ldd	r23, Y+40	; 0x28
    356c:	89 a5       	ldd	r24, Y+41	; 0x29
    356e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e2       	ldi	r20, 0x20	; 32
    3576:	51 e4       	ldi	r21, 0x41	; 65
    3578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	bc 01       	movw	r22, r24
    3582:	cd 01       	movw	r24, r26
    3584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	9a a3       	std	Y+34, r25	; 0x22
    358e:	89 a3       	std	Y+33, r24	; 0x21
    3590:	0f c0       	rjmp	.+30     	; 0x35b0 <main+0x20a0>
    3592:	80 e9       	ldi	r24, 0x90	; 144
    3594:	91 e0       	ldi	r25, 0x01	; 1
    3596:	98 a3       	std	Y+32, r25	; 0x20
    3598:	8f 8f       	std	Y+31, r24	; 0x1f
    359a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    359c:	98 a1       	ldd	r25, Y+32	; 0x20
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <main+0x208e>
    35a2:	98 a3       	std	Y+32, r25	; 0x20
    35a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a6:	89 a1       	ldd	r24, Y+33	; 0x21
    35a8:	9a a1       	ldd	r25, Y+34	; 0x22
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	9a a3       	std	Y+34, r25	; 0x22
    35ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b0:	89 a1       	ldd	r24, Y+33	; 0x21
    35b2:	9a a1       	ldd	r25, Y+34	; 0x22
    35b4:	00 97       	sbiw	r24, 0x00	; 0
    35b6:	69 f7       	brne	.-38     	; 0x3592 <main+0x2082>
    35b8:	14 c0       	rjmp	.+40     	; 0x35e2 <main+0x20d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ba:	6b a1       	ldd	r22, Y+35	; 0x23
    35bc:	7c a1       	ldd	r23, Y+36	; 0x24
    35be:	8d a1       	ldd	r24, Y+37	; 0x25
    35c0:	9e a1       	ldd	r25, Y+38	; 0x26
    35c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	9a a3       	std	Y+34, r25	; 0x22
    35cc:	89 a3       	std	Y+33, r24	; 0x21
    35ce:	89 a1       	ldd	r24, Y+33	; 0x21
    35d0:	9a a1       	ldd	r25, Y+34	; 0x22
    35d2:	9e 8f       	std	Y+30, r25	; 0x1e
    35d4:	8d 8f       	std	Y+29, r24	; 0x1d
    35d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	f1 f7       	brne	.-4      	; 0x35da <main+0x20ca>
    35de:	9e 8f       	std	Y+30, r25	; 0x1e
    35e0:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(MULTIPLEXING_DELAY);
		GPIO_writePin(PORTA_ID, PIN2_ID, LOGIC_LOW); /* turn off 4th display from the right */
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	62 e0       	ldi	r22, 0x02	; 2
    35e6:	40 e0       	ldi	r20, 0x00	; 0
    35e8:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>

		/* display hours */
		GPIO_writePin(PORTA_ID, PIN1_ID, LOGIC_HIGH); /* turn on 5th display from the right */
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	61 e0       	ldi	r22, 0x01	; 1
    35f0:	41 e0       	ldi	r20, 0x01	; 1
    35f2:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
		Seven_Segment_display(hours_counter%10,&s_sevenSegment_init_values); /* display the units of hours on 5th display */
    35f6:	80 91 97 00 	lds	r24, 0x0097
    35fa:	9a e0       	ldi	r25, 0x0A	; 10
    35fc:	69 2f       	mov	r22, r25
    35fe:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__udivmodqi4>
    3602:	89 2f       	mov	r24, r25
    3604:	9e 01       	movw	r18, r28
    3606:	25 51       	subi	r18, 0x15	; 21
    3608:	3f 4f       	sbci	r19, 0xFF	; 255
    360a:	b9 01       	movw	r22, r18
    360c:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <Seven_Segment_display>
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	a0 ea       	ldi	r26, 0xA0	; 160
    3616:	b0 e4       	ldi	r27, 0x40	; 64
    3618:	89 8f       	std	Y+25, r24	; 0x19
    361a:	9a 8f       	std	Y+26, r25	; 0x1a
    361c:	ab 8f       	std	Y+27, r26	; 0x1b
    361e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3620:	69 8d       	ldd	r22, Y+25	; 0x19
    3622:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3624:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3626:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	4a e7       	ldi	r20, 0x7A	; 122
    362e:	55 e4       	ldi	r21, 0x45	; 69
    3630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	8d 8b       	std	Y+21, r24	; 0x15
    363a:	9e 8b       	std	Y+22, r25	; 0x16
    363c:	af 8b       	std	Y+23, r26	; 0x17
    363e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3640:	6d 89       	ldd	r22, Y+21	; 0x15
    3642:	7e 89       	ldd	r23, Y+22	; 0x16
    3644:	8f 89       	ldd	r24, Y+23	; 0x17
    3646:	98 8d       	ldd	r25, Y+24	; 0x18
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	40 e8       	ldi	r20, 0x80	; 128
    364e:	5f e3       	ldi	r21, 0x3F	; 63
    3650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3654:	88 23       	and	r24, r24
    3656:	2c f4       	brge	.+10     	; 0x3662 <main+0x2152>
		__ticks = 1;
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	9c 8b       	std	Y+20, r25	; 0x14
    365e:	8b 8b       	std	Y+19, r24	; 0x13
    3660:	3f c0       	rjmp	.+126    	; 0x36e0 <main+0x21d0>
	else if (__tmp > 65535)
    3662:	6d 89       	ldd	r22, Y+21	; 0x15
    3664:	7e 89       	ldd	r23, Y+22	; 0x16
    3666:	8f 89       	ldd	r24, Y+23	; 0x17
    3668:	98 8d       	ldd	r25, Y+24	; 0x18
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	3f ef       	ldi	r19, 0xFF	; 255
    366e:	4f e7       	ldi	r20, 0x7F	; 127
    3670:	57 e4       	ldi	r21, 0x47	; 71
    3672:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3676:	18 16       	cp	r1, r24
    3678:	4c f5       	brge	.+82     	; 0x36cc <main+0x21bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    367a:	69 8d       	ldd	r22, Y+25	; 0x19
    367c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    367e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3680:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	40 e2       	ldi	r20, 0x20	; 32
    3688:	51 e4       	ldi	r21, 0x41	; 65
    368a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	bc 01       	movw	r22, r24
    3694:	cd 01       	movw	r24, r26
    3696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	9c 8b       	std	Y+20, r25	; 0x14
    36a0:	8b 8b       	std	Y+19, r24	; 0x13
    36a2:	0f c0       	rjmp	.+30     	; 0x36c2 <main+0x21b2>
    36a4:	80 e9       	ldi	r24, 0x90	; 144
    36a6:	91 e0       	ldi	r25, 0x01	; 1
    36a8:	9a 8b       	std	Y+18, r25	; 0x12
    36aa:	89 8b       	std	Y+17, r24	; 0x11
    36ac:	89 89       	ldd	r24, Y+17	; 0x11
    36ae:	9a 89       	ldd	r25, Y+18	; 0x12
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	f1 f7       	brne	.-4      	; 0x36b0 <main+0x21a0>
    36b4:	9a 8b       	std	Y+18, r25	; 0x12
    36b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b8:	8b 89       	ldd	r24, Y+19	; 0x13
    36ba:	9c 89       	ldd	r25, Y+20	; 0x14
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	9c 8b       	std	Y+20, r25	; 0x14
    36c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c2:	8b 89       	ldd	r24, Y+19	; 0x13
    36c4:	9c 89       	ldd	r25, Y+20	; 0x14
    36c6:	00 97       	sbiw	r24, 0x00	; 0
    36c8:	69 f7       	brne	.-38     	; 0x36a4 <main+0x2194>
    36ca:	14 c0       	rjmp	.+40     	; 0x36f4 <main+0x21e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36cc:	6d 89       	ldd	r22, Y+21	; 0x15
    36ce:	7e 89       	ldd	r23, Y+22	; 0x16
    36d0:	8f 89       	ldd	r24, Y+23	; 0x17
    36d2:	98 8d       	ldd	r25, Y+24	; 0x18
    36d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	9c 8b       	std	Y+20, r25	; 0x14
    36de:	8b 8b       	std	Y+19, r24	; 0x13
    36e0:	8b 89       	ldd	r24, Y+19	; 0x13
    36e2:	9c 89       	ldd	r25, Y+20	; 0x14
    36e4:	98 8b       	std	Y+16, r25	; 0x10
    36e6:	8f 87       	std	Y+15, r24	; 0x0f
    36e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ea:	98 89       	ldd	r25, Y+16	; 0x10
    36ec:	01 97       	sbiw	r24, 0x01	; 1
    36ee:	f1 f7       	brne	.-4      	; 0x36ec <main+0x21dc>
    36f0:	98 8b       	std	Y+16, r25	; 0x10
    36f2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(MULTIPLEXING_DELAY);
		GPIO_writePin(PORTA_ID, PIN1_ID, LOGIC_LOW); /* turn off 5th display from the right */
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	61 e0       	ldi	r22, 0x01	; 1
    36f8:	40 e0       	ldi	r20, 0x00	; 0
    36fa:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>

		GPIO_writePin(PORTA_ID, PIN0_ID, LOGIC_HIGH); /* turn on 6th display from the right */
    36fe:	80 e0       	ldi	r24, 0x00	; 0
    3700:	60 e0       	ldi	r22, 0x00	; 0
    3702:	41 e0       	ldi	r20, 0x01	; 1
    3704:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>
		Seven_Segment_display(hours_counter/10,&s_sevenSegment_init_values); /* display the tens of hours on 6th display */
    3708:	80 91 97 00 	lds	r24, 0x0097
    370c:	9a e0       	ldi	r25, 0x0A	; 10
    370e:	69 2f       	mov	r22, r25
    3710:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__udivmodqi4>
    3714:	9e 01       	movw	r18, r28
    3716:	25 51       	subi	r18, 0x15	; 21
    3718:	3f 4f       	sbci	r19, 0xFF	; 255
    371a:	b9 01       	movw	r22, r18
    371c:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <Seven_Segment_display>
    3720:	80 e0       	ldi	r24, 0x00	; 0
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	a0 ea       	ldi	r26, 0xA0	; 160
    3726:	b0 e4       	ldi	r27, 0x40	; 64
    3728:	8b 87       	std	Y+11, r24	; 0x0b
    372a:	9c 87       	std	Y+12, r25	; 0x0c
    372c:	ad 87       	std	Y+13, r26	; 0x0d
    372e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3730:	6b 85       	ldd	r22, Y+11	; 0x0b
    3732:	7c 85       	ldd	r23, Y+12	; 0x0c
    3734:	8d 85       	ldd	r24, Y+13	; 0x0d
    3736:	9e 85       	ldd	r25, Y+14	; 0x0e
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	4a e7       	ldi	r20, 0x7A	; 122
    373e:	55 e4       	ldi	r21, 0x45	; 69
    3740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	8f 83       	std	Y+7, r24	; 0x07
    374a:	98 87       	std	Y+8, r25	; 0x08
    374c:	a9 87       	std	Y+9, r26	; 0x09
    374e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3750:	6f 81       	ldd	r22, Y+7	; 0x07
    3752:	78 85       	ldd	r23, Y+8	; 0x08
    3754:	89 85       	ldd	r24, Y+9	; 0x09
    3756:	9a 85       	ldd	r25, Y+10	; 0x0a
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	40 e8       	ldi	r20, 0x80	; 128
    375e:	5f e3       	ldi	r21, 0x3F	; 63
    3760:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3764:	88 23       	and	r24, r24
    3766:	2c f4       	brge	.+10     	; 0x3772 <main+0x2262>
		__ticks = 1;
    3768:	81 e0       	ldi	r24, 0x01	; 1
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	9e 83       	std	Y+6, r25	; 0x06
    376e:	8d 83       	std	Y+5, r24	; 0x05
    3770:	3f c0       	rjmp	.+126    	; 0x37f0 <main+0x22e0>
	else if (__tmp > 65535)
    3772:	6f 81       	ldd	r22, Y+7	; 0x07
    3774:	78 85       	ldd	r23, Y+8	; 0x08
    3776:	89 85       	ldd	r24, Y+9	; 0x09
    3778:	9a 85       	ldd	r25, Y+10	; 0x0a
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	3f ef       	ldi	r19, 0xFF	; 255
    377e:	4f e7       	ldi	r20, 0x7F	; 127
    3780:	57 e4       	ldi	r21, 0x47	; 71
    3782:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3786:	18 16       	cp	r1, r24
    3788:	4c f5       	brge	.+82     	; 0x37dc <main+0x22cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    378a:	6b 85       	ldd	r22, Y+11	; 0x0b
    378c:	7c 85       	ldd	r23, Y+12	; 0x0c
    378e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3790:	9e 85       	ldd	r25, Y+14	; 0x0e
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 e2       	ldi	r20, 0x20	; 32
    3798:	51 e4       	ldi	r21, 0x41	; 65
    379a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	bc 01       	movw	r22, r24
    37a4:	cd 01       	movw	r24, r26
    37a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	9e 83       	std	Y+6, r25	; 0x06
    37b0:	8d 83       	std	Y+5, r24	; 0x05
    37b2:	0f c0       	rjmp	.+30     	; 0x37d2 <main+0x22c2>
    37b4:	80 e9       	ldi	r24, 0x90	; 144
    37b6:	91 e0       	ldi	r25, 0x01	; 1
    37b8:	9c 83       	std	Y+4, r25	; 0x04
    37ba:	8b 83       	std	Y+3, r24	; 0x03
    37bc:	8b 81       	ldd	r24, Y+3	; 0x03
    37be:	9c 81       	ldd	r25, Y+4	; 0x04
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	f1 f7       	brne	.-4      	; 0x37c0 <main+0x22b0>
    37c4:	9c 83       	std	Y+4, r25	; 0x04
    37c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ca:	9e 81       	ldd	r25, Y+6	; 0x06
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	9e 83       	std	Y+6, r25	; 0x06
    37d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d2:	8d 81       	ldd	r24, Y+5	; 0x05
    37d4:	9e 81       	ldd	r25, Y+6	; 0x06
    37d6:	00 97       	sbiw	r24, 0x00	; 0
    37d8:	69 f7       	brne	.-38     	; 0x37b4 <main+0x22a4>
    37da:	14 c0       	rjmp	.+40     	; 0x3804 <main+0x22f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37dc:	6f 81       	ldd	r22, Y+7	; 0x07
    37de:	78 85       	ldd	r23, Y+8	; 0x08
    37e0:	89 85       	ldd	r24, Y+9	; 0x09
    37e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	9e 83       	std	Y+6, r25	; 0x06
    37ee:	8d 83       	std	Y+5, r24	; 0x05
    37f0:	8d 81       	ldd	r24, Y+5	; 0x05
    37f2:	9e 81       	ldd	r25, Y+6	; 0x06
    37f4:	9a 83       	std	Y+2, r25	; 0x02
    37f6:	89 83       	std	Y+1, r24	; 0x01
    37f8:	89 81       	ldd	r24, Y+1	; 0x01
    37fa:	9a 81       	ldd	r25, Y+2	; 0x02
    37fc:	01 97       	sbiw	r24, 0x01	; 1
    37fe:	f1 f7       	brne	.-4      	; 0x37fc <main+0x22ec>
    3800:	9a 83       	std	Y+2, r25	; 0x02
    3802:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(MULTIPLEXING_DELAY);
		GPIO_writePin(PORTA_ID, PIN0_ID, LOGIC_LOW); /* turn off 6th display from the right */
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	60 e0       	ldi	r22, 0x00	; 0
    3808:	40 e0       	ldi	r20, 0x00	; 0
    380a:	0e 94 34 07 	call	0xe68	; 0xe68 <GPIO_writePin>


		/*********** Buzzer state ***********/
		if(target_reached_flag && !buzzer_state) /* if target reached and buzzer is off */
    380e:	80 91 99 00 	lds	r24, 0x0099
    3812:	88 23       	and	r24, r24
    3814:	71 f0       	breq	.+28     	; 0x3832 <main+0x2322>
    3816:	80 91 98 00 	lds	r24, 0x0098
    381a:	88 23       	and	r24, r24
    381c:	51 f4       	brne	.+20     	; 0x3832 <main+0x2322>
		{
			Buzzer_on(&s_buzzer_init_values); /* turn buzzer on */
    381e:	ce 01       	movw	r24, r28
    3820:	87 51       	subi	r24, 0x17	; 23
    3822:	9f 4f       	sbci	r25, 0xFF	; 255
    3824:	0e 94 1d 06 	call	0xc3a	; 0xc3a <Buzzer_on>
			buzzer_state = BUZZER_STATE_ON; /* update buzzer state to be on */
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	80 93 98 00 	sts	0x0098, r24
    382e:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <main+0x9c2>
		}
		else if(!target_reached_flag && buzzer_state) /* if target is not reached and buzzer is on */
    3832:	80 91 99 00 	lds	r24, 0x0099
    3836:	88 23       	and	r24, r24
    3838:	11 f0       	breq	.+4      	; 0x383e <main+0x232e>
    383a:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <main+0x9c2>
    383e:	80 91 98 00 	lds	r24, 0x0098
    3842:	88 23       	and	r24, r24
    3844:	11 f4       	brne	.+4      	; 0x384a <main+0x233a>
    3846:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <main+0x9c2>
		{
			Buzzer_off(&s_buzzer_init_values); /* turn buzzer off */
    384a:	ce 01       	movw	r24, r28
    384c:	87 51       	subi	r24, 0x17	; 23
    384e:	9f 4f       	sbci	r25, 0xFF	; 255
    3850:	0e 94 33 06 	call	0xc66	; 0xc66 <Buzzer_off>
			buzzer_state = BUZZER_STATE_OFF; /* update buzzer state to be off */
    3854:	10 92 98 00 	sts	0x0098, r1
    3858:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <main+0x9c2>

0000385c <count_up_mode>:

/*********************************************************************************
 * function definition
 *********************************************************************************/
void count_up_mode(void)
{
    385c:	df 93       	push	r29
    385e:	cf 93       	push	r28
    3860:	cd b7       	in	r28, 0x3d	; 61
    3862:	de b7       	in	r29, 0x3e	; 62
	/* check if target is reached */
	switch(target_reached_flag)
    3864:	80 91 99 00 	lds	r24, 0x0099
    3868:	88 2f       	mov	r24, r24
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	00 97       	sbiw	r24, 0x00	; 0
    386e:	39 f5       	brne	.+78     	; 0x38be <count_up_mode+0x62>
	{
	case TARGET_REACHED: /* if target is reached (99:59:59), do not add values */
		break;
	case TARGET_NOT_REACHED: /* if target is not reached (99:59:59), add values */
		if(seconds_counter<59) /* if seconds counter is 58 or less */
    3870:	80 91 95 00 	lds	r24, 0x0095
    3874:	8b 33       	cpi	r24, 0x3B	; 59
    3876:	30 f4       	brcc	.+12     	; 0x3884 <count_up_mode+0x28>
		{
			seconds_counter++; /* increment time by 1 second */
    3878:	80 91 95 00 	lds	r24, 0x0095
    387c:	8f 5f       	subi	r24, 0xFF	; 255
    387e:	80 93 95 00 	sts	0x0095, r24
    3882:	1d c0       	rjmp	.+58     	; 0x38be <count_up_mode+0x62>
		}
		else
		{
			if(minutes_counter<59) /* if minutes counter is 58 or less */
    3884:	80 91 96 00 	lds	r24, 0x0096
    3888:	8b 33       	cpi	r24, 0x3B	; 59
    388a:	40 f4       	brcc	.+16     	; 0x389c <count_up_mode+0x40>
			{
				seconds_counter = 0; /* reset seconds counter */
    388c:	10 92 95 00 	sts	0x0095, r1
				minutes_counter++; /* increment time by 1 minute */
    3890:	80 91 96 00 	lds	r24, 0x0096
    3894:	8f 5f       	subi	r24, 0xFF	; 255
    3896:	80 93 96 00 	sts	0x0096, r24
    389a:	11 c0       	rjmp	.+34     	; 0x38be <count_up_mode+0x62>
			}
			else
			{
				if(hours_counter<99) /* if hours counter is 99 or less */
    389c:	80 91 97 00 	lds	r24, 0x0097
    38a0:	83 36       	cpi	r24, 0x63	; 99
    38a2:	50 f4       	brcc	.+20     	; 0x38b8 <count_up_mode+0x5c>
				{
					seconds_counter = 0; /* reset seconds counter */
    38a4:	10 92 95 00 	sts	0x0095, r1
					minutes_counter = 0; /* reset minutes counter */
    38a8:	10 92 96 00 	sts	0x0096, r1
					hours_counter++; /* increment time by 1 hour */
    38ac:	80 91 97 00 	lds	r24, 0x0097
    38b0:	8f 5f       	subi	r24, 0xFF	; 255
    38b2:	80 93 97 00 	sts	0x0097, r24
    38b6:	03 c0       	rjmp	.+6      	; 0x38be <count_up_mode+0x62>
				}
				else
				{
					target_reached_flag = 1; /* timer reached maximum value 99:59:59 */
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	80 93 99 00 	sts	0x0099, r24
				}
			}
		}
		break;
	}
}
    38be:	cf 91       	pop	r28
    38c0:	df 91       	pop	r29
    38c2:	08 95       	ret

000038c4 <count_down_mode>:

void count_down_mode(void)
{
    38c4:	df 93       	push	r29
    38c6:	cf 93       	push	r28
    38c8:	cd b7       	in	r28, 0x3d	; 61
    38ca:	de b7       	in	r29, 0x3e	; 62
	/* check if target is reached */
	switch(target_reached_flag)
    38cc:	80 91 99 00 	lds	r24, 0x0099
    38d0:	88 2f       	mov	r24, r24
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	00 97       	sbiw	r24, 0x00	; 0
    38d6:	51 f5       	brne	.+84     	; 0x392c <count_down_mode+0x68>
	{
	case TARGET_REACHED: /* if target is reached (00:00:00), do not decrement values */
		break;
	case TARGET_NOT_REACHED: /* if target is not reached (00:00:00), decrement values */
		if(seconds_counter>0) /* if seconds counter is more than 0 */
    38d8:	80 91 95 00 	lds	r24, 0x0095
    38dc:	88 23       	and	r24, r24
    38de:	31 f0       	breq	.+12     	; 0x38ec <count_down_mode+0x28>
		{
			seconds_counter--; /* decrement time by 1 second */
    38e0:	80 91 95 00 	lds	r24, 0x0095
    38e4:	81 50       	subi	r24, 0x01	; 1
    38e6:	80 93 95 00 	sts	0x0095, r24
    38ea:	20 c0       	rjmp	.+64     	; 0x392c <count_down_mode+0x68>
		}
		else
		{
			if(minutes_counter>0) /* if minutes counter is more than 0 */
    38ec:	80 91 96 00 	lds	r24, 0x0096
    38f0:	88 23       	and	r24, r24
    38f2:	49 f0       	breq	.+18     	; 0x3906 <count_down_mode+0x42>
			{
				minutes_counter--; /* decrement time by 1 minute */
    38f4:	80 91 96 00 	lds	r24, 0x0096
    38f8:	81 50       	subi	r24, 0x01	; 1
    38fa:	80 93 96 00 	sts	0x0096, r24
				seconds_counter = 59; /* recount from 59 seconds */
    38fe:	8b e3       	ldi	r24, 0x3B	; 59
    3900:	80 93 95 00 	sts	0x0095, r24
    3904:	13 c0       	rjmp	.+38     	; 0x392c <count_down_mode+0x68>
			}
			else
			{
				if(hours_counter>0) /* if hours counter is more than 0 */
    3906:	80 91 97 00 	lds	r24, 0x0097
    390a:	88 23       	and	r24, r24
    390c:	61 f0       	breq	.+24     	; 0x3926 <count_down_mode+0x62>
				{
					hours_counter--; /* decrement time by 1 hour */
    390e:	80 91 97 00 	lds	r24, 0x0097
    3912:	81 50       	subi	r24, 0x01	; 1
    3914:	80 93 97 00 	sts	0x0097, r24
					minutes_counter = 59; /* recount from 59 minutes */
    3918:	8b e3       	ldi	r24, 0x3B	; 59
    391a:	80 93 96 00 	sts	0x0096, r24
					seconds_counter = 59; /* recount from 59 seconds */
    391e:	8b e3       	ldi	r24, 0x3B	; 59
    3920:	80 93 95 00 	sts	0x0095, r24
    3924:	03 c0       	rjmp	.+6      	; 0x392c <count_down_mode+0x68>
				}
				else
				{
					target_reached_flag = 1; /* timer reached value 00:00:00 in count down */
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	80 93 99 00 	sts	0x0099, r24
		}
		break;
	}


}
    392c:	cf 91       	pop	r28
    392e:	df 91       	pop	r29
    3930:	08 95       	ret

00003932 <__vector_11>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    3932:	1f 92       	push	r1
    3934:	0f 92       	push	r0
    3936:	0f b6       	in	r0, 0x3f	; 63
    3938:	0f 92       	push	r0
    393a:	11 24       	eor	r1, r1
    393c:	2f 93       	push	r18
    393e:	3f 93       	push	r19
    3940:	4f 93       	push	r20
    3942:	5f 93       	push	r21
    3944:	6f 93       	push	r22
    3946:	7f 93       	push	r23
    3948:	8f 93       	push	r24
    394a:	9f 93       	push	r25
    394c:	af 93       	push	r26
    394e:	bf 93       	push	r27
    3950:	ef 93       	push	r30
    3952:	ff 93       	push	r31
    3954:	df 93       	push	r29
    3956:	cf 93       	push	r28
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
	if(s_timer0CallbackPtr != NULL_PTR)
    395c:	80 91 9c 00 	lds	r24, 0x009C
    3960:	90 91 9d 00 	lds	r25, 0x009D
    3964:	00 97       	sbiw	r24, 0x00	; 0
    3966:	29 f0       	breq	.+10     	; 0x3972 <__vector_11+0x40>
	{
		(*s_timer0CallbackPtr)();
    3968:	e0 91 9c 00 	lds	r30, 0x009C
    396c:	f0 91 9d 00 	lds	r31, 0x009D
    3970:	09 95       	icall
	}
}
    3972:	cf 91       	pop	r28
    3974:	df 91       	pop	r29
    3976:	ff 91       	pop	r31
    3978:	ef 91       	pop	r30
    397a:	bf 91       	pop	r27
    397c:	af 91       	pop	r26
    397e:	9f 91       	pop	r25
    3980:	8f 91       	pop	r24
    3982:	7f 91       	pop	r23
    3984:	6f 91       	pop	r22
    3986:	5f 91       	pop	r21
    3988:	4f 91       	pop	r20
    398a:	3f 91       	pop	r19
    398c:	2f 91       	pop	r18
    398e:	0f 90       	pop	r0
    3990:	0f be       	out	0x3f, r0	; 63
    3992:	0f 90       	pop	r0
    3994:	1f 90       	pop	r1
    3996:	18 95       	reti

00003998 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    3998:	1f 92       	push	r1
    399a:	0f 92       	push	r0
    399c:	0f b6       	in	r0, 0x3f	; 63
    399e:	0f 92       	push	r0
    39a0:	11 24       	eor	r1, r1
    39a2:	2f 93       	push	r18
    39a4:	3f 93       	push	r19
    39a6:	4f 93       	push	r20
    39a8:	5f 93       	push	r21
    39aa:	6f 93       	push	r22
    39ac:	7f 93       	push	r23
    39ae:	8f 93       	push	r24
    39b0:	9f 93       	push	r25
    39b2:	af 93       	push	r26
    39b4:	bf 93       	push	r27
    39b6:	ef 93       	push	r30
    39b8:	ff 93       	push	r31
    39ba:	df 93       	push	r29
    39bc:	cf 93       	push	r28
    39be:	cd b7       	in	r28, 0x3d	; 61
    39c0:	de b7       	in	r29, 0x3e	; 62
	if(s_timer0CallbackPtr != NULL_PTR)
    39c2:	80 91 9c 00 	lds	r24, 0x009C
    39c6:	90 91 9d 00 	lds	r25, 0x009D
    39ca:	00 97       	sbiw	r24, 0x00	; 0
    39cc:	29 f0       	breq	.+10     	; 0x39d8 <__vector_10+0x40>
	{
		(*s_timer0CallbackPtr)();
    39ce:	e0 91 9c 00 	lds	r30, 0x009C
    39d2:	f0 91 9d 00 	lds	r31, 0x009D
    39d6:	09 95       	icall
	}
}
    39d8:	cf 91       	pop	r28
    39da:	df 91       	pop	r29
    39dc:	ff 91       	pop	r31
    39de:	ef 91       	pop	r30
    39e0:	bf 91       	pop	r27
    39e2:	af 91       	pop	r26
    39e4:	9f 91       	pop	r25
    39e6:	8f 91       	pop	r24
    39e8:	7f 91       	pop	r23
    39ea:	6f 91       	pop	r22
    39ec:	5f 91       	pop	r21
    39ee:	4f 91       	pop	r20
    39f0:	3f 91       	pop	r19
    39f2:	2f 91       	pop	r18
    39f4:	0f 90       	pop	r0
    39f6:	0f be       	out	0x3f, r0	; 63
    39f8:	0f 90       	pop	r0
    39fa:	1f 90       	pop	r1
    39fc:	18 95       	reti

000039fe <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    39fe:	1f 92       	push	r1
    3a00:	0f 92       	push	r0
    3a02:	0f b6       	in	r0, 0x3f	; 63
    3a04:	0f 92       	push	r0
    3a06:	11 24       	eor	r1, r1
    3a08:	2f 93       	push	r18
    3a0a:	3f 93       	push	r19
    3a0c:	4f 93       	push	r20
    3a0e:	5f 93       	push	r21
    3a10:	6f 93       	push	r22
    3a12:	7f 93       	push	r23
    3a14:	8f 93       	push	r24
    3a16:	9f 93       	push	r25
    3a18:	af 93       	push	r26
    3a1a:	bf 93       	push	r27
    3a1c:	ef 93       	push	r30
    3a1e:	ff 93       	push	r31
    3a20:	df 93       	push	r29
    3a22:	cf 93       	push	r28
    3a24:	cd b7       	in	r28, 0x3d	; 61
    3a26:	de b7       	in	r29, 0x3e	; 62
	if(s_timer1CallbackPtr != NULL_PTR)
    3a28:	80 91 9e 00 	lds	r24, 0x009E
    3a2c:	90 91 9f 00 	lds	r25, 0x009F
    3a30:	00 97       	sbiw	r24, 0x00	; 0
    3a32:	29 f0       	breq	.+10     	; 0x3a3e <__vector_9+0x40>
	{
		(*s_timer1CallbackPtr)();
    3a34:	e0 91 9e 00 	lds	r30, 0x009E
    3a38:	f0 91 9f 00 	lds	r31, 0x009F
    3a3c:	09 95       	icall
	}
}
    3a3e:	cf 91       	pop	r28
    3a40:	df 91       	pop	r29
    3a42:	ff 91       	pop	r31
    3a44:	ef 91       	pop	r30
    3a46:	bf 91       	pop	r27
    3a48:	af 91       	pop	r26
    3a4a:	9f 91       	pop	r25
    3a4c:	8f 91       	pop	r24
    3a4e:	7f 91       	pop	r23
    3a50:	6f 91       	pop	r22
    3a52:	5f 91       	pop	r21
    3a54:	4f 91       	pop	r20
    3a56:	3f 91       	pop	r19
    3a58:	2f 91       	pop	r18
    3a5a:	0f 90       	pop	r0
    3a5c:	0f be       	out	0x3f, r0	; 63
    3a5e:	0f 90       	pop	r0
    3a60:	1f 90       	pop	r1
    3a62:	18 95       	reti

00003a64 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    3a64:	1f 92       	push	r1
    3a66:	0f 92       	push	r0
    3a68:	0f b6       	in	r0, 0x3f	; 63
    3a6a:	0f 92       	push	r0
    3a6c:	11 24       	eor	r1, r1
    3a6e:	2f 93       	push	r18
    3a70:	3f 93       	push	r19
    3a72:	4f 93       	push	r20
    3a74:	5f 93       	push	r21
    3a76:	6f 93       	push	r22
    3a78:	7f 93       	push	r23
    3a7a:	8f 93       	push	r24
    3a7c:	9f 93       	push	r25
    3a7e:	af 93       	push	r26
    3a80:	bf 93       	push	r27
    3a82:	ef 93       	push	r30
    3a84:	ff 93       	push	r31
    3a86:	df 93       	push	r29
    3a88:	cf 93       	push	r28
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
	if(s_timer1CallbackPtr != NULL_PTR)
    3a8e:	80 91 9e 00 	lds	r24, 0x009E
    3a92:	90 91 9f 00 	lds	r25, 0x009F
    3a96:	00 97       	sbiw	r24, 0x00	; 0
    3a98:	29 f0       	breq	.+10     	; 0x3aa4 <__vector_7+0x40>
	{
		(*s_timer1CallbackPtr)();
    3a9a:	e0 91 9e 00 	lds	r30, 0x009E
    3a9e:	f0 91 9f 00 	lds	r31, 0x009F
    3aa2:	09 95       	icall
	}
}
    3aa4:	cf 91       	pop	r28
    3aa6:	df 91       	pop	r29
    3aa8:	ff 91       	pop	r31
    3aaa:	ef 91       	pop	r30
    3aac:	bf 91       	pop	r27
    3aae:	af 91       	pop	r26
    3ab0:	9f 91       	pop	r25
    3ab2:	8f 91       	pop	r24
    3ab4:	7f 91       	pop	r23
    3ab6:	6f 91       	pop	r22
    3ab8:	5f 91       	pop	r21
    3aba:	4f 91       	pop	r20
    3abc:	3f 91       	pop	r19
    3abe:	2f 91       	pop	r18
    3ac0:	0f 90       	pop	r0
    3ac2:	0f be       	out	0x3f, r0	; 63
    3ac4:	0f 90       	pop	r0
    3ac6:	1f 90       	pop	r1
    3ac8:	18 95       	reti

00003aca <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    3aca:	1f 92       	push	r1
    3acc:	0f 92       	push	r0
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	0f 92       	push	r0
    3ad2:	11 24       	eor	r1, r1
    3ad4:	2f 93       	push	r18
    3ad6:	3f 93       	push	r19
    3ad8:	4f 93       	push	r20
    3ada:	5f 93       	push	r21
    3adc:	6f 93       	push	r22
    3ade:	7f 93       	push	r23
    3ae0:	8f 93       	push	r24
    3ae2:	9f 93       	push	r25
    3ae4:	af 93       	push	r26
    3ae6:	bf 93       	push	r27
    3ae8:	ef 93       	push	r30
    3aea:	ff 93       	push	r31
    3aec:	df 93       	push	r29
    3aee:	cf 93       	push	r28
    3af0:	cd b7       	in	r28, 0x3d	; 61
    3af2:	de b7       	in	r29, 0x3e	; 62
	if(s_timer2CallbackPtr != NULL_PTR)
    3af4:	80 91 a0 00 	lds	r24, 0x00A0
    3af8:	90 91 a1 00 	lds	r25, 0x00A1
    3afc:	00 97       	sbiw	r24, 0x00	; 0
    3afe:	29 f0       	breq	.+10     	; 0x3b0a <__vector_5+0x40>
	{
		(*s_timer2CallbackPtr)();
    3b00:	e0 91 a0 00 	lds	r30, 0x00A0
    3b04:	f0 91 a1 00 	lds	r31, 0x00A1
    3b08:	09 95       	icall
	}
}
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	ff 91       	pop	r31
    3b10:	ef 91       	pop	r30
    3b12:	bf 91       	pop	r27
    3b14:	af 91       	pop	r26
    3b16:	9f 91       	pop	r25
    3b18:	8f 91       	pop	r24
    3b1a:	7f 91       	pop	r23
    3b1c:	6f 91       	pop	r22
    3b1e:	5f 91       	pop	r21
    3b20:	4f 91       	pop	r20
    3b22:	3f 91       	pop	r19
    3b24:	2f 91       	pop	r18
    3b26:	0f 90       	pop	r0
    3b28:	0f be       	out	0x3f, r0	; 63
    3b2a:	0f 90       	pop	r0
    3b2c:	1f 90       	pop	r1
    3b2e:	18 95       	reti

00003b30 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    3b30:	1f 92       	push	r1
    3b32:	0f 92       	push	r0
    3b34:	0f b6       	in	r0, 0x3f	; 63
    3b36:	0f 92       	push	r0
    3b38:	11 24       	eor	r1, r1
    3b3a:	2f 93       	push	r18
    3b3c:	3f 93       	push	r19
    3b3e:	4f 93       	push	r20
    3b40:	5f 93       	push	r21
    3b42:	6f 93       	push	r22
    3b44:	7f 93       	push	r23
    3b46:	8f 93       	push	r24
    3b48:	9f 93       	push	r25
    3b4a:	af 93       	push	r26
    3b4c:	bf 93       	push	r27
    3b4e:	ef 93       	push	r30
    3b50:	ff 93       	push	r31
    3b52:	df 93       	push	r29
    3b54:	cf 93       	push	r28
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
	if(s_timer2CallbackPtr != NULL_PTR)
    3b5a:	80 91 a0 00 	lds	r24, 0x00A0
    3b5e:	90 91 a1 00 	lds	r25, 0x00A1
    3b62:	00 97       	sbiw	r24, 0x00	; 0
    3b64:	29 f0       	breq	.+10     	; 0x3b70 <__vector_4+0x40>
	{
		(*s_timer2CallbackPtr)();
    3b66:	e0 91 a0 00 	lds	r30, 0x00A0
    3b6a:	f0 91 a1 00 	lds	r31, 0x00A1
    3b6e:	09 95       	icall
	}
}
    3b70:	cf 91       	pop	r28
    3b72:	df 91       	pop	r29
    3b74:	ff 91       	pop	r31
    3b76:	ef 91       	pop	r30
    3b78:	bf 91       	pop	r27
    3b7a:	af 91       	pop	r26
    3b7c:	9f 91       	pop	r25
    3b7e:	8f 91       	pop	r24
    3b80:	7f 91       	pop	r23
    3b82:	6f 91       	pop	r22
    3b84:	5f 91       	pop	r21
    3b86:	4f 91       	pop	r20
    3b88:	3f 91       	pop	r19
    3b8a:	2f 91       	pop	r18
    3b8c:	0f 90       	pop	r0
    3b8e:	0f be       	out	0x3f, r0	; 63
    3b90:	0f 90       	pop	r0
    3b92:	1f 90       	pop	r1
    3b94:	18 95       	reti

00003b96 <Timer_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    3b96:	df 93       	push	r29
    3b98:	cf 93       	push	r28
    3b9a:	00 d0       	rcall	.+0      	; 0x3b9c <Timer_init+0x6>
    3b9c:	00 d0       	rcall	.+0      	; 0x3b9e <Timer_init+0x8>
    3b9e:	cd b7       	in	r28, 0x3d	; 61
    3ba0:	de b7       	in	r29, 0x3e	; 62
    3ba2:	9a 83       	std	Y+2, r25	; 0x02
    3ba4:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID)
    3ba6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ba8:	fa 81       	ldd	r31, Y+2	; 0x02
    3baa:	84 81       	ldd	r24, Z+4	; 0x04
    3bac:	28 2f       	mov	r18, r24
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	3c 83       	std	Y+4, r19	; 0x04
    3bb2:	2b 83       	std	Y+3, r18	; 0x03
    3bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb8:	81 30       	cpi	r24, 0x01	; 1
    3bba:	91 05       	cpc	r25, r1
    3bbc:	09 f4       	brne	.+2      	; 0x3bc0 <Timer_init+0x2a>
    3bbe:	63 c0       	rjmp	.+198    	; 0x3c86 <Timer_init+0xf0>
    3bc0:	2b 81       	ldd	r18, Y+3	; 0x03
    3bc2:	3c 81       	ldd	r19, Y+4	; 0x04
    3bc4:	22 30       	cpi	r18, 0x02	; 2
    3bc6:	31 05       	cpc	r19, r1
    3bc8:	09 f4       	brne	.+2      	; 0x3bcc <Timer_init+0x36>
    3bca:	ba c0       	rjmp	.+372    	; 0x3d40 <Timer_init+0x1aa>
    3bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bce:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd0:	00 97       	sbiw	r24, 0x00	; 0
    3bd2:	09 f0       	breq	.+2      	; 0x3bd6 <Timer_init+0x40>
    3bd4:	12 c1       	rjmp	.+548    	; 0x3dfa <Timer_init+0x264>
		 * WGM00:01 if WGM01 = 0 -> normal else WGM01 = 1 -> CTC
		 * COM00:01 to decide the effect the timer has on pin OC0
		 * CS00:02 to choose clock type*/


		TCCR0 |= (1<<FOC0); /*set FOC0 to 1 is non-pwm mode*/
    3bd6:	a3 e5       	ldi	r26, 0x53	; 83
    3bd8:	b0 e0       	ldi	r27, 0x00	; 0
    3bda:	e3 e5       	ldi	r30, 0x53	; 83
    3bdc:	f0 e0       	ldi	r31, 0x00	; 0
    3bde:	80 81       	ld	r24, Z
    3be0:	80 68       	ori	r24, 0x80	; 128
    3be2:	8c 93       	st	X, r24

		/*if Config_Ptr->timer_mode = 0 then Normal mode
		 *if Config_Ptr->timer_mode = 1 then CTC mode*/
		TCCR0 |= ((Config_Ptr->timer_mode)<<WGM01); /*decide wave generation mode normal/CTC*/
    3be4:	a3 e5       	ldi	r26, 0x53	; 83
    3be6:	b0 e0       	ldi	r27, 0x00	; 0
    3be8:	e3 e5       	ldi	r30, 0x53	; 83
    3bea:	f0 e0       	ldi	r31, 0x00	; 0
    3bec:	80 81       	ld	r24, Z
    3bee:	28 2f       	mov	r18, r24
    3bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    3bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    3bf4:	86 81       	ldd	r24, Z+6	; 0x06
    3bf6:	88 2f       	mov	r24, r24
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	88 0f       	add	r24, r24
    3bfc:	99 1f       	adc	r25, r25
    3bfe:	88 0f       	add	r24, r24
    3c00:	99 1f       	adc	r25, r25
    3c02:	88 0f       	add	r24, r24
    3c04:	99 1f       	adc	r25, r25
    3c06:	82 2b       	or	r24, r18
    3c08:	8c 93       	st	X, r24

		if(Config_Ptr->timer_clock & 0x08) /*clockType have a value of 8 or more*/
    3c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    3c0e:	85 81       	ldd	r24, Z+5	; 0x05
    3c10:	88 2f       	mov	r24, r24
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	88 70       	andi	r24, 0x08	; 8
    3c16:	90 70       	andi	r25, 0x00	; 0
    3c18:	00 97       	sbiw	r24, 0x00	; 0
    3c1a:	69 f4       	brne	.+26     	; 0x3c36 <Timer_init+0xa0>
		}
		else
		{
			/* set values of CS10:12 to decide the timer clock
			 * CS10:12 are the first 3 bits in TCCR0 register*/
			TCCR0 = (TCCR0 & 0xf8) | (Config_Ptr->timer_clock & 0x07);
    3c1c:	a3 e5       	ldi	r26, 0x53	; 83
    3c1e:	b0 e0       	ldi	r27, 0x00	; 0
    3c20:	e3 e5       	ldi	r30, 0x53	; 83
    3c22:	f0 e0       	ldi	r31, 0x00	; 0
    3c24:	80 81       	ld	r24, Z
    3c26:	98 2f       	mov	r25, r24
    3c28:	98 7f       	andi	r25, 0xF8	; 248
    3c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    3c2e:	85 81       	ldd	r24, Z+5	; 0x05
    3c30:	87 70       	andi	r24, 0x07	; 7
    3c32:	89 2b       	or	r24, r25
    3c34:	8c 93       	st	X, r24
		}

		/*********TCNT0********
		 * set starting value of timer*/
		TCNT0 = (Config_Ptr->timer_InitialValue & 0x00FF); /*take 1st 8-bits only (timer0 is 8-bit timer)*/
    3c36:	a2 e5       	ldi	r26, 0x52	; 82
    3c38:	b0 e0       	ldi	r27, 0x00	; 0
    3c3a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c3c:	fa 81       	ldd	r31, Y+2	; 0x02
    3c3e:	80 81       	ld	r24, Z
    3c40:	91 81       	ldd	r25, Z+1	; 0x01
    3c42:	8c 93       	st	X, r24

		/*********OCR0*********/
		if(Config_Ptr->timer_mode==compareMode)
    3c44:	e9 81       	ldd	r30, Y+1	; 0x01
    3c46:	fa 81       	ldd	r31, Y+2	; 0x02
    3c48:	86 81       	ldd	r24, Z+6	; 0x06
    3c4a:	81 30       	cpi	r24, 0x01	; 1
    3c4c:	39 f4       	brne	.+14     	; 0x3c5c <Timer_init+0xc6>
			OCR0 = (Config_Ptr->timer_compare_MatchValue & 0x00FF); /*take 1st 8-bits only (timer0 is 8-bit timer)*/
    3c4e:	ac e5       	ldi	r26, 0x5C	; 92
    3c50:	b0 e0       	ldi	r27, 0x00	; 0
    3c52:	e9 81       	ldd	r30, Y+1	; 0x01
    3c54:	fa 81       	ldd	r31, Y+2	; 0x02
    3c56:	82 81       	ldd	r24, Z+2	; 0x02
    3c58:	93 81       	ldd	r25, Z+3	; 0x03
    3c5a:	8c 93       	st	X, r24

		/******TIMSK******/
		if(Config_Ptr->timer_mode==normalMode)
    3c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c60:	86 81       	ldd	r24, Z+6	; 0x06
    3c62:	88 23       	and	r24, r24
    3c64:	41 f4       	brne	.+16     	; 0x3c76 <Timer_init+0xe0>
			TIMSK |= (1<<TOIE0); /*enable interrupt on overflow mode*/
    3c66:	a9 e5       	ldi	r26, 0x59	; 89
    3c68:	b0 e0       	ldi	r27, 0x00	; 0
    3c6a:	e9 e5       	ldi	r30, 0x59	; 89
    3c6c:	f0 e0       	ldi	r31, 0x00	; 0
    3c6e:	80 81       	ld	r24, Z
    3c70:	81 60       	ori	r24, 0x01	; 1
    3c72:	8c 93       	st	X, r24
    3c74:	c2 c0       	rjmp	.+388    	; 0x3dfa <Timer_init+0x264>
		else
			TIMSK |= (1<<OCIE0); /*enable interrupt on CTC mode*/
    3c76:	a9 e5       	ldi	r26, 0x59	; 89
    3c78:	b0 e0       	ldi	r27, 0x00	; 0
    3c7a:	e9 e5       	ldi	r30, 0x59	; 89
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	80 81       	ld	r24, Z
    3c80:	82 60       	ori	r24, 0x02	; 2
    3c82:	8c 93       	st	X, r24
    3c84:	ba c0       	rjmp	.+372    	; 0x3dfa <Timer_init+0x264>
		 * FOC1A:B set to 1 in non_pwm mode
		 * COM1B0:1 and COM1A0:1 to decide the effect the timer has on pin OC1A and OC1B
		 */


		TCCR1A |= (1<<FOC1A) | (1<<FOC1B); /*set FOC0 to 1 is non-pwm mode*/
    3c86:	af e4       	ldi	r26, 0x4F	; 79
    3c88:	b0 e0       	ldi	r27, 0x00	; 0
    3c8a:	ef e4       	ldi	r30, 0x4F	; 79
    3c8c:	f0 e0       	ldi	r31, 0x00	; 0
    3c8e:	80 81       	ld	r24, Z
    3c90:	8c 60       	ori	r24, 0x0C	; 12
    3c92:	8c 93       	st	X, r24
		 * WGM12 if WGM12 = 0 -> normal else WGM12 = 1 -> CTC
		 * CS10:12 to choose clock type*/

		/*if Config_Ptr->timer_mode = 0 then Normal mode
		 *if Config_Ptr->timer_mode = 1 then CTC mode*/
		TCCR1B |= ((Config_Ptr->timer_mode)<<WGM12); /*decide wave generation mode normal/CTC*/
    3c94:	ae e4       	ldi	r26, 0x4E	; 78
    3c96:	b0 e0       	ldi	r27, 0x00	; 0
    3c98:	ee e4       	ldi	r30, 0x4E	; 78
    3c9a:	f0 e0       	ldi	r31, 0x00	; 0
    3c9c:	80 81       	ld	r24, Z
    3c9e:	28 2f       	mov	r18, r24
    3ca0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ca2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ca4:	86 81       	ldd	r24, Z+6	; 0x06
    3ca6:	88 2f       	mov	r24, r24
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	88 0f       	add	r24, r24
    3cac:	99 1f       	adc	r25, r25
    3cae:	88 0f       	add	r24, r24
    3cb0:	99 1f       	adc	r25, r25
    3cb2:	88 0f       	add	r24, r24
    3cb4:	99 1f       	adc	r25, r25
    3cb6:	82 2b       	or	r24, r18
    3cb8:	8c 93       	st	X, r24

		if(Config_Ptr->timer_clock & 0x08) /*clockType have a value of 8 or more*/
    3cba:	e9 81       	ldd	r30, Y+1	; 0x01
    3cbc:	fa 81       	ldd	r31, Y+2	; 0x02
    3cbe:	85 81       	ldd	r24, Z+5	; 0x05
    3cc0:	88 2f       	mov	r24, r24
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	88 70       	andi	r24, 0x08	; 8
    3cc6:	90 70       	andi	r25, 0x00	; 0
    3cc8:	00 97       	sbiw	r24, 0x00	; 0
    3cca:	69 f4       	brne	.+26     	; 0x3ce6 <Timer_init+0x150>
		}
		else
		{
			/* set values of CS10:12 to decide the timer clock
			 * CS10:12 are the first 3 bits in TCCR0 register*/
			TCCR1B = (TCCR1B & 0xf8) | (Config_Ptr->timer_clock & 0x07);
    3ccc:	ae e4       	ldi	r26, 0x4E	; 78
    3cce:	b0 e0       	ldi	r27, 0x00	; 0
    3cd0:	ee e4       	ldi	r30, 0x4E	; 78
    3cd2:	f0 e0       	ldi	r31, 0x00	; 0
    3cd4:	80 81       	ld	r24, Z
    3cd6:	98 2f       	mov	r25, r24
    3cd8:	98 7f       	andi	r25, 0xF8	; 248
    3cda:	e9 81       	ldd	r30, Y+1	; 0x01
    3cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    3cde:	85 81       	ldd	r24, Z+5	; 0x05
    3ce0:	87 70       	andi	r24, 0x07	; 7
    3ce2:	89 2b       	or	r24, r25
    3ce4:	8c 93       	st	X, r24
		}

		/*********TCNT0********
		 * set starting value of timer*/
		TCNT1 = (Config_Ptr->timer_InitialValue); /*take 16-bits*/
    3ce6:	ac e4       	ldi	r26, 0x4C	; 76
    3ce8:	b0 e0       	ldi	r27, 0x00	; 0
    3cea:	e9 81       	ldd	r30, Y+1	; 0x01
    3cec:	fa 81       	ldd	r31, Y+2	; 0x02
    3cee:	80 81       	ld	r24, Z
    3cf0:	91 81       	ldd	r25, Z+1	; 0x01
    3cf2:	11 96       	adiw	r26, 0x01	; 1
    3cf4:	9c 93       	st	X, r25
    3cf6:	8e 93       	st	-X, r24

		/*********OCR1A*********/
		if(Config_Ptr->timer_mode==compareMode)
    3cf8:	e9 81       	ldd	r30, Y+1	; 0x01
    3cfa:	fa 81       	ldd	r31, Y+2	; 0x02
    3cfc:	86 81       	ldd	r24, Z+6	; 0x06
    3cfe:	81 30       	cpi	r24, 0x01	; 1
    3d00:	51 f4       	brne	.+20     	; 0x3d16 <Timer_init+0x180>
			OCR1A = (Config_Ptr->timer_compare_MatchValue); /*take 16-bits*/
    3d02:	ea e4       	ldi	r30, 0x4A	; 74
    3d04:	f0 e0       	ldi	r31, 0x00	; 0
    3d06:	a9 81       	ldd	r26, Y+1	; 0x01
    3d08:	ba 81       	ldd	r27, Y+2	; 0x02
    3d0a:	12 96       	adiw	r26, 0x02	; 2
    3d0c:	8d 91       	ld	r24, X+
    3d0e:	9c 91       	ld	r25, X
    3d10:	13 97       	sbiw	r26, 0x03	; 3
    3d12:	91 83       	std	Z+1, r25	; 0x01
    3d14:	80 83       	st	Z, r24

		/******TIMSK******/
		if(Config_Ptr->timer_mode==normalMode)
    3d16:	e9 81       	ldd	r30, Y+1	; 0x01
    3d18:	fa 81       	ldd	r31, Y+2	; 0x02
    3d1a:	86 81       	ldd	r24, Z+6	; 0x06
    3d1c:	88 23       	and	r24, r24
    3d1e:	41 f4       	brne	.+16     	; 0x3d30 <Timer_init+0x19a>
			TIMSK |= (1<<TOIE1); /*enable interrupt on overflow mode*/
    3d20:	a9 e5       	ldi	r26, 0x59	; 89
    3d22:	b0 e0       	ldi	r27, 0x00	; 0
    3d24:	e9 e5       	ldi	r30, 0x59	; 89
    3d26:	f0 e0       	ldi	r31, 0x00	; 0
    3d28:	80 81       	ld	r24, Z
    3d2a:	84 60       	ori	r24, 0x04	; 4
    3d2c:	8c 93       	st	X, r24
    3d2e:	65 c0       	rjmp	.+202    	; 0x3dfa <Timer_init+0x264>
		else
			TIMSK |= (1<<OCIE1A); /*enable interrupt on CTC mode*/
    3d30:	a9 e5       	ldi	r26, 0x59	; 89
    3d32:	b0 e0       	ldi	r27, 0x00	; 0
    3d34:	e9 e5       	ldi	r30, 0x59	; 89
    3d36:	f0 e0       	ldi	r31, 0x00	; 0
    3d38:	80 81       	ld	r24, Z
    3d3a:	80 61       	ori	r24, 0x10	; 16
    3d3c:	8c 93       	st	X, r24
    3d3e:	5d c0       	rjmp	.+186    	; 0x3dfa <Timer_init+0x264>
		 * FOC2 set to 1 in non_pwm mode
		 * WGM20:21 if WGM01 = 0 -> normal else WGM01 = 1 -> CTC
		 * COM20:21 to decide the effect the timer has on pin OC0
		 * CS00:02 to choose clock type*/

		TCCR2 |= (1<<FOC2); /*set FOC2 to 1 is non-pwm mode*/
    3d40:	a5 e4       	ldi	r26, 0x45	; 69
    3d42:	b0 e0       	ldi	r27, 0x00	; 0
    3d44:	e5 e4       	ldi	r30, 0x45	; 69
    3d46:	f0 e0       	ldi	r31, 0x00	; 0
    3d48:	80 81       	ld	r24, Z
    3d4a:	80 68       	ori	r24, 0x80	; 128
    3d4c:	8c 93       	st	X, r24

		/*if Config_Ptr->timer_mode = 0 then Normal mode
		 *if Config_Ptr->timer_mode = 1 then CTC mode*/
		TCCR2 |= ((Config_Ptr->timer_mode)<<WGM21); /*decide wave generation mode normal/CTC*/
    3d4e:	a5 e4       	ldi	r26, 0x45	; 69
    3d50:	b0 e0       	ldi	r27, 0x00	; 0
    3d52:	e5 e4       	ldi	r30, 0x45	; 69
    3d54:	f0 e0       	ldi	r31, 0x00	; 0
    3d56:	80 81       	ld	r24, Z
    3d58:	28 2f       	mov	r18, r24
    3d5a:	e9 81       	ldd	r30, Y+1	; 0x01
    3d5c:	fa 81       	ldd	r31, Y+2	; 0x02
    3d5e:	86 81       	ldd	r24, Z+6	; 0x06
    3d60:	88 2f       	mov	r24, r24
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	88 0f       	add	r24, r24
    3d66:	99 1f       	adc	r25, r25
    3d68:	88 0f       	add	r24, r24
    3d6a:	99 1f       	adc	r25, r25
    3d6c:	88 0f       	add	r24, r24
    3d6e:	99 1f       	adc	r25, r25
    3d70:	82 2b       	or	r24, r18
    3d72:	8c 93       	st	X, r24

		if(Config_Ptr->timer_clock & 0x08) /*clockType have a value of 8 or more*/
    3d74:	e9 81       	ldd	r30, Y+1	; 0x01
    3d76:	fa 81       	ldd	r31, Y+2	; 0x02
    3d78:	85 81       	ldd	r24, Z+5	; 0x05
    3d7a:	88 2f       	mov	r24, r24
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	88 70       	andi	r24, 0x08	; 8
    3d80:	90 70       	andi	r25, 0x00	; 0
    3d82:	00 97       	sbiw	r24, 0x00	; 0
    3d84:	99 f0       	breq	.+38     	; 0x3dac <Timer_init+0x216>
		{
			/* set values of CS20:22 to decide the timer clock
			 * CS20:22 are the first 3 bits in TCCR2 register*/
			TCCR2 |= (TCCR2 & 0xf8) | ((Config_Ptr->timer_clock-8) & 0x07);
    3d86:	a5 e4       	ldi	r26, 0x45	; 69
    3d88:	b0 e0       	ldi	r27, 0x00	; 0
    3d8a:	e5 e4       	ldi	r30, 0x45	; 69
    3d8c:	f0 e0       	ldi	r31, 0x00	; 0
    3d8e:	80 81       	ld	r24, Z
    3d90:	28 2f       	mov	r18, r24
    3d92:	e5 e4       	ldi	r30, 0x45	; 69
    3d94:	f0 e0       	ldi	r31, 0x00	; 0
    3d96:	80 81       	ld	r24, Z
    3d98:	98 2f       	mov	r25, r24
    3d9a:	98 7f       	andi	r25, 0xF8	; 248
    3d9c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d9e:	fa 81       	ldd	r31, Y+2	; 0x02
    3da0:	85 81       	ldd	r24, Z+5	; 0x05
    3da2:	88 50       	subi	r24, 0x08	; 8
    3da4:	87 70       	andi	r24, 0x07	; 7
    3da6:	89 2b       	or	r24, r25
    3da8:	82 2b       	or	r24, r18
    3daa:	8c 93       	st	X, r24
			/*Do nothing*/
		}

		/*********TCNT2********
		 * set starting value of timer*/
		TCNT2 = (Config_Ptr->timer_InitialValue & 0x00FF); /*take 1st 8-bits only (timer2 is 8-bit timer)*/
    3dac:	a4 e4       	ldi	r26, 0x44	; 68
    3dae:	b0 e0       	ldi	r27, 0x00	; 0
    3db0:	e9 81       	ldd	r30, Y+1	; 0x01
    3db2:	fa 81       	ldd	r31, Y+2	; 0x02
    3db4:	80 81       	ld	r24, Z
    3db6:	91 81       	ldd	r25, Z+1	; 0x01
    3db8:	8c 93       	st	X, r24

		/*********OCR2*********/
		if(Config_Ptr->timer_mode==compareMode)
    3dba:	e9 81       	ldd	r30, Y+1	; 0x01
    3dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    3dbe:	86 81       	ldd	r24, Z+6	; 0x06
    3dc0:	81 30       	cpi	r24, 0x01	; 1
    3dc2:	39 f4       	brne	.+14     	; 0x3dd2 <Timer_init+0x23c>
			OCR2 = (Config_Ptr->timer_compare_MatchValue & 0x00FF); /*take 1st 8-bits only (timer2 is 8-bit timer)*/
    3dc4:	a3 e4       	ldi	r26, 0x43	; 67
    3dc6:	b0 e0       	ldi	r27, 0x00	; 0
    3dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    3dca:	fa 81       	ldd	r31, Y+2	; 0x02
    3dcc:	82 81       	ldd	r24, Z+2	; 0x02
    3dce:	93 81       	ldd	r25, Z+3	; 0x03
    3dd0:	8c 93       	st	X, r24

		/******TIMSK******/
		if(Config_Ptr->timer_mode==normalMode)
    3dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    3dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    3dd6:	86 81       	ldd	r24, Z+6	; 0x06
    3dd8:	88 23       	and	r24, r24
    3dda:	41 f4       	brne	.+16     	; 0x3dec <Timer_init+0x256>
			TIMSK |= (1<<TOIE2); /*enable interrupt on overflow mode*/
    3ddc:	a9 e5       	ldi	r26, 0x59	; 89
    3dde:	b0 e0       	ldi	r27, 0x00	; 0
    3de0:	e9 e5       	ldi	r30, 0x59	; 89
    3de2:	f0 e0       	ldi	r31, 0x00	; 0
    3de4:	80 81       	ld	r24, Z
    3de6:	80 64       	ori	r24, 0x40	; 64
    3de8:	8c 93       	st	X, r24
    3dea:	07 c0       	rjmp	.+14     	; 0x3dfa <Timer_init+0x264>
		else
			TIMSK |= (1<<OCIE2); /*enable interrupt on CTC mode*/
    3dec:	a9 e5       	ldi	r26, 0x59	; 89
    3dee:	b0 e0       	ldi	r27, 0x00	; 0
    3df0:	e9 e5       	ldi	r30, 0x59	; 89
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	80 81       	ld	r24, Z
    3df6:	80 68       	ori	r24, 0x80	; 128
    3df8:	8c 93       	st	X, r24
		break;
	}

}
    3dfa:	0f 90       	pop	r0
    3dfc:	0f 90       	pop	r0
    3dfe:	0f 90       	pop	r0
    3e00:	0f 90       	pop	r0
    3e02:	cf 91       	pop	r28
    3e04:	df 91       	pop	r29
    3e06:	08 95       	ret

00003e08 <Timer_deInit>:

void Timer_deInit(Timer_ID_Type timer_type)
{
    3e08:	df 93       	push	r29
    3e0a:	cf 93       	push	r28
    3e0c:	00 d0       	rcall	.+0      	; 0x3e0e <Timer_deInit+0x6>
    3e0e:	0f 92       	push	r0
    3e10:	cd b7       	in	r28, 0x3d	; 61
    3e12:	de b7       	in	r29, 0x3e	; 62
    3e14:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    3e16:	89 81       	ldd	r24, Y+1	; 0x01
    3e18:	28 2f       	mov	r18, r24
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	3b 83       	std	Y+3, r19	; 0x03
    3e1e:	2a 83       	std	Y+2, r18	; 0x02
    3e20:	8a 81       	ldd	r24, Y+2	; 0x02
    3e22:	9b 81       	ldd	r25, Y+3	; 0x03
    3e24:	81 30       	cpi	r24, 0x01	; 1
    3e26:	91 05       	cpc	r25, r1
    3e28:	d1 f0       	breq	.+52     	; 0x3e5e <Timer_deInit+0x56>
    3e2a:	2a 81       	ldd	r18, Y+2	; 0x02
    3e2c:	3b 81       	ldd	r19, Y+3	; 0x03
    3e2e:	22 30       	cpi	r18, 0x02	; 2
    3e30:	31 05       	cpc	r19, r1
    3e32:	81 f1       	breq	.+96     	; 0x3e94 <Timer_deInit+0x8c>
    3e34:	8a 81       	ldd	r24, Y+2	; 0x02
    3e36:	9b 81       	ldd	r25, Y+3	; 0x03
    3e38:	00 97       	sbiw	r24, 0x00	; 0
    3e3a:	e1 f5       	brne	.+120    	; 0x3eb4 <Timer_deInit+0xac>
	{
	case timer0:
		TCNT0  = 0;
    3e3c:	e2 e5       	ldi	r30, 0x52	; 82
    3e3e:	f0 e0       	ldi	r31, 0x00	; 0
    3e40:	10 82       	st	Z, r1
		OCR0   = 0;
    3e42:	ec e5       	ldi	r30, 0x5C	; 92
    3e44:	f0 e0       	ldi	r31, 0x00	; 0
    3e46:	10 82       	st	Z, r1
		TIMSK  = 0;
    3e48:	e9 e5       	ldi	r30, 0x59	; 89
    3e4a:	f0 e0       	ldi	r31, 0x00	; 0
    3e4c:	10 82       	st	Z, r1
		TCCR0 &= (0xf8);
    3e4e:	a3 e5       	ldi	r26, 0x53	; 83
    3e50:	b0 e0       	ldi	r27, 0x00	; 0
    3e52:	e3 e5       	ldi	r30, 0x53	; 83
    3e54:	f0 e0       	ldi	r31, 0x00	; 0
    3e56:	80 81       	ld	r24, Z
    3e58:	88 7f       	andi	r24, 0xF8	; 248
    3e5a:	8c 93       	st	X, r24
    3e5c:	2b c0       	rjmp	.+86     	; 0x3eb4 <Timer_deInit+0xac>
		break;
	case timer1:
		TCNT1  = 0;
    3e5e:	ec e4       	ldi	r30, 0x4C	; 76
    3e60:	f0 e0       	ldi	r31, 0x00	; 0
    3e62:	11 82       	std	Z+1, r1	; 0x01
    3e64:	10 82       	st	Z, r1
		OCR1A  = 0;
    3e66:	ea e4       	ldi	r30, 0x4A	; 74
    3e68:	f0 e0       	ldi	r31, 0x00	; 0
    3e6a:	11 82       	std	Z+1, r1	; 0x01
    3e6c:	10 82       	st	Z, r1
		OCR1B  = 0;
    3e6e:	e8 e4       	ldi	r30, 0x48	; 72
    3e70:	f0 e0       	ldi	r31, 0x00	; 0
    3e72:	11 82       	std	Z+1, r1	; 0x01
    3e74:	10 82       	st	Z, r1
		TIMSK  &= (0xEC);
    3e76:	a9 e5       	ldi	r26, 0x59	; 89
    3e78:	b0 e0       	ldi	r27, 0x00	; 0
    3e7a:	e9 e5       	ldi	r30, 0x59	; 89
    3e7c:	f0 e0       	ldi	r31, 0x00	; 0
    3e7e:	80 81       	ld	r24, Z
    3e80:	8c 7e       	andi	r24, 0xEC	; 236
    3e82:	8c 93       	st	X, r24
		TCCR1B &= (0xf8);
    3e84:	ae e4       	ldi	r26, 0x4E	; 78
    3e86:	b0 e0       	ldi	r27, 0x00	; 0
    3e88:	ee e4       	ldi	r30, 0x4E	; 78
    3e8a:	f0 e0       	ldi	r31, 0x00	; 0
    3e8c:	80 81       	ld	r24, Z
    3e8e:	88 7f       	andi	r24, 0xF8	; 248
    3e90:	8c 93       	st	X, r24
    3e92:	10 c0       	rjmp	.+32     	; 0x3eb4 <Timer_deInit+0xac>
		break;
	case timer2:
		TCNT2  = 0;
    3e94:	e4 e4       	ldi	r30, 0x44	; 68
    3e96:	f0 e0       	ldi	r31, 0x00	; 0
    3e98:	10 82       	st	Z, r1
		OCR2   = 0;
    3e9a:	e3 e4       	ldi	r30, 0x43	; 67
    3e9c:	f0 e0       	ldi	r31, 0x00	; 0
    3e9e:	10 82       	st	Z, r1
		TIMSK  = 0;
    3ea0:	e9 e5       	ldi	r30, 0x59	; 89
    3ea2:	f0 e0       	ldi	r31, 0x00	; 0
    3ea4:	10 82       	st	Z, r1
		TCCR2 &= (0xf8);
    3ea6:	a5 e4       	ldi	r26, 0x45	; 69
    3ea8:	b0 e0       	ldi	r27, 0x00	; 0
    3eaa:	e5 e4       	ldi	r30, 0x45	; 69
    3eac:	f0 e0       	ldi	r31, 0x00	; 0
    3eae:	80 81       	ld	r24, Z
    3eb0:	88 7f       	andi	r24, 0xF8	; 248
    3eb2:	8c 93       	st	X, r24
		break;
	}
}
    3eb4:	0f 90       	pop	r0
    3eb6:	0f 90       	pop	r0
    3eb8:	0f 90       	pop	r0
    3eba:	cf 91       	pop	r28
    3ebc:	df 91       	pop	r29
    3ebe:	08 95       	ret

00003ec0 <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    3ec0:	df 93       	push	r29
    3ec2:	cf 93       	push	r28
    3ec4:	00 d0       	rcall	.+0      	; 0x3ec6 <Timer_setCallBack+0x6>
    3ec6:	00 d0       	rcall	.+0      	; 0x3ec8 <Timer_setCallBack+0x8>
    3ec8:	0f 92       	push	r0
    3eca:	cd b7       	in	r28, 0x3d	; 61
    3ecc:	de b7       	in	r29, 0x3e	; 62
    3ece:	9a 83       	std	Y+2, r25	; 0x02
    3ed0:	89 83       	std	Y+1, r24	; 0x01
    3ed2:	6b 83       	std	Y+3, r22	; 0x03
	switch(a_timer_ID)
    3ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed6:	28 2f       	mov	r18, r24
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	3d 83       	std	Y+5, r19	; 0x05
    3edc:	2c 83       	std	Y+4, r18	; 0x04
    3ede:	8c 81       	ldd	r24, Y+4	; 0x04
    3ee0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ee2:	81 30       	cpi	r24, 0x01	; 1
    3ee4:	91 05       	cpc	r25, r1
    3ee6:	81 f0       	breq	.+32     	; 0x3f08 <Timer_setCallBack+0x48>
    3ee8:	2c 81       	ldd	r18, Y+4	; 0x04
    3eea:	3d 81       	ldd	r19, Y+5	; 0x05
    3eec:	22 30       	cpi	r18, 0x02	; 2
    3eee:	31 05       	cpc	r19, r1
    3ef0:	91 f0       	breq	.+36     	; 0x3f16 <Timer_setCallBack+0x56>
    3ef2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ef4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ef6:	00 97       	sbiw	r24, 0x00	; 0
    3ef8:	a1 f4       	brne	.+40     	; 0x3f22 <Timer_setCallBack+0x62>
	{
	case timer0:
		s_timer0CallbackPtr = a_ptr;
    3efa:	89 81       	ldd	r24, Y+1	; 0x01
    3efc:	9a 81       	ldd	r25, Y+2	; 0x02
    3efe:	90 93 9d 00 	sts	0x009D, r25
    3f02:	80 93 9c 00 	sts	0x009C, r24
    3f06:	0d c0       	rjmp	.+26     	; 0x3f22 <Timer_setCallBack+0x62>
		break;
	case timer1:
		s_timer1CallbackPtr = a_ptr;
    3f08:	89 81       	ldd	r24, Y+1	; 0x01
    3f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f0c:	90 93 9f 00 	sts	0x009F, r25
    3f10:	80 93 9e 00 	sts	0x009E, r24
    3f14:	06 c0       	rjmp	.+12     	; 0x3f22 <Timer_setCallBack+0x62>
		break;
	case timer2:
		s_timer2CallbackPtr = a_ptr;
    3f16:	89 81       	ldd	r24, Y+1	; 0x01
    3f18:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1a:	90 93 a1 00 	sts	0x00A1, r25
    3f1e:	80 93 a0 00 	sts	0x00A0, r24
		break;
	}
}
    3f22:	0f 90       	pop	r0
    3f24:	0f 90       	pop	r0
    3f26:	0f 90       	pop	r0
    3f28:	0f 90       	pop	r0
    3f2a:	0f 90       	pop	r0
    3f2c:	cf 91       	pop	r28
    3f2e:	df 91       	pop	r29
    3f30:	08 95       	ret

00003f32 <__udivmodqi4>:
    3f32:	99 1b       	sub	r25, r25
    3f34:	79 e0       	ldi	r23, 0x09	; 9
    3f36:	04 c0       	rjmp	.+8      	; 0x3f40 <__udivmodqi4_ep>

00003f38 <__udivmodqi4_loop>:
    3f38:	99 1f       	adc	r25, r25
    3f3a:	96 17       	cp	r25, r22
    3f3c:	08 f0       	brcs	.+2      	; 0x3f40 <__udivmodqi4_ep>
    3f3e:	96 1b       	sub	r25, r22

00003f40 <__udivmodqi4_ep>:
    3f40:	88 1f       	adc	r24, r24
    3f42:	7a 95       	dec	r23
    3f44:	c9 f7       	brne	.-14     	; 0x3f38 <__udivmodqi4_loop>
    3f46:	80 95       	com	r24
    3f48:	08 95       	ret

00003f4a <__prologue_saves__>:
    3f4a:	2f 92       	push	r2
    3f4c:	3f 92       	push	r3
    3f4e:	4f 92       	push	r4
    3f50:	5f 92       	push	r5
    3f52:	6f 92       	push	r6
    3f54:	7f 92       	push	r7
    3f56:	8f 92       	push	r8
    3f58:	9f 92       	push	r9
    3f5a:	af 92       	push	r10
    3f5c:	bf 92       	push	r11
    3f5e:	cf 92       	push	r12
    3f60:	df 92       	push	r13
    3f62:	ef 92       	push	r14
    3f64:	ff 92       	push	r15
    3f66:	0f 93       	push	r16
    3f68:	1f 93       	push	r17
    3f6a:	cf 93       	push	r28
    3f6c:	df 93       	push	r29
    3f6e:	cd b7       	in	r28, 0x3d	; 61
    3f70:	de b7       	in	r29, 0x3e	; 62
    3f72:	ca 1b       	sub	r28, r26
    3f74:	db 0b       	sbc	r29, r27
    3f76:	0f b6       	in	r0, 0x3f	; 63
    3f78:	f8 94       	cli
    3f7a:	de bf       	out	0x3e, r29	; 62
    3f7c:	0f be       	out	0x3f, r0	; 63
    3f7e:	cd bf       	out	0x3d, r28	; 61
    3f80:	09 94       	ijmp

00003f82 <__epilogue_restores__>:
    3f82:	2a 88       	ldd	r2, Y+18	; 0x12
    3f84:	39 88       	ldd	r3, Y+17	; 0x11
    3f86:	48 88       	ldd	r4, Y+16	; 0x10
    3f88:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f90:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f92:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f94:	b9 84       	ldd	r11, Y+9	; 0x09
    3f96:	c8 84       	ldd	r12, Y+8	; 0x08
    3f98:	df 80       	ldd	r13, Y+7	; 0x07
    3f9a:	ee 80       	ldd	r14, Y+6	; 0x06
    3f9c:	fd 80       	ldd	r15, Y+5	; 0x05
    3f9e:	0c 81       	ldd	r16, Y+4	; 0x04
    3fa0:	1b 81       	ldd	r17, Y+3	; 0x03
    3fa2:	aa 81       	ldd	r26, Y+2	; 0x02
    3fa4:	b9 81       	ldd	r27, Y+1	; 0x01
    3fa6:	ce 0f       	add	r28, r30
    3fa8:	d1 1d       	adc	r29, r1
    3faa:	0f b6       	in	r0, 0x3f	; 63
    3fac:	f8 94       	cli
    3fae:	de bf       	out	0x3e, r29	; 62
    3fb0:	0f be       	out	0x3f, r0	; 63
    3fb2:	cd bf       	out	0x3d, r28	; 61
    3fb4:	ed 01       	movw	r28, r26
    3fb6:	08 95       	ret

00003fb8 <_exit>:
    3fb8:	f8 94       	cli

00003fba <__stop_program>:
    3fba:	ff cf       	rjmp	.-2      	; 0x3fba <__stop_program>
